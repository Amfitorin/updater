//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 01.12.2014 17:38:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Context
{

    [DatabaseAttribute(Name = "amfito_ocart")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class DataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertOcZoneToGeoZone(OcZoneToGeoZone instance);
        partial void UpdateOcZoneToGeoZone(OcZoneToGeoZone instance);
        partial void DeleteOcZoneToGeoZone(OcZoneToGeoZone instance);
        partial void InsertOcZone(OcZone instance);
        partial void UpdateOcZone(OcZone instance);
        partial void DeleteOcZone(OcZone instance);
        partial void InsertOcWeightClassDescription(OcWeightClassDescription instance);
        partial void UpdateOcWeightClassDescription(OcWeightClassDescription instance);
        partial void DeleteOcWeightClassDescription(OcWeightClassDescription instance);
        partial void InsertOcWeightClass(OcWeightClass instance);
        partial void UpdateOcWeightClass(OcWeightClass instance);
        partial void DeleteOcWeightClass(OcWeightClass instance);
        partial void InsertOcVoucherThemeDescription(OcVoucherThemeDescription instance);
        partial void UpdateOcVoucherThemeDescription(OcVoucherThemeDescription instance);
        partial void DeleteOcVoucherThemeDescription(OcVoucherThemeDescription instance);
        partial void InsertOcVoucherTheme(OcVoucherTheme instance);
        partial void UpdateOcVoucherTheme(OcVoucherTheme instance);
        partial void DeleteOcVoucherTheme(OcVoucherTheme instance);
        partial void InsertOcVoucherHistory(OcVoucherHistory instance);
        partial void UpdateOcVoucherHistory(OcVoucherHistory instance);
        partial void DeleteOcVoucherHistory(OcVoucherHistory instance);
        partial void InsertOcVoucher(OcVoucher instance);
        partial void UpdateOcVoucher(OcVoucher instance);
        partial void DeleteOcVoucher(OcVoucher instance);
        partial void InsertOcUserGroup(OcUserGroup instance);
        partial void UpdateOcUserGroup(OcUserGroup instance);
        partial void DeleteOcUserGroup(OcUserGroup instance);
        partial void InsertOcUser(OcUser instance);
        partial void UpdateOcUser(OcUser instance);
        partial void DeleteOcUser(OcUser instance);
        partial void InsertOcUrlAlias(OcUrlAlias instance);
        partial void UpdateOcUrlAlias(OcUrlAlias instance);
        partial void DeleteOcUrlAlias(OcUrlAlias instance);
        partial void InsertOcTaxRule(OcTaxRule instance);
        partial void UpdateOcTaxRule(OcTaxRule instance);
        partial void DeleteOcTaxRule(OcTaxRule instance);
        partial void InsertOcTaxRateToCustomerGroup(OcTaxRateToCustomerGroup instance);
        partial void UpdateOcTaxRateToCustomerGroup(OcTaxRateToCustomerGroup instance);
        partial void DeleteOcTaxRateToCustomerGroup(OcTaxRateToCustomerGroup instance);
        partial void InsertOcTaxRate(OcTaxRate instance);
        partial void UpdateOcTaxRate(OcTaxRate instance);
        partial void DeleteOcTaxRate(OcTaxRate instance);
        partial void InsertOcTaxClass(OcTaxClass instance);
        partial void UpdateOcTaxClass(OcTaxClass instance);
        partial void DeleteOcTaxClass(OcTaxClass instance);
        partial void InsertOcStore(OcStore instance);
        partial void UpdateOcStore(OcStore instance);
        partial void DeleteOcStore(OcStore instance);
        partial void InsertOcStockStatus(OcStockStatus instance);
        partial void UpdateOcStockStatus(OcStockStatus instance);
        partial void DeleteOcStockStatus(OcStockStatus instance);
        partial void InsertOcSetting(OcSetting instance);
        partial void UpdateOcSetting(OcSetting instance);
        partial void DeleteOcSetting(OcSetting instance);
        partial void InsertOcReview(OcReview instance);
        partial void UpdateOcReview(OcReview instance);
        partial void DeleteOcReview(OcReview instance);
        partial void InsertOcReturnStatus(OcReturnStatus instance);
        partial void UpdateOcReturnStatus(OcReturnStatus instance);
        partial void DeleteOcReturnStatus(OcReturnStatus instance);
        partial void InsertOcReturnReason(OcReturnReason instance);
        partial void UpdateOcReturnReason(OcReturnReason instance);
        partial void DeleteOcReturnReason(OcReturnReason instance);
        partial void InsertOcReturnHistory(OcReturnHistory instance);
        partial void UpdateOcReturnHistory(OcReturnHistory instance);
        partial void DeleteOcReturnHistory(OcReturnHistory instance);
        partial void InsertOcReturnAction(OcReturnAction instance);
        partial void UpdateOcReturnAction(OcReturnAction instance);
        partial void DeleteOcReturnAction(OcReturnAction instance);
        partial void InsertOcReturn(OcReturn instance);
        partial void UpdateOcReturn(OcReturn instance);
        partial void DeleteOcReturn(OcReturn instance);
        partial void InsertOcProfileDescription(OcProfileDescription instance);
        partial void UpdateOcProfileDescription(OcProfileDescription instance);
        partial void DeleteOcProfileDescription(OcProfileDescription instance);
        partial void InsertOcProfile(OcProfile instance);
        partial void UpdateOcProfile(OcProfile instance);
        partial void DeleteOcProfile(OcProfile instance);
        partial void InsertOcProductToStore(OcProductToStore instance);
        partial void UpdateOcProductToStore(OcProductToStore instance);
        partial void DeleteOcProductToStore(OcProductToStore instance);
        partial void InsertOcProductToLayout(OcProductToLayout instance);
        partial void UpdateOcProductToLayout(OcProductToLayout instance);
        partial void DeleteOcProductToLayout(OcProductToLayout instance);
        partial void InsertOcProductToDownload(OcProductToDownload instance);
        partial void UpdateOcProductToDownload(OcProductToDownload instance);
        partial void DeleteOcProductToDownload(OcProductToDownload instance);
        partial void InsertOcProductToCategory(OcProductToCategory instance);
        partial void UpdateOcProductToCategory(OcProductToCategory instance);
        partial void DeleteOcProductToCategory(OcProductToCategory instance);
        partial void InsertOcProductSpecial(OcProductSpecial instance);
        partial void UpdateOcProductSpecial(OcProductSpecial instance);
        partial void DeleteOcProductSpecial(OcProductSpecial instance);
        partial void InsertOcProductReward(OcProductReward instance);
        partial void UpdateOcProductReward(OcProductReward instance);
        partial void DeleteOcProductReward(OcProductReward instance);
        partial void InsertOcProductRelated(OcProductRelated instance);
        partial void UpdateOcProductRelated(OcProductRelated instance);
        partial void DeleteOcProductRelated(OcProductRelated instance);
        partial void InsertOcProductRecurring(OcProductRecurring instance);
        partial void UpdateOcProductRecurring(OcProductRecurring instance);
        partial void DeleteOcProductRecurring(OcProductRecurring instance);
        partial void InsertOcProductProfile(OcProductProfile instance);
        partial void UpdateOcProductProfile(OcProductProfile instance);
        partial void DeleteOcProductProfile(OcProductProfile instance);
        partial void InsertOcProductOptionValue(OcProductOptionValue instance);
        partial void UpdateOcProductOptionValue(OcProductOptionValue instance);
        partial void DeleteOcProductOptionValue(OcProductOptionValue instance);
        partial void InsertOcProductOption(OcProductOption instance);
        partial void UpdateOcProductOption(OcProductOption instance);
        partial void DeleteOcProductOption(OcProductOption instance);
        partial void InsertOcProductImage(OcProductImage instance);
        partial void UpdateOcProductImage(OcProductImage instance);
        partial void DeleteOcProductImage(OcProductImage instance);
        partial void InsertOcProductFilter(OcProductFilter instance);
        partial void UpdateOcProductFilter(OcProductFilter instance);
        partial void DeleteOcProductFilter(OcProductFilter instance);
        partial void InsertOcProductDiscount(OcProductDiscount instance);
        partial void UpdateOcProductDiscount(OcProductDiscount instance);
        partial void DeleteOcProductDiscount(OcProductDiscount instance);
        partial void InsertOcProductDescription(OcProductDescription instance);
        partial void UpdateOcProductDescription(OcProductDescription instance);
        partial void DeleteOcProductDescription(OcProductDescription instance);
        partial void InsertOcProductAttribute(OcProductAttribute instance);
        partial void UpdateOcProductAttribute(OcProductAttribute instance);
        partial void DeleteOcProductAttribute(OcProductAttribute instance);
        partial void InsertOcProduct(OcProduct instance);
        partial void UpdateOcProduct(OcProduct instance);
        partial void DeleteOcProduct(OcProduct instance);
        partial void InsertOcOrderVoucher(OcOrderVoucher instance);
        partial void UpdateOcOrderVoucher(OcOrderVoucher instance);
        partial void DeleteOcOrderVoucher(OcOrderVoucher instance);
        partial void InsertOcOrderTotal(OcOrderTotal instance);
        partial void UpdateOcOrderTotal(OcOrderTotal instance);
        partial void DeleteOcOrderTotal(OcOrderTotal instance);
        partial void InsertOcOrderStatus(OcOrderStatus instance);
        partial void UpdateOcOrderStatus(OcOrderStatus instance);
        partial void DeleteOcOrderStatus(OcOrderStatus instance);
        partial void InsertOcOrderRecurringTransaction(OcOrderRecurringTransaction instance);
        partial void UpdateOcOrderRecurringTransaction(OcOrderRecurringTransaction instance);
        partial void DeleteOcOrderRecurringTransaction(OcOrderRecurringTransaction instance);
        partial void InsertOcOrderRecurring(OcOrderRecurring instance);
        partial void UpdateOcOrderRecurring(OcOrderRecurring instance);
        partial void DeleteOcOrderRecurring(OcOrderRecurring instance);
        partial void InsertOcOrderProduct(OcOrderProduct instance);
        partial void UpdateOcOrderProduct(OcOrderProduct instance);
        partial void DeleteOcOrderProduct(OcOrderProduct instance);
        partial void InsertOcOrderOption(OcOrderOption instance);
        partial void UpdateOcOrderOption(OcOrderOption instance);
        partial void DeleteOcOrderOption(OcOrderOption instance);
        partial void InsertOcOrderHistory(OcOrderHistory instance);
        partial void UpdateOcOrderHistory(OcOrderHistory instance);
        partial void DeleteOcOrderHistory(OcOrderHistory instance);
        partial void InsertOcOrderFraud(OcOrderFraud instance);
        partial void UpdateOcOrderFraud(OcOrderFraud instance);
        partial void DeleteOcOrderFraud(OcOrderFraud instance);
        partial void InsertOcOrderField(OcOrderField instance);
        partial void UpdateOcOrderField(OcOrderField instance);
        partial void DeleteOcOrderField(OcOrderField instance);
        partial void InsertOcOrderDownload(OcOrderDownload instance);
        partial void UpdateOcOrderDownload(OcOrderDownload instance);
        partial void DeleteOcOrderDownload(OcOrderDownload instance);
        partial void InsertOcOrder(OcOrder instance);
        partial void UpdateOcOrder(OcOrder instance);
        partial void DeleteOcOrder(OcOrder instance);
        partial void InsertOcOptionValueDescription(OcOptionValueDescription instance);
        partial void UpdateOcOptionValueDescription(OcOptionValueDescription instance);
        partial void DeleteOcOptionValueDescription(OcOptionValueDescription instance);
        partial void InsertOcOptionValue(OcOptionValue instance);
        partial void UpdateOcOptionValue(OcOptionValue instance);
        partial void DeleteOcOptionValue(OcOptionValue instance);
        partial void InsertOcOptionDescription(OcOptionDescription instance);
        partial void UpdateOcOptionDescription(OcOptionDescription instance);
        partial void DeleteOcOptionDescription(OcOptionDescription instance);
        partial void InsertOcOption(OcOption instance);
        partial void UpdateOcOption(OcOption instance);
        partial void DeleteOcOption(OcOption instance);
        partial void InsertOcOpenbayFaq(OcOpenbayFaq instance);
        partial void UpdateOcOpenbayFaq(OcOpenbayFaq instance);
        partial void DeleteOcOpenbayFaq(OcOpenbayFaq instance);
        partial void InsertOcManufacturerToStore(OcManufacturerToStore instance);
        partial void UpdateOcManufacturerToStore(OcManufacturerToStore instance);
        partial void DeleteOcManufacturerToStore(OcManufacturerToStore instance);
        partial void InsertOcManufacturer(OcManufacturer instance);
        partial void UpdateOcManufacturer(OcManufacturer instance);
        partial void DeleteOcManufacturer(OcManufacturer instance);
        partial void InsertOcLengthClassDescription(OcLengthClassDescription instance);
        partial void UpdateOcLengthClassDescription(OcLengthClassDescription instance);
        partial void DeleteOcLengthClassDescription(OcLengthClassDescription instance);
        partial void InsertOcLengthClass(OcLengthClass instance);
        partial void UpdateOcLengthClass(OcLengthClass instance);
        partial void DeleteOcLengthClass(OcLengthClass instance);
        partial void InsertOcLayoutRoute(OcLayoutRoute instance);
        partial void UpdateOcLayoutRoute(OcLayoutRoute instance);
        partial void DeleteOcLayoutRoute(OcLayoutRoute instance);
        partial void InsertOcLayout(OcLayout instance);
        partial void UpdateOcLayout(OcLayout instance);
        partial void DeleteOcLayout(OcLayout instance);
        partial void InsertOcLanguage(OcLanguage instance);
        partial void UpdateOcLanguage(OcLanguage instance);
        partial void DeleteOcLanguage(OcLanguage instance);
        partial void InsertOcInformationToStore(OcInformationToStore instance);
        partial void UpdateOcInformationToStore(OcInformationToStore instance);
        partial void DeleteOcInformationToStore(OcInformationToStore instance);
        partial void InsertOcInformationToLayout(OcInformationToLayout instance);
        partial void UpdateOcInformationToLayout(OcInformationToLayout instance);
        partial void DeleteOcInformationToLayout(OcInformationToLayout instance);
        partial void InsertOcInformationDescription(OcInformationDescription instance);
        partial void UpdateOcInformationDescription(OcInformationDescription instance);
        partial void DeleteOcInformationDescription(OcInformationDescription instance);
        partial void InsertOcInformation(OcInformation instance);
        partial void UpdateOcInformation(OcInformation instance);
        partial void DeleteOcInformation(OcInformation instance);
        partial void InsertOcGeoZone(OcGeoZone instance);
        partial void UpdateOcGeoZone(OcGeoZone instance);
        partial void DeleteOcGeoZone(OcGeoZone instance);
        partial void InsertOcFilterGroupDescription(OcFilterGroupDescription instance);
        partial void UpdateOcFilterGroupDescription(OcFilterGroupDescription instance);
        partial void DeleteOcFilterGroupDescription(OcFilterGroupDescription instance);
        partial void InsertOcFilterGroup(OcFilterGroup instance);
        partial void UpdateOcFilterGroup(OcFilterGroup instance);
        partial void DeleteOcFilterGroup(OcFilterGroup instance);
        partial void InsertOcFilterDescription(OcFilterDescription instance);
        partial void UpdateOcFilterDescription(OcFilterDescription instance);
        partial void DeleteOcFilterDescription(OcFilterDescription instance);
        partial void InsertOcFilter(OcFilter instance);
        partial void UpdateOcFilter(OcFilter instance);
        partial void DeleteOcFilter(OcFilter instance);
        partial void InsertOcExtension(OcExtension instance);
        partial void UpdateOcExtension(OcExtension instance);
        partial void DeleteOcExtension(OcExtension instance);
        partial void InsertOcDownloadDescription(OcDownloadDescription instance);
        partial void UpdateOcDownloadDescription(OcDownloadDescription instance);
        partial void DeleteOcDownloadDescription(OcDownloadDescription instance);
        partial void InsertOcDownload(OcDownload instance);
        partial void UpdateOcDownload(OcDownload instance);
        partial void DeleteOcDownload(OcDownload instance);
        partial void InsertOcCustomerTransaction(OcCustomerTransaction instance);
        partial void UpdateOcCustomerTransaction(OcCustomerTransaction instance);
        partial void DeleteOcCustomerTransaction(OcCustomerTransaction instance);
        partial void InsertOcCustomerReward(OcCustomerReward instance);
        partial void UpdateOcCustomerReward(OcCustomerReward instance);
        partial void DeleteOcCustomerReward(OcCustomerReward instance);
        partial void InsertOcCustomerOnline(OcCustomerOnline instance);
        partial void UpdateOcCustomerOnline(OcCustomerOnline instance);
        partial void DeleteOcCustomerOnline(OcCustomerOnline instance);
        partial void InsertOcCustomerIp(OcCustomerIp instance);
        partial void UpdateOcCustomerIp(OcCustomerIp instance);
        partial void DeleteOcCustomerIp(OcCustomerIp instance);
        partial void InsertOcCustomerHistory(OcCustomerHistory instance);
        partial void UpdateOcCustomerHistory(OcCustomerHistory instance);
        partial void DeleteOcCustomerHistory(OcCustomerHistory instance);
        partial void InsertOcCustomerGroupDescription(OcCustomerGroupDescription instance);
        partial void UpdateOcCustomerGroupDescription(OcCustomerGroupDescription instance);
        partial void DeleteOcCustomerGroupDescription(OcCustomerGroupDescription instance);
        partial void InsertOcCustomerGroup(OcCustomerGroup instance);
        partial void UpdateOcCustomerGroup(OcCustomerGroup instance);
        partial void DeleteOcCustomerGroup(OcCustomerGroup instance);
        partial void InsertOcCustomerField(OcCustomerField instance);
        partial void UpdateOcCustomerField(OcCustomerField instance);
        partial void DeleteOcCustomerField(OcCustomerField instance);
        partial void InsertOcCustomerBanIp(OcCustomerBanIp instance);
        partial void UpdateOcCustomerBanIp(OcCustomerBanIp instance);
        partial void DeleteOcCustomerBanIp(OcCustomerBanIp instance);
        partial void InsertOcCustomer(OcCustomer instance);
        partial void UpdateOcCustomer(OcCustomer instance);
        partial void DeleteOcCustomer(OcCustomer instance);
        partial void InsertOcCustomFieldValueDescription(OcCustomFieldValueDescription instance);
        partial void UpdateOcCustomFieldValueDescription(OcCustomFieldValueDescription instance);
        partial void DeleteOcCustomFieldValueDescription(OcCustomFieldValueDescription instance);
        partial void InsertOcCustomFieldValue(OcCustomFieldValue instance);
        partial void UpdateOcCustomFieldValue(OcCustomFieldValue instance);
        partial void DeleteOcCustomFieldValue(OcCustomFieldValue instance);
        partial void InsertOcCustomFieldToCustomerGroup(OcCustomFieldToCustomerGroup instance);
        partial void UpdateOcCustomFieldToCustomerGroup(OcCustomFieldToCustomerGroup instance);
        partial void DeleteOcCustomFieldToCustomerGroup(OcCustomFieldToCustomerGroup instance);
        partial void InsertOcCustomFieldDescription(OcCustomFieldDescription instance);
        partial void UpdateOcCustomFieldDescription(OcCustomFieldDescription instance);
        partial void DeleteOcCustomFieldDescription(OcCustomFieldDescription instance);
        partial void InsertOcCustomField(OcCustomField instance);
        partial void UpdateOcCustomField(OcCustomField instance);
        partial void DeleteOcCustomField(OcCustomField instance);
        partial void InsertOcCurrency(OcCurrency instance);
        partial void UpdateOcCurrency(OcCurrency instance);
        partial void DeleteOcCurrency(OcCurrency instance);
        partial void InsertOcCouponProduct(OcCouponProduct instance);
        partial void UpdateOcCouponProduct(OcCouponProduct instance);
        partial void DeleteOcCouponProduct(OcCouponProduct instance);
        partial void InsertOcCouponHistory(OcCouponHistory instance);
        partial void UpdateOcCouponHistory(OcCouponHistory instance);
        partial void DeleteOcCouponHistory(OcCouponHistory instance);
        partial void InsertOcCouponCategory(OcCouponCategory instance);
        partial void UpdateOcCouponCategory(OcCouponCategory instance);
        partial void DeleteOcCouponCategory(OcCouponCategory instance);
        partial void InsertOcCoupon(OcCoupon instance);
        partial void UpdateOcCoupon(OcCoupon instance);
        partial void DeleteOcCoupon(OcCoupon instance);
        partial void InsertOcCountry(OcCountry instance);
        partial void UpdateOcCountry(OcCountry instance);
        partial void DeleteOcCountry(OcCountry instance);
        partial void InsertOcCategoryToStore(OcCategoryToStore instance);
        partial void UpdateOcCategoryToStore(OcCategoryToStore instance);
        partial void DeleteOcCategoryToStore(OcCategoryToStore instance);
        partial void InsertOcCategoryToLayout(OcCategoryToLayout instance);
        partial void UpdateOcCategoryToLayout(OcCategoryToLayout instance);
        partial void DeleteOcCategoryToLayout(OcCategoryToLayout instance);
        partial void InsertOcCategoryPath(OcCategoryPath instance);
        partial void UpdateOcCategoryPath(OcCategoryPath instance);
        partial void DeleteOcCategoryPath(OcCategoryPath instance);
        partial void InsertOcCategoryFilter(OcCategoryFilter instance);
        partial void UpdateOcCategoryFilter(OcCategoryFilter instance);
        partial void DeleteOcCategoryFilter(OcCategoryFilter instance);
        partial void InsertOcCategoryDescription(OcCategoryDescription instance);
        partial void UpdateOcCategoryDescription(OcCategoryDescription instance);
        partial void DeleteOcCategoryDescription(OcCategoryDescription instance);
        partial void InsertOcCategory(OcCategory instance);
        partial void UpdateOcCategory(OcCategory instance);
        partial void DeleteOcCategory(OcCategory instance);
        partial void InsertOcBannerImageDescription(OcBannerImageDescription instance);
        partial void UpdateOcBannerImageDescription(OcBannerImageDescription instance);
        partial void DeleteOcBannerImageDescription(OcBannerImageDescription instance);
        partial void InsertOcBannerImage(OcBannerImage instance);
        partial void UpdateOcBannerImage(OcBannerImage instance);
        partial void DeleteOcBannerImage(OcBannerImage instance);
        partial void InsertOcBanner(OcBanner instance);
        partial void UpdateOcBanner(OcBanner instance);
        partial void DeleteOcBanner(OcBanner instance);
        partial void InsertOcAttributeGroupDescription(OcAttributeGroupDescription instance);
        partial void UpdateOcAttributeGroupDescription(OcAttributeGroupDescription instance);
        partial void DeleteOcAttributeGroupDescription(OcAttributeGroupDescription instance);
        partial void InsertOcAttributeGroup(OcAttributeGroup instance);
        partial void UpdateOcAttributeGroup(OcAttributeGroup instance);
        partial void DeleteOcAttributeGroup(OcAttributeGroup instance);
        partial void InsertOcAttributeDescription(OcAttributeDescription instance);
        partial void UpdateOcAttributeDescription(OcAttributeDescription instance);
        partial void DeleteOcAttributeDescription(OcAttributeDescription instance);
        partial void InsertOcAttribute(OcAttribute instance);
        partial void UpdateOcAttribute(OcAttribute instance);
        partial void DeleteOcAttribute(OcAttribute instance);
        partial void InsertOcAffiliateTransaction(OcAffiliateTransaction instance);
        partial void UpdateOcAffiliateTransaction(OcAffiliateTransaction instance);
        partial void DeleteOcAffiliateTransaction(OcAffiliateTransaction instance);
        partial void InsertOcAffiliate(OcAffiliate instance);
        partial void UpdateOcAffiliate(OcAffiliate instance);
        partial void DeleteOcAffiliate(OcAffiliate instance);
        partial void InsertOcAddress(OcAddress instance);
        partial void UpdateOcAddress(OcAddress instance);
        partial void DeleteOcAddress(OcAddress instance);

        #endregion

        public DataContext() :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DataContext(MappingSource mappingSource) :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<OcZoneToGeoZone> OcZoneToGeoZones
        {
            get
            {
                return this.GetTable<OcZoneToGeoZone>();
            }
        }

        public Devart.Data.Linq.Table<OcZone> OcZones
        {
            get
            {
                return this.GetTable<OcZone>();
            }
        }

        public Devart.Data.Linq.Table<OcWeightClassDescription> OcWeightClassDescriptions
        {
            get
            {
                return this.GetTable<OcWeightClassDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcWeightClass> OcWeightClasses
        {
            get
            {
                return this.GetTable<OcWeightClass>();
            }
        }

        public Devart.Data.Linq.Table<OcVoucherThemeDescription> OcVoucherThemeDescriptions
        {
            get
            {
                return this.GetTable<OcVoucherThemeDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcVoucherTheme> OcVoucherThemes
        {
            get
            {
                return this.GetTable<OcVoucherTheme>();
            }
        }

        public Devart.Data.Linq.Table<OcVoucherHistory> OcVoucherHistories
        {
            get
            {
                return this.GetTable<OcVoucherHistory>();
            }
        }

        public Devart.Data.Linq.Table<OcVoucher> OcVouchers
        {
            get
            {
                return this.GetTable<OcVoucher>();
            }
        }

        public Devart.Data.Linq.Table<OcUserGroup> OcUserGroups
        {
            get
            {
                return this.GetTable<OcUserGroup>();
            }
        }

        public Devart.Data.Linq.Table<OcUser> OcUsers
        {
            get
            {
                return this.GetTable<OcUser>();
            }
        }

        public Devart.Data.Linq.Table<OcUrlAlias> OcUrlAliases
        {
            get
            {
                return this.GetTable<OcUrlAlias>();
            }
        }

        public Devart.Data.Linq.Table<OcTaxRule> OcTaxRules
        {
            get
            {
                return this.GetTable<OcTaxRule>();
            }
        }

        public Devart.Data.Linq.Table<OcTaxRateToCustomerGroup> OcTaxRateToCustomerGroups
        {
            get
            {
                return this.GetTable<OcTaxRateToCustomerGroup>();
            }
        }

        public Devart.Data.Linq.Table<OcTaxRate> OcTaxRates
        {
            get
            {
                return this.GetTable<OcTaxRate>();
            }
        }

        public Devart.Data.Linq.Table<OcTaxClass> OcTaxClasses
        {
            get
            {
                return this.GetTable<OcTaxClass>();
            }
        }

        public Devart.Data.Linq.Table<OcStore> OcStores
        {
            get
            {
                return this.GetTable<OcStore>();
            }
        }

        public Devart.Data.Linq.Table<OcStockStatus> OcStockStatus
        {
            get
            {
                return this.GetTable<OcStockStatus>();
            }
        }

        public Devart.Data.Linq.Table<OcSetting> OcSettings
        {
            get
            {
                return this.GetTable<OcSetting>();
            }
        }

        public Devart.Data.Linq.Table<OcReview> OcReviews
        {
            get
            {
                return this.GetTable<OcReview>();
            }
        }

        public Devart.Data.Linq.Table<OcReturnStatus> OcReturnStatus
        {
            get
            {
                return this.GetTable<OcReturnStatus>();
            }
        }

        public Devart.Data.Linq.Table<OcReturnReason> OcReturnReasons
        {
            get
            {
                return this.GetTable<OcReturnReason>();
            }
        }

        public Devart.Data.Linq.Table<OcReturnHistory> OcReturnHistories
        {
            get
            {
                return this.GetTable<OcReturnHistory>();
            }
        }

        public Devart.Data.Linq.Table<OcReturnAction> OcReturnActions
        {
            get
            {
                return this.GetTable<OcReturnAction>();
            }
        }

        public Devart.Data.Linq.Table<OcReturn> OcReturns
        {
            get
            {
                return this.GetTable<OcReturn>();
            }
        }

        public Devart.Data.Linq.Table<OcProfileDescription> OcProfileDescriptions
        {
            get
            {
                return this.GetTable<OcProfileDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcProfile> OcProfiles
        {
            get
            {
                return this.GetTable<OcProfile>();
            }
        }

        public Devart.Data.Linq.Table<OcProductToStore> OcProductToStores
        {
            get
            {
                return this.GetTable<OcProductToStore>();
            }
        }

        public Devart.Data.Linq.Table<OcProductToLayout> OcProductToLayouts
        {
            get
            {
                return this.GetTable<OcProductToLayout>();
            }
        }

        public Devart.Data.Linq.Table<OcProductToDownload> OcProductToDownloads
        {
            get
            {
                return this.GetTable<OcProductToDownload>();
            }
        }

        public Devart.Data.Linq.Table<OcProductToCategory> OcProductToCategories
        {
            get
            {
                return this.GetTable<OcProductToCategory>();
            }
        }

        public Devart.Data.Linq.Table<OcProductSpecial> OcProductSpecials
        {
            get
            {
                return this.GetTable<OcProductSpecial>();
            }
        }

        public Devart.Data.Linq.Table<OcProductReward> OcProductRewards
        {
            get
            {
                return this.GetTable<OcProductReward>();
            }
        }

        public Devart.Data.Linq.Table<OcProductRelated> OcProductRelateds
        {
            get
            {
                return this.GetTable<OcProductRelated>();
            }
        }

        public Devart.Data.Linq.Table<OcProductRecurring> OcProductRecurrings
        {
            get
            {
                return this.GetTable<OcProductRecurring>();
            }
        }

        public Devart.Data.Linq.Table<OcProductProfile> OcProductProfiles
        {
            get
            {
                return this.GetTable<OcProductProfile>();
            }
        }

        public Devart.Data.Linq.Table<OcProductOptionValue> OcProductOptionValues
        {
            get
            {
                return this.GetTable<OcProductOptionValue>();
            }
        }

        public Devart.Data.Linq.Table<OcProductOption> OcProductOptions
        {
            get
            {
                return this.GetTable<OcProductOption>();
            }
        }

        public Devart.Data.Linq.Table<OcProductImage> OcProductImages
        {
            get
            {
                return this.GetTable<OcProductImage>();
            }
        }

        public Devart.Data.Linq.Table<OcProductFilter> OcProductFilters
        {
            get
            {
                return this.GetTable<OcProductFilter>();
            }
        }

        public Devart.Data.Linq.Table<OcProductDiscount> OcProductDiscounts
        {
            get
            {
                return this.GetTable<OcProductDiscount>();
            }
        }

        public Devart.Data.Linq.Table<OcProductDescription> OcProductDescriptions
        {
            get
            {
                return this.GetTable<OcProductDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcProductAttribute> OcProductAttributes
        {
            get
            {
                return this.GetTable<OcProductAttribute>();
            }
        }

        public Devart.Data.Linq.Table<OcProduct> OcProducts
        {
            get
            {
                return this.GetTable<OcProduct>();
            }
        }

        public Devart.Data.Linq.Table<OcOrderVoucher> OcOrderVouchers
        {
            get
            {
                return this.GetTable<OcOrderVoucher>();
            }
        }

        public Devart.Data.Linq.Table<OcOrderTotal> OcOrderTotals
        {
            get
            {
                return this.GetTable<OcOrderTotal>();
            }
        }

        public Devart.Data.Linq.Table<OcOrderStatus> OcOrderStatus
        {
            get
            {
                return this.GetTable<OcOrderStatus>();
            }
        }

        public Devart.Data.Linq.Table<OcOrderRecurringTransaction> OcOrderRecurringTransactions
        {
            get
            {
                return this.GetTable<OcOrderRecurringTransaction>();
            }
        }

        public Devart.Data.Linq.Table<OcOrderRecurring> OcOrderRecurrings
        {
            get
            {
                return this.GetTable<OcOrderRecurring>();
            }
        }

        public Devart.Data.Linq.Table<OcOrderProduct> OcOrderProducts
        {
            get
            {
                return this.GetTable<OcOrderProduct>();
            }
        }

        public Devart.Data.Linq.Table<OcOrderOption> OcOrderOptions
        {
            get
            {
                return this.GetTable<OcOrderOption>();
            }
        }

        public Devart.Data.Linq.Table<OcOrderHistory> OcOrderHistories
        {
            get
            {
                return this.GetTable<OcOrderHistory>();
            }
        }

        public Devart.Data.Linq.Table<OcOrderFraud> OcOrderFrauds
        {
            get
            {
                return this.GetTable<OcOrderFraud>();
            }
        }

        public Devart.Data.Linq.Table<OcOrderField> OcOrderFields
        {
            get
            {
                return this.GetTable<OcOrderField>();
            }
        }

        public Devart.Data.Linq.Table<OcOrderDownload> OcOrderDownloads
        {
            get
            {
                return this.GetTable<OcOrderDownload>();
            }
        }

        public Devart.Data.Linq.Table<OcOrder> OcOrders
        {
            get
            {
                return this.GetTable<OcOrder>();
            }
        }

        public Devart.Data.Linq.Table<OcOptionValueDescription> OcOptionValueDescriptions
        {
            get
            {
                return this.GetTable<OcOptionValueDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcOptionValue> OcOptionValues
        {
            get
            {
                return this.GetTable<OcOptionValue>();
            }
        }

        public Devart.Data.Linq.Table<OcOptionDescription> OcOptionDescriptions
        {
            get
            {
                return this.GetTable<OcOptionDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcOption> OcOptions
        {
            get
            {
                return this.GetTable<OcOption>();
            }
        }

        public Devart.Data.Linq.Table<OcOpenbayFaq> OcOpenbayFaqs
        {
            get
            {
                return this.GetTable<OcOpenbayFaq>();
            }
        }

        public Devart.Data.Linq.Table<OcManufacturerToStore> OcManufacturerToStores
        {
            get
            {
                return this.GetTable<OcManufacturerToStore>();
            }
        }

        public Devart.Data.Linq.Table<OcManufacturer> OcManufacturers
        {
            get
            {
                return this.GetTable<OcManufacturer>();
            }
        }

        public Devart.Data.Linq.Table<OcLengthClassDescription> OcLengthClassDescriptions
        {
            get
            {
                return this.GetTable<OcLengthClassDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcLengthClass> OcLengthClasses
        {
            get
            {
                return this.GetTable<OcLengthClass>();
            }
        }

        public Devart.Data.Linq.Table<OcLayoutRoute> OcLayoutRoutes
        {
            get
            {
                return this.GetTable<OcLayoutRoute>();
            }
        }

        public Devart.Data.Linq.Table<OcLayout> OcLayouts
        {
            get
            {
                return this.GetTable<OcLayout>();
            }
        }

        public Devart.Data.Linq.Table<OcLanguage> OcLanguages
        {
            get
            {
                return this.GetTable<OcLanguage>();
            }
        }

        public Devart.Data.Linq.Table<OcInformationToStore> OcInformationToStores
        {
            get
            {
                return this.GetTable<OcInformationToStore>();
            }
        }

        public Devart.Data.Linq.Table<OcInformationToLayout> OcInformationToLayouts
        {
            get
            {
                return this.GetTable<OcInformationToLayout>();
            }
        }

        public Devart.Data.Linq.Table<OcInformationDescription> OcInformationDescriptions
        {
            get
            {
                return this.GetTable<OcInformationDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcInformation> OcInformations
        {
            get
            {
                return this.GetTable<OcInformation>();
            }
        }

        public Devart.Data.Linq.Table<OcGeoZone> OcGeoZones
        {
            get
            {
                return this.GetTable<OcGeoZone>();
            }
        }

        public Devart.Data.Linq.Table<OcFilterGroupDescription> OcFilterGroupDescriptions
        {
            get
            {
                return this.GetTable<OcFilterGroupDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcFilterGroup> OcFilterGroups
        {
            get
            {
                return this.GetTable<OcFilterGroup>();
            }
        }

        public Devart.Data.Linq.Table<OcFilterDescription> OcFilterDescriptions
        {
            get
            {
                return this.GetTable<OcFilterDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcFilter> OcFilters
        {
            get
            {
                return this.GetTable<OcFilter>();
            }
        }

        public Devart.Data.Linq.Table<OcExtension> OcExtensions
        {
            get
            {
                return this.GetTable<OcExtension>();
            }
        }

        public Devart.Data.Linq.Table<OcDownloadDescription> OcDownloadDescriptions
        {
            get
            {
                return this.GetTable<OcDownloadDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcDownload> OcDownloads
        {
            get
            {
                return this.GetTable<OcDownload>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomerTransaction> OcCustomerTransactions
        {
            get
            {
                return this.GetTable<OcCustomerTransaction>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomerReward> OcCustomerRewards
        {
            get
            {
                return this.GetTable<OcCustomerReward>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomerOnline> OcCustomerOnlines
        {
            get
            {
                return this.GetTable<OcCustomerOnline>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomerIp> OcCustomerIps
        {
            get
            {
                return this.GetTable<OcCustomerIp>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomerHistory> OcCustomerHistories
        {
            get
            {
                return this.GetTable<OcCustomerHistory>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomerGroupDescription> OcCustomerGroupDescriptions
        {
            get
            {
                return this.GetTable<OcCustomerGroupDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomerGroup> OcCustomerGroups
        {
            get
            {
                return this.GetTable<OcCustomerGroup>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomerField> OcCustomerFields
        {
            get
            {
                return this.GetTable<OcCustomerField>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomerBanIp> OcCustomerBanIps
        {
            get
            {
                return this.GetTable<OcCustomerBanIp>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomer> OcCustomers
        {
            get
            {
                return this.GetTable<OcCustomer>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomFieldValueDescription> OcCustomFieldValueDescriptions
        {
            get
            {
                return this.GetTable<OcCustomFieldValueDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomFieldValue> OcCustomFieldValues
        {
            get
            {
                return this.GetTable<OcCustomFieldValue>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomFieldToCustomerGroup> OcCustomFieldToCustomerGroups
        {
            get
            {
                return this.GetTable<OcCustomFieldToCustomerGroup>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomFieldDescription> OcCustomFieldDescriptions
        {
            get
            {
                return this.GetTable<OcCustomFieldDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcCustomField> OcCustomFields
        {
            get
            {
                return this.GetTable<OcCustomField>();
            }
        }

        public Devart.Data.Linq.Table<OcCurrency> OcCurrencies
        {
            get
            {
                return this.GetTable<OcCurrency>();
            }
        }

        public Devart.Data.Linq.Table<OcCouponProduct> OcCouponProducts
        {
            get
            {
                return this.GetTable<OcCouponProduct>();
            }
        }

        public Devart.Data.Linq.Table<OcCouponHistory> OcCouponHistories
        {
            get
            {
                return this.GetTable<OcCouponHistory>();
            }
        }

        public Devart.Data.Linq.Table<OcCouponCategory> OcCouponCategories
        {
            get
            {
                return this.GetTable<OcCouponCategory>();
            }
        }

        public Devart.Data.Linq.Table<OcCoupon> OcCoupons
        {
            get
            {
                return this.GetTable<OcCoupon>();
            }
        }

        public Devart.Data.Linq.Table<OcCountry> OcCountries
        {
            get
            {
                return this.GetTable<OcCountry>();
            }
        }

        public Devart.Data.Linq.Table<OcCategoryToStore> OcCategoryToStores
        {
            get
            {
                return this.GetTable<OcCategoryToStore>();
            }
        }

        public Devart.Data.Linq.Table<OcCategoryToLayout> OcCategoryToLayouts
        {
            get
            {
                return this.GetTable<OcCategoryToLayout>();
            }
        }

        public Devart.Data.Linq.Table<OcCategoryPath> OcCategoryPaths
        {
            get
            {
                return this.GetTable<OcCategoryPath>();
            }
        }

        public Devart.Data.Linq.Table<OcCategoryFilter> OcCategoryFilters
        {
            get
            {
                return this.GetTable<OcCategoryFilter>();
            }
        }

        public Devart.Data.Linq.Table<OcCategoryDescription> OcCategoryDescriptions
        {
            get
            {
                return this.GetTable<OcCategoryDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcCategory> OcCategories
        {
            get
            {
                return this.GetTable<OcCategory>();
            }
        }

        public Devart.Data.Linq.Table<OcBannerImageDescription> OcBannerImageDescriptions
        {
            get
            {
                return this.GetTable<OcBannerImageDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcBannerImage> OcBannerImages
        {
            get
            {
                return this.GetTable<OcBannerImage>();
            }
        }

        public Devart.Data.Linq.Table<OcBanner> OcBanners
        {
            get
            {
                return this.GetTable<OcBanner>();
            }
        }

        public Devart.Data.Linq.Table<OcAttributeGroupDescription> OcAttributeGroupDescriptions
        {
            get
            {
                return this.GetTable<OcAttributeGroupDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcAttributeGroup> OcAttributeGroups
        {
            get
            {
                return this.GetTable<OcAttributeGroup>();
            }
        }

        public Devart.Data.Linq.Table<OcAttributeDescription> OcAttributeDescriptions
        {
            get
            {
                return this.GetTable<OcAttributeDescription>();
            }
        }

        public Devart.Data.Linq.Table<OcAttribute> OcAttributes
        {
            get
            {
                return this.GetTable<OcAttribute>();
            }
        }

        public Devart.Data.Linq.Table<OcAffiliateTransaction> OcAffiliateTransactions
        {
            get
            {
                return this.GetTable<OcAffiliateTransaction>();
            }
        }

        public Devart.Data.Linq.Table<OcAffiliate> OcAffiliates
        {
            get
            {
                return this.GetTable<OcAffiliate>();
            }
        }

        public Devart.Data.Linq.Table<OcAddress> OcAddresses
        {
            get
            {
                return this.GetTable<OcAddress>();
            }
        }
    }
}

namespace Context
{

    /// <summary>
    /// There are no comments for Context.OcZoneToGeoZone in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_zone_to_geo_zone")]
    public partial class OcZoneToGeoZone : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ZoneToGeoZoneId;

        private int _CountryId;

        private int _ZoneId = 0;

        private int _GeoZoneId;

        private System.DateTime _DateAdded;

        private System.DateTime _DateModified;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnZoneToGeoZoneIdChanging(int value);
        partial void OnZoneToGeoZoneIdChanged();
        partial void OnCountryIdChanging(int value);
        partial void OnCountryIdChanged();
        partial void OnZoneIdChanging(int value);
        partial void OnZoneIdChanged();
        partial void OnGeoZoneIdChanging(int value);
        partial void OnGeoZoneIdChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        partial void OnDateModifiedChanging(System.DateTime value);
        partial void OnDateModifiedChanged();
        #endregion

        public OcZoneToGeoZone()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ZoneToGeoZoneId in the schema.
        /// </summary>
        [Column(Name = @"zone_to_geo_zone_id", Storage = "_ZoneToGeoZoneId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ZoneToGeoZoneId
        {
            get
            {
                return this._ZoneToGeoZoneId;
            }
            set
            {
                if (this._ZoneToGeoZoneId != value)
                {
                    this.OnZoneToGeoZoneIdChanging(value);
                    this.SendPropertyChanging();
                    this._ZoneToGeoZoneId = value;
                    this.SendPropertyChanged("ZoneToGeoZoneId");
                    this.OnZoneToGeoZoneIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"country_id", Storage = "_CountryId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ZoneId in the schema.
        /// </summary>
        [Column(Name = @"zone_id", Storage = "_ZoneId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ZoneId
        {
            get
            {
                return this._ZoneId;
            }
            set
            {
                if (this._ZoneId != value)
                {
                    this.OnZoneIdChanging(value);
                    this.SendPropertyChanging();
                    this._ZoneId = value;
                    this.SendPropertyChanged("ZoneId");
                    this.OnZoneIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GeoZoneId in the schema.
        /// </summary>
        [Column(Name = @"geo_zone_id", Storage = "_GeoZoneId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int GeoZoneId
        {
            get
            {
                return this._GeoZoneId;
            }
            set
            {
                if (this._GeoZoneId != value)
                {
                    this.OnGeoZoneIdChanging(value);
                    this.SendPropertyChanging();
                    this._GeoZoneId = value;
                    this.SendPropertyChanged("GeoZoneId");
                    this.OnGeoZoneIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateModified in the schema.
        /// </summary>
        [Column(Name = @"date_modified", Storage = "_DateModified", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateModified
        {
            get
            {
                return this._DateModified;
            }
            set
            {
                if (this._DateModified != value)
                {
                    this.OnDateModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._DateModified = value;
                    this.SendPropertyChanged("DateModified");
                    this.OnDateModifiedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcZone in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_zone")]
    public partial class OcZone : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ZoneId;

        private int _CountryId;

        private string _Name;

        private string _Code;

        private bool _Status = true;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnZoneIdChanging(int value);
        partial void OnZoneIdChanged();
        partial void OnCountryIdChanging(int value);
        partial void OnCountryIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        #endregion

        public OcZone()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ZoneId in the schema.
        /// </summary>
        [Column(Name = @"zone_id", Storage = "_ZoneId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ZoneId
        {
            get
            {
                return this._ZoneId;
            }
            set
            {
                if (this._ZoneId != value)
                {
                    this.OnZoneIdChanging(value);
                    this.SendPropertyChanging();
                    this._ZoneId = value;
                    this.SendPropertyChanged("ZoneId");
                    this.OnZoneIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"country_id", Storage = "_CountryId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcWeightClassDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_weight_class_description")]
    public partial class OcWeightClassDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _WeightClassId;

        private int _LanguageId;

        private string _Title;

        private string _Unit;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnWeightClassIdChanging(int value);
        partial void OnWeightClassIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnUnitChanging(string value);
        partial void OnUnitChanged();
        #endregion

        public OcWeightClassDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for WeightClassId in the schema.
        /// </summary>
        [Column(Name = @"weight_class_id", Storage = "_WeightClassId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int WeightClassId
        {
            get
            {
                return this._WeightClassId;
            }
            set
            {
                if (this._WeightClassId != value)
                {
                    this.OnWeightClassIdChanging(value);
                    this.SendPropertyChanging();
                    this._WeightClassId = value;
                    this.SendPropertyChanged("WeightClassId");
                    this.OnWeightClassIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Unit in the schema.
        /// </summary>
        [Column(Name = @"unit", Storage = "_Unit", CanBeNull = false, DbType = "VARCHAR(4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Unit
        {
            get
            {
                return this._Unit;
            }
            set
            {
                if (this._Unit != value)
                {
                    this.OnUnitChanging(value);
                    this.SendPropertyChanging();
                    this._Unit = value;
                    this.SendPropertyChanged("Unit");
                    this.OnUnitChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcWeightClass in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_weight_class")]
    public partial class OcWeightClass : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _WeightClassId;

        private decimal _Value = 0.00000000m;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnWeightClassIdChanging(int value);
        partial void OnWeightClassIdChanged();
        partial void OnValueChanging(decimal value);
        partial void OnValueChanged();
        #endregion

        public OcWeightClass()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for WeightClassId in the schema.
        /// </summary>
        [Column(Name = @"weight_class_id", Storage = "_WeightClassId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int WeightClassId
        {
            get
            {
                return this._WeightClassId;
            }
            set
            {
                if (this._WeightClassId != value)
                {
                    this.OnWeightClassIdChanging(value);
                    this.SendPropertyChanging();
                    this._WeightClassId = value;
                    this.SendPropertyChanged("WeightClassId");
                    this.OnWeightClassIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Name = @"value", Storage = "_Value", CanBeNull = false, DbType = "DECIMAL(15,8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcVoucherThemeDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_voucher_theme_description")]
    public partial class OcVoucherThemeDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _VoucherThemeId;

        private int _LanguageId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnVoucherThemeIdChanging(int value);
        partial void OnVoucherThemeIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcVoucherThemeDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for VoucherThemeId in the schema.
        /// </summary>
        [Column(Name = @"voucher_theme_id", Storage = "_VoucherThemeId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int VoucherThemeId
        {
            get
            {
                return this._VoucherThemeId;
            }
            set
            {
                if (this._VoucherThemeId != value)
                {
                    this.OnVoucherThemeIdChanging(value);
                    this.SendPropertyChanging();
                    this._VoucherThemeId = value;
                    this.SendPropertyChanged("VoucherThemeId");
                    this.OnVoucherThemeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcVoucherTheme in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_voucher_theme")]
    public partial class OcVoucherTheme : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _VoucherThemeId;

        private string _Image;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnVoucherThemeIdChanging(int value);
        partial void OnVoucherThemeIdChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        #endregion

        public OcVoucherTheme()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for VoucherThemeId in the schema.
        /// </summary>
        [Column(Name = @"voucher_theme_id", Storage = "_VoucherThemeId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int VoucherThemeId
        {
            get
            {
                return this._VoucherThemeId;
            }
            set
            {
                if (this._VoucherThemeId != value)
                {
                    this.OnVoucherThemeIdChanging(value);
                    this.SendPropertyChanging();
                    this._VoucherThemeId = value;
                    this.SendPropertyChanged("VoucherThemeId");
                    this.OnVoucherThemeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [Column(Name = @"image", Storage = "_Image", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging();
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcVoucherHistory in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_voucher_history")]
    public partial class OcVoucherHistory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _VoucherHistoryId;

        private int _VoucherId;

        private int _OrderId;

        private decimal _Amount;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnVoucherHistoryIdChanging(int value);
        partial void OnVoucherHistoryIdChanged();
        partial void OnVoucherIdChanging(int value);
        partial void OnVoucherIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcVoucherHistory()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for VoucherHistoryId in the schema.
        /// </summary>
        [Column(Name = @"voucher_history_id", Storage = "_VoucherHistoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int VoucherHistoryId
        {
            get
            {
                return this._VoucherHistoryId;
            }
            set
            {
                if (this._VoucherHistoryId != value)
                {
                    this.OnVoucherHistoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._VoucherHistoryId = value;
                    this.SendPropertyChanged("VoucherHistoryId");
                    this.OnVoucherHistoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VoucherId in the schema.
        /// </summary>
        [Column(Name = @"voucher_id", Storage = "_VoucherId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int VoucherId
        {
            get
            {
                return this._VoucherId;
            }
            set
            {
                if (this._VoucherId != value)
                {
                    this.OnVoucherIdChanging(value);
                    this.SendPropertyChanging();
                    this._VoucherId = value;
                    this.SendPropertyChanged("VoucherId");
                    this.OnVoucherIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"amount", Storage = "_Amount", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcVoucher in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_voucher")]
    public partial class OcVoucher : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _VoucherId;

        private int _OrderId;

        private string _Code;

        private string _FromName;

        private string _FromEmail;

        private string _ToName;

        private string _ToEmail;

        private int _VoucherThemeId;

        private string _Message;

        private decimal _Amount;

        private bool _Status;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnVoucherIdChanging(int value);
        partial void OnVoucherIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnFromNameChanging(string value);
        partial void OnFromNameChanged();
        partial void OnFromEmailChanging(string value);
        partial void OnFromEmailChanged();
        partial void OnToNameChanging(string value);
        partial void OnToNameChanged();
        partial void OnToEmailChanging(string value);
        partial void OnToEmailChanged();
        partial void OnVoucherThemeIdChanging(int value);
        partial void OnVoucherThemeIdChanged();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcVoucher()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for VoucherId in the schema.
        /// </summary>
        [Column(Name = @"voucher_id", Storage = "_VoucherId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int VoucherId
        {
            get
            {
                return this._VoucherId;
            }
            set
            {
                if (this._VoucherId != value)
                {
                    this.OnVoucherIdChanging(value);
                    this.SendPropertyChanging();
                    this._VoucherId = value;
                    this.SendPropertyChanged("VoucherId");
                    this.OnVoucherIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FromName in the schema.
        /// </summary>
        [Column(Name = @"from_name", Storage = "_FromName", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FromName
        {
            get
            {
                return this._FromName;
            }
            set
            {
                if (this._FromName != value)
                {
                    this.OnFromNameChanging(value);
                    this.SendPropertyChanging();
                    this._FromName = value;
                    this.SendPropertyChanged("FromName");
                    this.OnFromNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FromEmail in the schema.
        /// </summary>
        [Column(Name = @"from_email", Storage = "_FromEmail", CanBeNull = false, DbType = "VARCHAR(96) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FromEmail
        {
            get
            {
                return this._FromEmail;
            }
            set
            {
                if (this._FromEmail != value)
                {
                    this.OnFromEmailChanging(value);
                    this.SendPropertyChanging();
                    this._FromEmail = value;
                    this.SendPropertyChanged("FromEmail");
                    this.OnFromEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ToName in the schema.
        /// </summary>
        [Column(Name = @"to_name", Storage = "_ToName", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ToName
        {
            get
            {
                return this._ToName;
            }
            set
            {
                if (this._ToName != value)
                {
                    this.OnToNameChanging(value);
                    this.SendPropertyChanging();
                    this._ToName = value;
                    this.SendPropertyChanged("ToName");
                    this.OnToNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ToEmail in the schema.
        /// </summary>
        [Column(Name = @"to_email", Storage = "_ToEmail", CanBeNull = false, DbType = "VARCHAR(96) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ToEmail
        {
            get
            {
                return this._ToEmail;
            }
            set
            {
                if (this._ToEmail != value)
                {
                    this.OnToEmailChanging(value);
                    this.SendPropertyChanging();
                    this._ToEmail = value;
                    this.SendPropertyChanged("ToEmail");
                    this.OnToEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VoucherThemeId in the schema.
        /// </summary>
        [Column(Name = @"voucher_theme_id", Storage = "_VoucherThemeId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int VoucherThemeId
        {
            get
            {
                return this._VoucherThemeId;
            }
            set
            {
                if (this._VoucherThemeId != value)
                {
                    this.OnVoucherThemeIdChanging(value);
                    this.SendPropertyChanging();
                    this._VoucherThemeId = value;
                    this.SendPropertyChanged("VoucherThemeId");
                    this.OnVoucherThemeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Message in the schema.
        /// </summary>
        [Column(Name = @"message", Storage = "_Message", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Message
        {
            get
            {
                return this._Message;
            }
            set
            {
                if (this._Message != value)
                {
                    this.OnMessageChanging(value);
                    this.SendPropertyChanging();
                    this._Message = value;
                    this.SendPropertyChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"amount", Storage = "_Amount", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcUserGroup in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_user_group")]
    public partial class OcUserGroup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserGroupId;

        private string _Name;

        private string _Permission;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserGroupIdChanging(int value);
        partial void OnUserGroupIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPermissionChanging(string value);
        partial void OnPermissionChanged();
        #endregion

        public OcUserGroup()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserGroupId in the schema.
        /// </summary>
        [Column(Name = @"user_group_id", Storage = "_UserGroupId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserGroupId
        {
            get
            {
                return this._UserGroupId;
            }
            set
            {
                if (this._UserGroupId != value)
                {
                    this.OnUserGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserGroupId = value;
                    this.SendPropertyChanged("UserGroupId");
                    this.OnUserGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Permission in the schema.
        /// </summary>
        [Column(Name = @"permission", Storage = "_Permission", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Permission
        {
            get
            {
                return this._Permission;
            }
            set
            {
                if (this._Permission != value)
                {
                    this.OnPermissionChanging(value);
                    this.SendPropertyChanging();
                    this._Permission = value;
                    this.SendPropertyChanged("Permission");
                    this.OnPermissionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcUser in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_user")]
    public partial class OcUser : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserId;

        private int _UserGroupId;

        private string _Username;

        private string _Password;

        private string _Salt;

        private string _Firstname;

        private string _Lastname;

        private string _Email;

        private string _Code;

        private string _Ip;

        private bool _Status;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnUserGroupIdChanging(int value);
        partial void OnUserGroupIdChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnSaltChanging(string value);
        partial void OnSaltChanged();
        partial void OnFirstnameChanging(string value);
        partial void OnFirstnameChanged();
        partial void OnLastnameChanging(string value);
        partial void OnLastnameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnIpChanging(string value);
        partial void OnIpChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcUser()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserGroupId in the schema.
        /// </summary>
        [Column(Name = @"user_group_id", Storage = "_UserGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserGroupId
        {
            get
            {
                return this._UserGroupId;
            }
            set
            {
                if (this._UserGroupId != value)
                {
                    this.OnUserGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserGroupId = value;
                    this.SendPropertyChanged("UserGroupId");
                    this.OnUserGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Username in the schema.
        /// </summary>
        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"`password`", Storage = "_Password", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Salt in the schema.
        /// </summary>
        [Column(Name = @"salt", Storage = "_Salt", CanBeNull = false, DbType = "VARCHAR(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Salt
        {
            get
            {
                return this._Salt;
            }
            set
            {
                if (this._Salt != value)
                {
                    this.OnSaltChanging(value);
                    this.SendPropertyChanging();
                    this._Salt = value;
                    this.SendPropertyChanged("Salt");
                    this.OnSaltChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Firstname in the schema.
        /// </summary>
        [Column(Name = @"firstname", Storage = "_Firstname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Firstname
        {
            get
            {
                return this._Firstname;
            }
            set
            {
                if (this._Firstname != value)
                {
                    this.OnFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Firstname = value;
                    this.SendPropertyChanged("Firstname");
                    this.OnFirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Lastname in the schema.
        /// </summary>
        [Column(Name = @"lastname", Storage = "_Lastname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Lastname
        {
            get
            {
                return this._Lastname;
            }
            set
            {
                if (this._Lastname != value)
                {
                    this.OnLastnameChanging(value);
                    this.SendPropertyChanging();
                    this._Lastname = value;
                    this.SendPropertyChanged("Lastname");
                    this.OnLastnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(96) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ip in the schema.
        /// </summary>
        [Column(Name = @"ip", Storage = "_Ip", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ip
        {
            get
            {
                return this._Ip;
            }
            set
            {
                if (this._Ip != value)
                {
                    this.OnIpChanging(value);
                    this.SendPropertyChanging();
                    this._Ip = value;
                    this.SendPropertyChanged("Ip");
                    this.OnIpChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcUrlAlias in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_url_alias")]
    public partial class OcUrlAlias : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UrlAliasId;

        private string _Query;

        private string _Keyword;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUrlAliasIdChanging(int value);
        partial void OnUrlAliasIdChanged();
        partial void OnQueryChanging(string value);
        partial void OnQueryChanged();
        partial void OnKeywordChanging(string value);
        partial void OnKeywordChanged();
        #endregion

        public OcUrlAlias()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UrlAliasId in the schema.
        /// </summary>
        [Column(Name = @"url_alias_id", Storage = "_UrlAliasId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UrlAliasId
        {
            get
            {
                return this._UrlAliasId;
            }
            set
            {
                if (this._UrlAliasId != value)
                {
                    this.OnUrlAliasIdChanging(value);
                    this.SendPropertyChanging();
                    this._UrlAliasId = value;
                    this.SendPropertyChanged("UrlAliasId");
                    this.OnUrlAliasIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Query in the schema.
        /// </summary>
        [Column(Name = @"query", Storage = "_Query", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Query
        {
            get
            {
                return this._Query;
            }
            set
            {
                if (this._Query != value)
                {
                    this.OnQueryChanging(value);
                    this.SendPropertyChanging();
                    this._Query = value;
                    this.SendPropertyChanged("Query");
                    this.OnQueryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Keyword in the schema.
        /// </summary>
        [Column(Name = @"keyword", Storage = "_Keyword", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Keyword
        {
            get
            {
                return this._Keyword;
            }
            set
            {
                if (this._Keyword != value)
                {
                    this.OnKeywordChanging(value);
                    this.SendPropertyChanging();
                    this._Keyword = value;
                    this.SendPropertyChanged("Keyword");
                    this.OnKeywordChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcTaxRule in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_tax_rule")]
    public partial class OcTaxRule : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _TaxRuleId;

        private int _TaxClassId;

        private int _TaxRateId;

        private string _Based;

        private int _Priority = 1;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTaxRuleIdChanging(int value);
        partial void OnTaxRuleIdChanged();
        partial void OnTaxClassIdChanging(int value);
        partial void OnTaxClassIdChanged();
        partial void OnTaxRateIdChanging(int value);
        partial void OnTaxRateIdChanged();
        partial void OnBasedChanging(string value);
        partial void OnBasedChanged();
        partial void OnPriorityChanging(int value);
        partial void OnPriorityChanged();
        #endregion

        public OcTaxRule()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TaxRuleId in the schema.
        /// </summary>
        [Column(Name = @"tax_rule_id", Storage = "_TaxRuleId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int TaxRuleId
        {
            get
            {
                return this._TaxRuleId;
            }
            set
            {
                if (this._TaxRuleId != value)
                {
                    this.OnTaxRuleIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxRuleId = value;
                    this.SendPropertyChanged("TaxRuleId");
                    this.OnTaxRuleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClassId in the schema.
        /// </summary>
        [Column(Name = @"tax_class_id", Storage = "_TaxClassId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int TaxClassId
        {
            get
            {
                return this._TaxClassId;
            }
            set
            {
                if (this._TaxClassId != value)
                {
                    this.OnTaxClassIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxClassId = value;
                    this.SendPropertyChanged("TaxClassId");
                    this.OnTaxClassIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxRateId in the schema.
        /// </summary>
        [Column(Name = @"tax_rate_id", Storage = "_TaxRateId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int TaxRateId
        {
            get
            {
                return this._TaxRateId;
            }
            set
            {
                if (this._TaxRateId != value)
                {
                    this.OnTaxRateIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxRateId = value;
                    this.SendPropertyChanged("TaxRateId");
                    this.OnTaxRateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Based in the schema.
        /// </summary>
        [Column(Name = @"based", Storage = "_Based", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Based
        {
            get
            {
                return this._Based;
            }
            set
            {
                if (this._Based != value)
                {
                    this.OnBasedChanging(value);
                    this.SendPropertyChanging();
                    this._Based = value;
                    this.SendPropertyChanged("Based");
                    this.OnBasedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Priority in the schema.
        /// </summary>
        [Column(Name = @"priority", Storage = "_Priority", CanBeNull = false, DbType = "INT(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Priority
        {
            get
            {
                return this._Priority;
            }
            set
            {
                if (this._Priority != value)
                {
                    this.OnPriorityChanging(value);
                    this.SendPropertyChanging();
                    this._Priority = value;
                    this.SendPropertyChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcTaxRateToCustomerGroup in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_tax_rate_to_customer_group")]
    public partial class OcTaxRateToCustomerGroup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _TaxRateId;

        private int _CustomerGroupId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTaxRateIdChanging(int value);
        partial void OnTaxRateIdChanged();
        partial void OnCustomerGroupIdChanging(int value);
        partial void OnCustomerGroupIdChanged();
        #endregion

        public OcTaxRateToCustomerGroup()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TaxRateId in the schema.
        /// </summary>
        [Column(Name = @"tax_rate_id", Storage = "_TaxRateId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int TaxRateId
        {
            get
            {
                return this._TaxRateId;
            }
            set
            {
                if (this._TaxRateId != value)
                {
                    this.OnTaxRateIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxRateId = value;
                    this.SendPropertyChanged("TaxRateId");
                    this.OnTaxRateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerGroupId in the schema.
        /// </summary>
        [Column(Name = @"customer_group_id", Storage = "_CustomerGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CustomerGroupId
        {
            get
            {
                return this._CustomerGroupId;
            }
            set
            {
                if (this._CustomerGroupId != value)
                {
                    this.OnCustomerGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerGroupId = value;
                    this.SendPropertyChanged("CustomerGroupId");
                    this.OnCustomerGroupIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcTaxRate in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_tax_rate")]
    public partial class OcTaxRate : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _TaxRateId;

        private int _GeoZoneId = 0;

        private string _Name;

        private decimal _Rate = 0.0000m;

        private string _Type;

        private System.DateTime _DateAdded;

        private System.DateTime _DateModified;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTaxRateIdChanging(int value);
        partial void OnTaxRateIdChanged();
        partial void OnGeoZoneIdChanging(int value);
        partial void OnGeoZoneIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRateChanging(decimal value);
        partial void OnRateChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        partial void OnDateModifiedChanging(System.DateTime value);
        partial void OnDateModifiedChanged();
        #endregion

        public OcTaxRate()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TaxRateId in the schema.
        /// </summary>
        [Column(Name = @"tax_rate_id", Storage = "_TaxRateId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int TaxRateId
        {
            get
            {
                return this._TaxRateId;
            }
            set
            {
                if (this._TaxRateId != value)
                {
                    this.OnTaxRateIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxRateId = value;
                    this.SendPropertyChanged("TaxRateId");
                    this.OnTaxRateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GeoZoneId in the schema.
        /// </summary>
        [Column(Name = @"geo_zone_id", Storage = "_GeoZoneId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int GeoZoneId
        {
            get
            {
                return this._GeoZoneId;
            }
            set
            {
                if (this._GeoZoneId != value)
                {
                    this.OnGeoZoneIdChanging(value);
                    this.SendPropertyChanging();
                    this._GeoZoneId = value;
                    this.SendPropertyChanged("GeoZoneId");
                    this.OnGeoZoneIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Rate in the schema.
        /// </summary>
        [Column(Name = @"rate", Storage = "_Rate", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Rate
        {
            get
            {
                return this._Rate;
            }
            set
            {
                if (this._Rate != value)
                {
                    this.OnRateChanging(value);
                    this.SendPropertyChanging();
                    this._Rate = value;
                    this.SendPropertyChanged("Rate");
                    this.OnRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "CHAR(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateModified in the schema.
        /// </summary>
        [Column(Name = @"date_modified", Storage = "_DateModified", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateModified
        {
            get
            {
                return this._DateModified;
            }
            set
            {
                if (this._DateModified != value)
                {
                    this.OnDateModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._DateModified = value;
                    this.SendPropertyChanged("DateModified");
                    this.OnDateModifiedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcTaxClass in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_tax_class")]
    public partial class OcTaxClass : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _TaxClassId;

        private string _Title;

        private string _Description;

        private System.DateTime _DateAdded;

        private System.DateTime _DateModified;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTaxClassIdChanging(int value);
        partial void OnTaxClassIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        partial void OnDateModifiedChanging(System.DateTime value);
        partial void OnDateModifiedChanged();
        #endregion

        public OcTaxClass()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TaxClassId in the schema.
        /// </summary>
        [Column(Name = @"tax_class_id", Storage = "_TaxClassId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int TaxClassId
        {
            get
            {
                return this._TaxClassId;
            }
            set
            {
                if (this._TaxClassId != value)
                {
                    this.OnTaxClassIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxClassId = value;
                    this.SendPropertyChanged("TaxClassId");
                    this.OnTaxClassIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateModified in the schema.
        /// </summary>
        [Column(Name = @"date_modified", Storage = "_DateModified", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateModified
        {
            get
            {
                return this._DateModified;
            }
            set
            {
                if (this._DateModified != value)
                {
                    this.OnDateModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._DateModified = value;
                    this.SendPropertyChanged("DateModified");
                    this.OnDateModifiedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcStore in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_store")]
    public partial class OcStore : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _StoreId;

        private string _Name;

        private string _Url;

        private string _Ssl;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnStoreIdChanging(int value);
        partial void OnStoreIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnSslChanging(string value);
        partial void OnSslChanged();
        #endregion

        public OcStore()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Url in the schema.
        /// </summary>
        [Column(Name = @"url", Storage = "_Url", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging();
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ssl in the schema.
        /// </summary>
        [Column(Name = @"`ssl`", Storage = "_Ssl", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ssl
        {
            get
            {
                return this._Ssl;
            }
            set
            {
                if (this._Ssl != value)
                {
                    this.OnSslChanging(value);
                    this.SendPropertyChanging();
                    this._Ssl = value;
                    this.SendPropertyChanged("Ssl");
                    this.OnSslChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcStockStatus in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_stock_status")]
    public partial class OcStockStatus : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _StockStatusId;

        private int _LanguageId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnStockStatusIdChanging(int value);
        partial void OnStockStatusIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcStockStatus()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockStatusId in the schema.
        /// </summary>
        [Column(Name = @"stock_status_id", Storage = "_StockStatusId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int StockStatusId
        {
            get
            {
                return this._StockStatusId;
            }
            set
            {
                if (this._StockStatusId != value)
                {
                    this.OnStockStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockStatusId = value;
                    this.SendPropertyChanged("StockStatusId");
                    this.OnStockStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcSetting in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_setting")]
    public partial class OcSetting : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _SettingId;

        private int _StoreId = 0;

        private string _Group;

        private string _Key;

        private string _Value;

        private bool _Serialized;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnSettingIdChanging(int value);
        partial void OnSettingIdChanged();
        partial void OnStoreIdChanging(int value);
        partial void OnStoreIdChanged();
        partial void OnGroupChanging(string value);
        partial void OnGroupChanged();
        partial void OnKeyChanging(string value);
        partial void OnKeyChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        partial void OnSerializedChanging(bool value);
        partial void OnSerializedChanged();
        #endregion

        public OcSetting()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SettingId in the schema.
        /// </summary>
        [Column(Name = @"setting_id", Storage = "_SettingId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int SettingId
        {
            get
            {
                return this._SettingId;
            }
            set
            {
                if (this._SettingId != value)
                {
                    this.OnSettingIdChanging(value);
                    this.SendPropertyChanging();
                    this._SettingId = value;
                    this.SendPropertyChanged("SettingId");
                    this.OnSettingIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Group in the schema.
        /// </summary>
        [Column(Name = @"`group`", Storage = "_Group", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Group
        {
            get
            {
                return this._Group;
            }
            set
            {
                if (this._Group != value)
                {
                    this.OnGroupChanging(value);
                    this.SendPropertyChanging();
                    this._Group = value;
                    this.SendPropertyChanged("Group");
                    this.OnGroupChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Key in the schema.
        /// </summary>
        [Column(Name = @"`key`", Storage = "_Key", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Key
        {
            get
            {
                return this._Key;
            }
            set
            {
                if (this._Key != value)
                {
                    this.OnKeyChanging(value);
                    this.SendPropertyChanging();
                    this._Key = value;
                    this.SendPropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Name = @"value", Storage = "_Value", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Serialized in the schema.
        /// </summary>
        [Column(Name = @"serialized", Storage = "_Serialized", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Serialized
        {
            get
            {
                return this._Serialized;
            }
            set
            {
                if (this._Serialized != value)
                {
                    this.OnSerializedChanging(value);
                    this.SendPropertyChanging();
                    this._Serialized = value;
                    this.SendPropertyChanged("Serialized");
                    this.OnSerializedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcReview in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_review")]
    public partial class OcReview : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ReviewId;

        private int _ProductId;

        private int _CustomerId;

        private string _Author;

        private string _Text;

        private int _Rating;

        private bool _Status = false;

        private System.DateTime _DateAdded;

        private System.DateTime _DateModified;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnReviewIdChanging(int value);
        partial void OnReviewIdChanged();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnAuthorChanging(string value);
        partial void OnAuthorChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        partial void OnRatingChanging(int value);
        partial void OnRatingChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        partial void OnDateModifiedChanging(System.DateTime value);
        partial void OnDateModifiedChanged();
        #endregion

        public OcReview()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReviewId in the schema.
        /// </summary>
        [Column(Name = @"review_id", Storage = "_ReviewId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ReviewId
        {
            get
            {
                return this._ReviewId;
            }
            set
            {
                if (this._ReviewId != value)
                {
                    this.OnReviewIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewId = value;
                    this.SendPropertyChanged("ReviewId");
                    this.OnReviewIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Author in the schema.
        /// </summary>
        [Column(Name = @"author", Storage = "_Author", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Author
        {
            get
            {
                return this._Author;
            }
            set
            {
                if (this._Author != value)
                {
                    this.OnAuthorChanging(value);
                    this.SendPropertyChanging();
                    this._Author = value;
                    this.SendPropertyChanged("Author");
                    this.OnAuthorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Text in the schema.
        /// </summary>
        [Column(Name = @"`text`", Storage = "_Text", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if (this._Text != value)
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging();
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Rating in the schema.
        /// </summary>
        [Column(Name = @"rating", Storage = "_Rating", CanBeNull = false, DbType = "INT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Rating
        {
            get
            {
                return this._Rating;
            }
            set
            {
                if (this._Rating != value)
                {
                    this.OnRatingChanging(value);
                    this.SendPropertyChanging();
                    this._Rating = value;
                    this.SendPropertyChanged("Rating");
                    this.OnRatingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateModified in the schema.
        /// </summary>
        [Column(Name = @"date_modified", Storage = "_DateModified", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateModified
        {
            get
            {
                return this._DateModified;
            }
            set
            {
                if (this._DateModified != value)
                {
                    this.OnDateModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._DateModified = value;
                    this.SendPropertyChanged("DateModified");
                    this.OnDateModifiedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcReturnStatus in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_return_status")]
    public partial class OcReturnStatus : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ReturnStatusId;

        private int _LanguageId = 0;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnReturnStatusIdChanging(int value);
        partial void OnReturnStatusIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcReturnStatus()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReturnStatusId in the schema.
        /// </summary>
        [Column(Name = @"return_status_id", Storage = "_ReturnStatusId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ReturnStatusId
        {
            get
            {
                return this._ReturnStatusId;
            }
            set
            {
                if (this._ReturnStatusId != value)
                {
                    this.OnReturnStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnStatusId = value;
                    this.SendPropertyChanged("ReturnStatusId");
                    this.OnReturnStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcReturnReason in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_return_reason")]
    public partial class OcReturnReason : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ReturnReasonId;

        private int _LanguageId = 0;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnReturnReasonIdChanging(int value);
        partial void OnReturnReasonIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcReturnReason()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReturnReasonId in the schema.
        /// </summary>
        [Column(Name = @"return_reason_id", Storage = "_ReturnReasonId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ReturnReasonId
        {
            get
            {
                return this._ReturnReasonId;
            }
            set
            {
                if (this._ReturnReasonId != value)
                {
                    this.OnReturnReasonIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnReasonId = value;
                    this.SendPropertyChanged("ReturnReasonId");
                    this.OnReturnReasonIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcReturnHistory in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_return_history")]
    public partial class OcReturnHistory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ReturnHistoryId;

        private int _ReturnId;

        private int _ReturnStatusId;

        private bool _Notify;

        private string _Comment;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnReturnHistoryIdChanging(int value);
        partial void OnReturnHistoryIdChanged();
        partial void OnReturnIdChanging(int value);
        partial void OnReturnIdChanged();
        partial void OnReturnStatusIdChanging(int value);
        partial void OnReturnStatusIdChanged();
        partial void OnNotifyChanging(bool value);
        partial void OnNotifyChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcReturnHistory()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReturnHistoryId in the schema.
        /// </summary>
        [Column(Name = @"return_history_id", Storage = "_ReturnHistoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ReturnHistoryId
        {
            get
            {
                return this._ReturnHistoryId;
            }
            set
            {
                if (this._ReturnHistoryId != value)
                {
                    this.OnReturnHistoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnHistoryId = value;
                    this.SendPropertyChanged("ReturnHistoryId");
                    this.OnReturnHistoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReturnId in the schema.
        /// </summary>
        [Column(Name = @"return_id", Storage = "_ReturnId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ReturnId
        {
            get
            {
                return this._ReturnId;
            }
            set
            {
                if (this._ReturnId != value)
                {
                    this.OnReturnIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnId = value;
                    this.SendPropertyChanged("ReturnId");
                    this.OnReturnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReturnStatusId in the schema.
        /// </summary>
        [Column(Name = @"return_status_id", Storage = "_ReturnStatusId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ReturnStatusId
        {
            get
            {
                return this._ReturnStatusId;
            }
            set
            {
                if (this._ReturnStatusId != value)
                {
                    this.OnReturnStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnStatusId = value;
                    this.SendPropertyChanged("ReturnStatusId");
                    this.OnReturnStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Notify in the schema.
        /// </summary>
        [Column(Name = @"notify", Storage = "_Notify", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Notify
        {
            get
            {
                return this._Notify;
            }
            set
            {
                if (this._Notify != value)
                {
                    this.OnNotifyChanging(value);
                    this.SendPropertyChanging();
                    this._Notify = value;
                    this.SendPropertyChanged("Notify");
                    this.OnNotifyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        [Column(Name = @"`comment`", Storage = "_Comment", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging();
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcReturnAction in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_return_action")]
    public partial class OcReturnAction : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ReturnActionId;

        private int _LanguageId = 0;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnReturnActionIdChanging(int value);
        partial void OnReturnActionIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcReturnAction()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReturnActionId in the schema.
        /// </summary>
        [Column(Name = @"return_action_id", Storage = "_ReturnActionId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ReturnActionId
        {
            get
            {
                return this._ReturnActionId;
            }
            set
            {
                if (this._ReturnActionId != value)
                {
                    this.OnReturnActionIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnActionId = value;
                    this.SendPropertyChanged("ReturnActionId");
                    this.OnReturnActionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcReturn in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_return")]
    public partial class OcReturn : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ReturnId;

        private int _OrderId;

        private int _ProductId;

        private int _CustomerId;

        private string _Firstname;

        private string _Lastname;

        private string _Email;

        private string _Telephone;

        private string _Product;

        private string _Model;

        private int _Quantity;

        private bool _Opened;

        private int _ReturnReasonId;

        private int _ReturnActionId;

        private int _ReturnStatusId;

        private string _Comment;

        private System.DateTime _DateOrdered;

        private System.DateTime _DateAdded;

        private System.DateTime _DateModified;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnReturnIdChanging(int value);
        partial void OnReturnIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnFirstnameChanging(string value);
        partial void OnFirstnameChanged();
        partial void OnLastnameChanging(string value);
        partial void OnLastnameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnTelephoneChanging(string value);
        partial void OnTelephoneChanged();
        partial void OnProductChanging(string value);
        partial void OnProductChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnQuantityChanging(int value);
        partial void OnQuantityChanged();
        partial void OnOpenedChanging(bool value);
        partial void OnOpenedChanged();
        partial void OnReturnReasonIdChanging(int value);
        partial void OnReturnReasonIdChanged();
        partial void OnReturnActionIdChanging(int value);
        partial void OnReturnActionIdChanged();
        partial void OnReturnStatusIdChanging(int value);
        partial void OnReturnStatusIdChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnDateOrderedChanging(System.DateTime value);
        partial void OnDateOrderedChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        partial void OnDateModifiedChanging(System.DateTime value);
        partial void OnDateModifiedChanged();
        #endregion

        public OcReturn()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReturnId in the schema.
        /// </summary>
        [Column(Name = @"return_id", Storage = "_ReturnId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ReturnId
        {
            get
            {
                return this._ReturnId;
            }
            set
            {
                if (this._ReturnId != value)
                {
                    this.OnReturnIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnId = value;
                    this.SendPropertyChanged("ReturnId");
                    this.OnReturnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Firstname in the schema.
        /// </summary>
        [Column(Name = @"firstname", Storage = "_Firstname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Firstname
        {
            get
            {
                return this._Firstname;
            }
            set
            {
                if (this._Firstname != value)
                {
                    this.OnFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Firstname = value;
                    this.SendPropertyChanged("Firstname");
                    this.OnFirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Lastname in the schema.
        /// </summary>
        [Column(Name = @"lastname", Storage = "_Lastname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Lastname
        {
            get
            {
                return this._Lastname;
            }
            set
            {
                if (this._Lastname != value)
                {
                    this.OnLastnameChanging(value);
                    this.SendPropertyChanging();
                    this._Lastname = value;
                    this.SendPropertyChanged("Lastname");
                    this.OnLastnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(96) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telephone in the schema.
        /// </summary>
        [Column(Name = @"telephone", Storage = "_Telephone", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Telephone
        {
            get
            {
                return this._Telephone;
            }
            set
            {
                if (this._Telephone != value)
                {
                    this.OnTelephoneChanging(value);
                    this.SendPropertyChanging();
                    this._Telephone = value;
                    this.SendPropertyChanged("Telephone");
                    this.OnTelephoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Column(Name = @"product", Storage = "_Product", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                if (this._Product != value)
                {
                    this.OnProductChanging(value);
                    this.SendPropertyChanging();
                    this._Product = value;
                    this.SendPropertyChanged("Product");
                    this.OnProductChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Model in the schema.
        /// </summary>
        [Column(Name = @"model", Storage = "_Model", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Model
        {
            get
            {
                return this._Model;
            }
            set
            {
                if (this._Model != value)
                {
                    this.OnModelChanging(value);
                    this.SendPropertyChanging();
                    this._Model = value;
                    this.SendPropertyChanged("Model");
                    this.OnModelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"quantity", Storage = "_Quantity", CanBeNull = false, DbType = "INT(4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Opened in the schema.
        /// </summary>
        [Column(Name = @"opened", Storage = "_Opened", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Opened
        {
            get
            {
                return this._Opened;
            }
            set
            {
                if (this._Opened != value)
                {
                    this.OnOpenedChanging(value);
                    this.SendPropertyChanging();
                    this._Opened = value;
                    this.SendPropertyChanged("Opened");
                    this.OnOpenedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReturnReasonId in the schema.
        /// </summary>
        [Column(Name = @"return_reason_id", Storage = "_ReturnReasonId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ReturnReasonId
        {
            get
            {
                return this._ReturnReasonId;
            }
            set
            {
                if (this._ReturnReasonId != value)
                {
                    this.OnReturnReasonIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnReasonId = value;
                    this.SendPropertyChanged("ReturnReasonId");
                    this.OnReturnReasonIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReturnActionId in the schema.
        /// </summary>
        [Column(Name = @"return_action_id", Storage = "_ReturnActionId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ReturnActionId
        {
            get
            {
                return this._ReturnActionId;
            }
            set
            {
                if (this._ReturnActionId != value)
                {
                    this.OnReturnActionIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnActionId = value;
                    this.SendPropertyChanged("ReturnActionId");
                    this.OnReturnActionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReturnStatusId in the schema.
        /// </summary>
        [Column(Name = @"return_status_id", Storage = "_ReturnStatusId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ReturnStatusId
        {
            get
            {
                return this._ReturnStatusId;
            }
            set
            {
                if (this._ReturnStatusId != value)
                {
                    this.OnReturnStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnStatusId = value;
                    this.SendPropertyChanged("ReturnStatusId");
                    this.OnReturnStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        [Column(Name = @"`comment`", Storage = "_Comment", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging();
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateOrdered in the schema.
        /// </summary>
        [Column(Name = @"date_ordered", Storage = "_DateOrdered", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateOrdered
        {
            get
            {
                return this._DateOrdered;
            }
            set
            {
                if (this._DateOrdered != value)
                {
                    this.OnDateOrderedChanging(value);
                    this.SendPropertyChanging();
                    this._DateOrdered = value;
                    this.SendPropertyChanged("DateOrdered");
                    this.OnDateOrderedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateModified in the schema.
        /// </summary>
        [Column(Name = @"date_modified", Storage = "_DateModified", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateModified
        {
            get
            {
                return this._DateModified;
            }
            set
            {
                if (this._DateModified != value)
                {
                    this.OnDateModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._DateModified = value;
                    this.SendPropertyChanged("DateModified");
                    this.OnDateModifiedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProfileDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_profile_description")]
    public partial class OcProfileDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProfileId;

        private int _LanguageId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProfileIdChanging(int value);
        partial void OnProfileIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcProfileDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProfileId in the schema.
        /// </summary>
        [Column(Name = @"profile_id", Storage = "_ProfileId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProfileId
        {
            get
            {
                return this._ProfileId;
            }
            set
            {
                if (this._ProfileId != value)
                {
                    this.OnProfileIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProfileId = value;
                    this.SendPropertyChanged("ProfileId");
                    this.OnProfileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProfile in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_profile")]
    public partial class OcProfile : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProfileId;

        private int _SortOrder;

        private sbyte _Status;

        private decimal _Price;

        private string _Frequency;

        private long _Duration;

        private long _Cycle;

        private sbyte _TrialStatus;

        private decimal _TrialPrice;

        private string _TrialFrequency;

        private long _TrialDuration;

        private long _TrialCycle;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProfileIdChanging(int value);
        partial void OnProfileIdChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        partial void OnStatusChanging(sbyte value);
        partial void OnStatusChanged();
        partial void OnPriceChanging(decimal value);
        partial void OnPriceChanged();
        partial void OnFrequencyChanging(string value);
        partial void OnFrequencyChanged();
        partial void OnDurationChanging(long value);
        partial void OnDurationChanged();
        partial void OnCycleChanging(long value);
        partial void OnCycleChanged();
        partial void OnTrialStatusChanging(sbyte value);
        partial void OnTrialStatusChanged();
        partial void OnTrialPriceChanging(decimal value);
        partial void OnTrialPriceChanged();
        partial void OnTrialFrequencyChanging(string value);
        partial void OnTrialFrequencyChanged();
        partial void OnTrialDurationChanging(long value);
        partial void OnTrialDurationChanged();
        partial void OnTrialCycleChanging(long value);
        partial void OnTrialCycleChanged();
        #endregion

        public OcProfile()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProfileId in the schema.
        /// </summary>
        [Column(Name = @"profile_id", Storage = "_ProfileId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProfileId
        {
            get
            {
                return this._ProfileId;
            }
            set
            {
                if (this._ProfileId != value)
                {
                    this.OnProfileIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProfileId = value;
                    this.SendPropertyChanged("ProfileId");
                    this.OnProfileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public sbyte Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"price", Storage = "_Price", CanBeNull = false, DbType = "DECIMAL(10,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Frequency in the schema.
        /// </summary>
        [Column(Name = @"frequency", Storage = "_Frequency", CanBeNull = false, DbType = "ENUM NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Frequency
        {
            get
            {
                return this._Frequency;
            }
            set
            {
                if (this._Frequency != value)
                {
                    this.OnFrequencyChanging(value);
                    this.SendPropertyChanging();
                    this._Frequency = value;
                    this.SendPropertyChanged("Frequency");
                    this.OnFrequencyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Duration in the schema.
        /// </summary>
        [Column(Name = @"duration", Storage = "_Duration", CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Duration
        {
            get
            {
                return this._Duration;
            }
            set
            {
                if (this._Duration != value)
                {
                    this.OnDurationChanging(value);
                    this.SendPropertyChanging();
                    this._Duration = value;
                    this.SendPropertyChanged("Duration");
                    this.OnDurationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cycle in the schema.
        /// </summary>
        [Column(Name = @"cycle", Storage = "_Cycle", CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Cycle
        {
            get
            {
                return this._Cycle;
            }
            set
            {
                if (this._Cycle != value)
                {
                    this.OnCycleChanging(value);
                    this.SendPropertyChanging();
                    this._Cycle = value;
                    this.SendPropertyChanged("Cycle");
                    this.OnCycleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TrialStatus in the schema.
        /// </summary>
        [Column(Name = @"trial_status", Storage = "_TrialStatus", CanBeNull = false, DbType = "TINYINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public sbyte TrialStatus
        {
            get
            {
                return this._TrialStatus;
            }
            set
            {
                if (this._TrialStatus != value)
                {
                    this.OnTrialStatusChanging(value);
                    this.SendPropertyChanging();
                    this._TrialStatus = value;
                    this.SendPropertyChanged("TrialStatus");
                    this.OnTrialStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TrialPrice in the schema.
        /// </summary>
        [Column(Name = @"trial_price", Storage = "_TrialPrice", CanBeNull = false, DbType = "DECIMAL(10,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal TrialPrice
        {
            get
            {
                return this._TrialPrice;
            }
            set
            {
                if (this._TrialPrice != value)
                {
                    this.OnTrialPriceChanging(value);
                    this.SendPropertyChanging();
                    this._TrialPrice = value;
                    this.SendPropertyChanged("TrialPrice");
                    this.OnTrialPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TrialFrequency in the schema.
        /// </summary>
        [Column(Name = @"trial_frequency", Storage = "_TrialFrequency", CanBeNull = false, DbType = "ENUM NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TrialFrequency
        {
            get
            {
                return this._TrialFrequency;
            }
            set
            {
                if (this._TrialFrequency != value)
                {
                    this.OnTrialFrequencyChanging(value);
                    this.SendPropertyChanging();
                    this._TrialFrequency = value;
                    this.SendPropertyChanged("TrialFrequency");
                    this.OnTrialFrequencyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TrialDuration in the schema.
        /// </summary>
        [Column(Name = @"trial_duration", Storage = "_TrialDuration", CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long TrialDuration
        {
            get
            {
                return this._TrialDuration;
            }
            set
            {
                if (this._TrialDuration != value)
                {
                    this.OnTrialDurationChanging(value);
                    this.SendPropertyChanging();
                    this._TrialDuration = value;
                    this.SendPropertyChanged("TrialDuration");
                    this.OnTrialDurationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TrialCycle in the schema.
        /// </summary>
        [Column(Name = @"trial_cycle", Storage = "_TrialCycle", CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long TrialCycle
        {
            get
            {
                return this._TrialCycle;
            }
            set
            {
                if (this._TrialCycle != value)
                {
                    this.OnTrialCycleChanging(value);
                    this.SendPropertyChanging();
                    this._TrialCycle = value;
                    this.SendPropertyChanged("TrialCycle");
                    this.OnTrialCycleChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductToStore in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_to_store")]
    public partial class OcProductToStore : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private int _StoreId = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnStoreIdChanging(int value);
        partial void OnStoreIdChanged();
        #endregion

        public OcProductToStore()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductToLayout in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_to_layout")]
    public partial class OcProductToLayout : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private int _StoreId;

        private int _LayoutId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnStoreIdChanging(int value);
        partial void OnStoreIdChanged();
        partial void OnLayoutIdChanging(int value);
        partial void OnLayoutIdChanged();
        #endregion

        public OcProductToLayout()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LayoutId in the schema.
        /// </summary>
        [Column(Name = @"layout_id", Storage = "_LayoutId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LayoutId
        {
            get
            {
                return this._LayoutId;
            }
            set
            {
                if (this._LayoutId != value)
                {
                    this.OnLayoutIdChanging(value);
                    this.SendPropertyChanging();
                    this._LayoutId = value;
                    this.SendPropertyChanged("LayoutId");
                    this.OnLayoutIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductToDownload in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_to_download")]
    public partial class OcProductToDownload : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private int _DownloadId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnDownloadIdChanging(int value);
        partial void OnDownloadIdChanged();
        #endregion

        public OcProductToDownload()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DownloadId in the schema.
        /// </summary>
        [Column(Name = @"download_id", Storage = "_DownloadId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int DownloadId
        {
            get
            {
                return this._DownloadId;
            }
            set
            {
                if (this._DownloadId != value)
                {
                    this.OnDownloadIdChanging(value);
                    this.SendPropertyChanging();
                    this._DownloadId = value;
                    this.SendPropertyChanged("DownloadId");
                    this.OnDownloadIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductToCategory in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_to_category")]
    public partial class OcProductToCategory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private int _CategoryId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        #endregion

        public OcProductToCategory()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductSpecial in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_special")]
    public partial class OcProductSpecial : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductSpecialId;

        private int _ProductId;

        private int _CustomerGroupId;

        private int _Priority = 1;

        private decimal _Price = 0.0000m;

        private System.DateTime _DateStart;

        private System.DateTime _DateEnd;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductSpecialIdChanging(int value);
        partial void OnProductSpecialIdChanged();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnCustomerGroupIdChanging(int value);
        partial void OnCustomerGroupIdChanged();
        partial void OnPriorityChanging(int value);
        partial void OnPriorityChanged();
        partial void OnPriceChanging(decimal value);
        partial void OnPriceChanged();
        partial void OnDateStartChanging(System.DateTime value);
        partial void OnDateStartChanged();
        partial void OnDateEndChanging(System.DateTime value);
        partial void OnDateEndChanged();
        #endregion

        public OcProductSpecial()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductSpecialId in the schema.
        /// </summary>
        [Column(Name = @"product_special_id", Storage = "_ProductSpecialId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductSpecialId
        {
            get
            {
                return this._ProductSpecialId;
            }
            set
            {
                if (this._ProductSpecialId != value)
                {
                    this.OnProductSpecialIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductSpecialId = value;
                    this.SendPropertyChanged("ProductSpecialId");
                    this.OnProductSpecialIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerGroupId in the schema.
        /// </summary>
        [Column(Name = @"customer_group_id", Storage = "_CustomerGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerGroupId
        {
            get
            {
                return this._CustomerGroupId;
            }
            set
            {
                if (this._CustomerGroupId != value)
                {
                    this.OnCustomerGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerGroupId = value;
                    this.SendPropertyChanged("CustomerGroupId");
                    this.OnCustomerGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Priority in the schema.
        /// </summary>
        [Column(Name = @"priority", Storage = "_Priority", CanBeNull = false, DbType = "INT(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Priority
        {
            get
            {
                return this._Priority;
            }
            set
            {
                if (this._Priority != value)
                {
                    this.OnPriorityChanging(value);
                    this.SendPropertyChanging();
                    this._Priority = value;
                    this.SendPropertyChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"price", Storage = "_Price", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateStart in the schema.
        /// </summary>
        [Column(Name = @"date_start", Storage = "_DateStart", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateStart
        {
            get
            {
                return this._DateStart;
            }
            set
            {
                if (this._DateStart != value)
                {
                    this.OnDateStartChanging(value);
                    this.SendPropertyChanging();
                    this._DateStart = value;
                    this.SendPropertyChanged("DateStart");
                    this.OnDateStartChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateEnd in the schema.
        /// </summary>
        [Column(Name = @"date_end", Storage = "_DateEnd", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateEnd
        {
            get
            {
                return this._DateEnd;
            }
            set
            {
                if (this._DateEnd != value)
                {
                    this.OnDateEndChanging(value);
                    this.SendPropertyChanging();
                    this._DateEnd = value;
                    this.SendPropertyChanged("DateEnd");
                    this.OnDateEndChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductReward in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_reward")]
    public partial class OcProductReward : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductRewardId;

        private int _ProductId = 0;

        private int _CustomerGroupId = 0;

        private int _Points = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductRewardIdChanging(int value);
        partial void OnProductRewardIdChanged();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnCustomerGroupIdChanging(int value);
        partial void OnCustomerGroupIdChanged();
        partial void OnPointsChanging(int value);
        partial void OnPointsChanged();
        #endregion

        public OcProductReward()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductRewardId in the schema.
        /// </summary>
        [Column(Name = @"product_reward_id", Storage = "_ProductRewardId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductRewardId
        {
            get
            {
                return this._ProductRewardId;
            }
            set
            {
                if (this._ProductRewardId != value)
                {
                    this.OnProductRewardIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductRewardId = value;
                    this.SendPropertyChanged("ProductRewardId");
                    this.OnProductRewardIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerGroupId in the schema.
        /// </summary>
        [Column(Name = @"customer_group_id", Storage = "_CustomerGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerGroupId
        {
            get
            {
                return this._CustomerGroupId;
            }
            set
            {
                if (this._CustomerGroupId != value)
                {
                    this.OnCustomerGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerGroupId = value;
                    this.SendPropertyChanged("CustomerGroupId");
                    this.OnCustomerGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Points in the schema.
        /// </summary>
        [Column(Name = @"points", Storage = "_Points", CanBeNull = false, DbType = "INT(8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Points
        {
            get
            {
                return this._Points;
            }
            set
            {
                if (this._Points != value)
                {
                    this.OnPointsChanging(value);
                    this.SendPropertyChanging();
                    this._Points = value;
                    this.SendPropertyChanged("Points");
                    this.OnPointsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductRelated in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_related")]
    public partial class OcProductRelated : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private int _RelatedId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnRelatedIdChanging(int value);
        partial void OnRelatedIdChanged();
        #endregion

        public OcProductRelated()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RelatedId in the schema.
        /// </summary>
        [Column(Name = @"related_id", Storage = "_RelatedId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int RelatedId
        {
            get
            {
                return this._RelatedId;
            }
            set
            {
                if (this._RelatedId != value)
                {
                    this.OnRelatedIdChanging(value);
                    this.SendPropertyChanging();
                    this._RelatedId = value;
                    this.SendPropertyChanged("RelatedId");
                    this.OnRelatedIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductRecurring in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_recurring")]
    public partial class OcProductRecurring : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private int _StoreId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnStoreIdChanging(int value);
        partial void OnStoreIdChanged();
        #endregion

        public OcProductRecurring()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductProfile in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_profile")]
    public partial class OcProductProfile : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private int _ProfileId;

        private int _CustomerGroupId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnProfileIdChanging(int value);
        partial void OnProfileIdChanged();
        partial void OnCustomerGroupIdChanging(int value);
        partial void OnCustomerGroupIdChanged();
        #endregion

        public OcProductProfile()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProfileId in the schema.
        /// </summary>
        [Column(Name = @"profile_id", Storage = "_ProfileId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProfileId
        {
            get
            {
                return this._ProfileId;
            }
            set
            {
                if (this._ProfileId != value)
                {
                    this.OnProfileIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProfileId = value;
                    this.SendPropertyChanged("ProfileId");
                    this.OnProfileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerGroupId in the schema.
        /// </summary>
        [Column(Name = @"customer_group_id", Storage = "_CustomerGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CustomerGroupId
        {
            get
            {
                return this._CustomerGroupId;
            }
            set
            {
                if (this._CustomerGroupId != value)
                {
                    this.OnCustomerGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerGroupId = value;
                    this.SendPropertyChanged("CustomerGroupId");
                    this.OnCustomerGroupIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductOptionValue in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_option_value")]
    public partial class OcProductOptionValue : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductOptionValueId;

        private int _ProductOptionId;

        private int _ProductId;

        private int _OptionId;

        private int _OptionValueId;

        private int _Quantity;

        private bool _Subtract;

        private decimal _Price;

        private string _PricePrefix;

        private int _Points;

        private string _PointsPrefix;

        private decimal _Weight;

        private string _WeightPrefix;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductOptionValueIdChanging(int value);
        partial void OnProductOptionValueIdChanged();
        partial void OnProductOptionIdChanging(int value);
        partial void OnProductOptionIdChanged();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnOptionIdChanging(int value);
        partial void OnOptionIdChanged();
        partial void OnOptionValueIdChanging(int value);
        partial void OnOptionValueIdChanged();
        partial void OnQuantityChanging(int value);
        partial void OnQuantityChanged();
        partial void OnSubtractChanging(bool value);
        partial void OnSubtractChanged();
        partial void OnPriceChanging(decimal value);
        partial void OnPriceChanged();
        partial void OnPricePrefixChanging(string value);
        partial void OnPricePrefixChanged();
        partial void OnPointsChanging(int value);
        partial void OnPointsChanged();
        partial void OnPointsPrefixChanging(string value);
        partial void OnPointsPrefixChanged();
        partial void OnWeightChanging(decimal value);
        partial void OnWeightChanged();
        partial void OnWeightPrefixChanging(string value);
        partial void OnWeightPrefixChanged();
        #endregion

        public OcProductOptionValue()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductOptionValueId in the schema.
        /// </summary>
        [Column(Name = @"product_option_value_id", Storage = "_ProductOptionValueId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductOptionValueId
        {
            get
            {
                return this._ProductOptionValueId;
            }
            set
            {
                if (this._ProductOptionValueId != value)
                {
                    this.OnProductOptionValueIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductOptionValueId = value;
                    this.SendPropertyChanged("ProductOptionValueId");
                    this.OnProductOptionValueIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductOptionId in the schema.
        /// </summary>
        [Column(Name = @"product_option_id", Storage = "_ProductOptionId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductOptionId
        {
            get
            {
                return this._ProductOptionId;
            }
            set
            {
                if (this._ProductOptionId != value)
                {
                    this.OnProductOptionIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductOptionId = value;
                    this.SendPropertyChanged("ProductOptionId");
                    this.OnProductOptionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OptionId in the schema.
        /// </summary>
        [Column(Name = @"option_id", Storage = "_OptionId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OptionId
        {
            get
            {
                return this._OptionId;
            }
            set
            {
                if (this._OptionId != value)
                {
                    this.OnOptionIdChanging(value);
                    this.SendPropertyChanging();
                    this._OptionId = value;
                    this.SendPropertyChanged("OptionId");
                    this.OnOptionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OptionValueId in the schema.
        /// </summary>
        [Column(Name = @"option_value_id", Storage = "_OptionValueId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OptionValueId
        {
            get
            {
                return this._OptionValueId;
            }
            set
            {
                if (this._OptionValueId != value)
                {
                    this.OnOptionValueIdChanging(value);
                    this.SendPropertyChanging();
                    this._OptionValueId = value;
                    this.SendPropertyChanged("OptionValueId");
                    this.OnOptionValueIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"quantity", Storage = "_Quantity", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Subtract in the schema.
        /// </summary>
        [Column(Name = @"subtract", Storage = "_Subtract", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Subtract
        {
            get
            {
                return this._Subtract;
            }
            set
            {
                if (this._Subtract != value)
                {
                    this.OnSubtractChanging(value);
                    this.SendPropertyChanging();
                    this._Subtract = value;
                    this.SendPropertyChanged("Subtract");
                    this.OnSubtractChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"price", Storage = "_Price", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PricePrefix in the schema.
        /// </summary>
        [Column(Name = @"price_prefix", Storage = "_PricePrefix", CanBeNull = false, DbType = "VARCHAR(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PricePrefix
        {
            get
            {
                return this._PricePrefix;
            }
            set
            {
                if (this._PricePrefix != value)
                {
                    this.OnPricePrefixChanging(value);
                    this.SendPropertyChanging();
                    this._PricePrefix = value;
                    this.SendPropertyChanged("PricePrefix");
                    this.OnPricePrefixChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Points in the schema.
        /// </summary>
        [Column(Name = @"points", Storage = "_Points", CanBeNull = false, DbType = "INT(8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Points
        {
            get
            {
                return this._Points;
            }
            set
            {
                if (this._Points != value)
                {
                    this.OnPointsChanging(value);
                    this.SendPropertyChanging();
                    this._Points = value;
                    this.SendPropertyChanged("Points");
                    this.OnPointsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PointsPrefix in the schema.
        /// </summary>
        [Column(Name = @"points_prefix", Storage = "_PointsPrefix", CanBeNull = false, DbType = "VARCHAR(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PointsPrefix
        {
            get
            {
                return this._PointsPrefix;
            }
            set
            {
                if (this._PointsPrefix != value)
                {
                    this.OnPointsPrefixChanging(value);
                    this.SendPropertyChanging();
                    this._PointsPrefix = value;
                    this.SendPropertyChanged("PointsPrefix");
                    this.OnPointsPrefixChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Weight in the schema.
        /// </summary>
        [Column(Name = @"weight", Storage = "_Weight", CanBeNull = false, DbType = "DECIMAL(15,8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Weight
        {
            get
            {
                return this._Weight;
            }
            set
            {
                if (this._Weight != value)
                {
                    this.OnWeightChanging(value);
                    this.SendPropertyChanging();
                    this._Weight = value;
                    this.SendPropertyChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WeightPrefix in the schema.
        /// </summary>
        [Column(Name = @"weight_prefix", Storage = "_WeightPrefix", CanBeNull = false, DbType = "VARCHAR(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string WeightPrefix
        {
            get
            {
                return this._WeightPrefix;
            }
            set
            {
                if (this._WeightPrefix != value)
                {
                    this.OnWeightPrefixChanging(value);
                    this.SendPropertyChanging();
                    this._WeightPrefix = value;
                    this.SendPropertyChanged("WeightPrefix");
                    this.OnWeightPrefixChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductOption in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_option")]
    public partial class OcProductOption : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductOptionId;

        private int _ProductId;

        private int _OptionId;

        private string _OptionValue;

        private bool _Required;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductOptionIdChanging(int value);
        partial void OnProductOptionIdChanged();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnOptionIdChanging(int value);
        partial void OnOptionIdChanged();
        partial void OnOptionValueChanging(string value);
        partial void OnOptionValueChanged();
        partial void OnRequiredChanging(bool value);
        partial void OnRequiredChanged();
        #endregion

        public OcProductOption()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductOptionId in the schema.
        /// </summary>
        [Column(Name = @"product_option_id", Storage = "_ProductOptionId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductOptionId
        {
            get
            {
                return this._ProductOptionId;
            }
            set
            {
                if (this._ProductOptionId != value)
                {
                    this.OnProductOptionIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductOptionId = value;
                    this.SendPropertyChanged("ProductOptionId");
                    this.OnProductOptionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OptionId in the schema.
        /// </summary>
        [Column(Name = @"option_id", Storage = "_OptionId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OptionId
        {
            get
            {
                return this._OptionId;
            }
            set
            {
                if (this._OptionId != value)
                {
                    this.OnOptionIdChanging(value);
                    this.SendPropertyChanging();
                    this._OptionId = value;
                    this.SendPropertyChanged("OptionId");
                    this.OnOptionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OptionValue in the schema.
        /// </summary>
        [Column(Name = @"option_value", Storage = "_OptionValue", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string OptionValue
        {
            get
            {
                return this._OptionValue;
            }
            set
            {
                if (this._OptionValue != value)
                {
                    this.OnOptionValueChanging(value);
                    this.SendPropertyChanging();
                    this._OptionValue = value;
                    this.SendPropertyChanged("OptionValue");
                    this.OnOptionValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Required in the schema.
        /// </summary>
        [Column(Name = @"required", Storage = "_Required", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Required
        {
            get
            {
                return this._Required;
            }
            set
            {
                if (this._Required != value)
                {
                    this.OnRequiredChanging(value);
                    this.SendPropertyChanging();
                    this._Required = value;
                    this.SendPropertyChanged("Required");
                    this.OnRequiredChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductImage in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_image")]
    public partial class OcProductImage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductImageId;

        private int _ProductId;

        private string _Image;

        private int _SortOrder = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductImageIdChanging(int value);
        partial void OnProductImageIdChanged();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcProductImage()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductImageId in the schema.
        /// </summary>
        [Column(Name = @"product_image_id", Storage = "_ProductImageId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductImageId
        {
            get
            {
                return this._ProductImageId;
            }
            set
            {
                if (this._ProductImageId != value)
                {
                    this.OnProductImageIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductImageId = value;
                    this.SendPropertyChanged("ProductImageId");
                    this.OnProductImageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [Column(Name = @"image", Storage = "_Image", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging();
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductFilter in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_filter")]
    public partial class OcProductFilter : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private int _FilterId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnFilterIdChanging(int value);
        partial void OnFilterIdChanged();
        #endregion

        public OcProductFilter()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FilterId in the schema.
        /// </summary>
        [Column(Name = @"filter_id", Storage = "_FilterId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int FilterId
        {
            get
            {
                return this._FilterId;
            }
            set
            {
                if (this._FilterId != value)
                {
                    this.OnFilterIdChanging(value);
                    this.SendPropertyChanging();
                    this._FilterId = value;
                    this.SendPropertyChanged("FilterId");
                    this.OnFilterIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductDiscount in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_discount")]
    public partial class OcProductDiscount : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductDiscountId;

        private int _ProductId;

        private int _CustomerGroupId;

        private int _Quantity = 0;

        private int _Priority = 1;

        private decimal _Price = 0.0000m;

        private System.DateTime _DateStart;

        private System.DateTime _DateEnd;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductDiscountIdChanging(int value);
        partial void OnProductDiscountIdChanged();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnCustomerGroupIdChanging(int value);
        partial void OnCustomerGroupIdChanged();
        partial void OnQuantityChanging(int value);
        partial void OnQuantityChanged();
        partial void OnPriorityChanging(int value);
        partial void OnPriorityChanged();
        partial void OnPriceChanging(decimal value);
        partial void OnPriceChanged();
        partial void OnDateStartChanging(System.DateTime value);
        partial void OnDateStartChanged();
        partial void OnDateEndChanging(System.DateTime value);
        partial void OnDateEndChanged();
        #endregion

        public OcProductDiscount()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductDiscountId in the schema.
        /// </summary>
        [Column(Name = @"product_discount_id", Storage = "_ProductDiscountId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductDiscountId
        {
            get
            {
                return this._ProductDiscountId;
            }
            set
            {
                if (this._ProductDiscountId != value)
                {
                    this.OnProductDiscountIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductDiscountId = value;
                    this.SendPropertyChanged("ProductDiscountId");
                    this.OnProductDiscountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerGroupId in the schema.
        /// </summary>
        [Column(Name = @"customer_group_id", Storage = "_CustomerGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerGroupId
        {
            get
            {
                return this._CustomerGroupId;
            }
            set
            {
                if (this._CustomerGroupId != value)
                {
                    this.OnCustomerGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerGroupId = value;
                    this.SendPropertyChanged("CustomerGroupId");
                    this.OnCustomerGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"quantity", Storage = "_Quantity", CanBeNull = false, DbType = "INT(4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Priority in the schema.
        /// </summary>
        [Column(Name = @"priority", Storage = "_Priority", CanBeNull = false, DbType = "INT(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Priority
        {
            get
            {
                return this._Priority;
            }
            set
            {
                if (this._Priority != value)
                {
                    this.OnPriorityChanging(value);
                    this.SendPropertyChanging();
                    this._Priority = value;
                    this.SendPropertyChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"price", Storage = "_Price", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateStart in the schema.
        /// </summary>
        [Column(Name = @"date_start", Storage = "_DateStart", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateStart
        {
            get
            {
                return this._DateStart;
            }
            set
            {
                if (this._DateStart != value)
                {
                    this.OnDateStartChanging(value);
                    this.SendPropertyChanging();
                    this._DateStart = value;
                    this.SendPropertyChanged("DateStart");
                    this.OnDateStartChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateEnd in the schema.
        /// </summary>
        [Column(Name = @"date_end", Storage = "_DateEnd", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateEnd
        {
            get
            {
                return this._DateEnd;
            }
            set
            {
                if (this._DateEnd != value)
                {
                    this.OnDateEndChanging(value);
                    this.SendPropertyChanging();
                    this._DateEnd = value;
                    this.SendPropertyChanged("DateEnd");
                    this.OnDateEndChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_description")]
    public partial class OcProductDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private int _LanguageId;

        private string _Name;

        private string _Description;

        private string _MetaDescription;

        private string _MetaKeyword;

        private string _Tag;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnMetaDescriptionChanging(string value);
        partial void OnMetaDescriptionChanged();
        partial void OnMetaKeywordChanging(string value);
        partial void OnMetaKeywordChanged();
        partial void OnTagChanging(string value);
        partial void OnTagChanged();
        #endregion

        public OcProductDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MetaDescription in the schema.
        /// </summary>
        [Column(Name = @"meta_description", Storage = "_MetaDescription", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MetaDescription
        {
            get
            {
                return this._MetaDescription;
            }
            set
            {
                if (this._MetaDescription != value)
                {
                    this.OnMetaDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._MetaDescription = value;
                    this.SendPropertyChanged("MetaDescription");
                    this.OnMetaDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MetaKeyword in the schema.
        /// </summary>
        [Column(Name = @"meta_keyword", Storage = "_MetaKeyword", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MetaKeyword
        {
            get
            {
                return this._MetaKeyword;
            }
            set
            {
                if (this._MetaKeyword != value)
                {
                    this.OnMetaKeywordChanging(value);
                    this.SendPropertyChanging();
                    this._MetaKeyword = value;
                    this.SendPropertyChanged("MetaKeyword");
                    this.OnMetaKeywordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tag in the schema.
        /// </summary>
        [Column(Name = @"tag", Storage = "_Tag", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Tag
        {
            get
            {
                return this._Tag;
            }
            set
            {
                if (this._Tag != value)
                {
                    this.OnTagChanging(value);
                    this.SendPropertyChanging();
                    this._Tag = value;
                    this.SendPropertyChanged("Tag");
                    this.OnTagChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProductAttribute in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product_attribute")]
    public partial class OcProductAttribute : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private int _AttributeId;

        private int _LanguageId;

        private string _Text;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnAttributeIdChanging(int value);
        partial void OnAttributeIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        #endregion

        public OcProductAttribute()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AttributeId in the schema.
        /// </summary>
        [Column(Name = @"attribute_id", Storage = "_AttributeId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int AttributeId
        {
            get
            {
                return this._AttributeId;
            }
            set
            {
                if (this._AttributeId != value)
                {
                    this.OnAttributeIdChanging(value);
                    this.SendPropertyChanging();
                    this._AttributeId = value;
                    this.SendPropertyChanged("AttributeId");
                    this.OnAttributeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Text in the schema.
        /// </summary>
        [Column(Name = @"`text`", Storage = "_Text", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if (this._Text != value)
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging();
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcProduct in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_product")]
    public partial class OcProduct : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private string _Model;

        private string _Sku;

        private string _Upc;

        private string _Ean;

        private string _Jan;

        private string _Isbn;

        private string _Mpn;

        private string _Location;

        private int _Quantity = 0;

        private int _StockStatusId;

        private string _Image;

        private int _ManufacturerId;

        private bool _Shipping = true;

        private decimal _Price = 0.0000m;

        private int _Points = 0;

        private int _TaxClassId;

        private System.DateTime _DateAvailable;

        private decimal _Weight = 0.00000000m;

        private int _WeightClassId = 0;

        private decimal _Length = 0.00000000m;

        private decimal _Width = 0.00000000m;

        private decimal _Height = 0.00000000m;

        private int _LengthClassId = 0;

        private bool _Subtract = true;

        private int _Minimum = 1;

        private int _SortOrder = 0;

        private bool _Status = false;

        private System.DateTime _DateAdded;

        private System.DateTime _DateModified;

        private int _Viewed = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnSkuChanging(string value);
        partial void OnSkuChanged();
        partial void OnUpcChanging(string value);
        partial void OnUpcChanged();
        partial void OnEanChanging(string value);
        partial void OnEanChanged();
        partial void OnJanChanging(string value);
        partial void OnJanChanged();
        partial void OnIsbnChanging(string value);
        partial void OnIsbnChanged();
        partial void OnMpnChanging(string value);
        partial void OnMpnChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnQuantityChanging(int value);
        partial void OnQuantityChanged();
        partial void OnStockStatusIdChanging(int value);
        partial void OnStockStatusIdChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        partial void OnManufacturerIdChanging(int value);
        partial void OnManufacturerIdChanged();
        partial void OnShippingChanging(bool value);
        partial void OnShippingChanged();
        partial void OnPriceChanging(decimal value);
        partial void OnPriceChanged();
        partial void OnPointsChanging(int value);
        partial void OnPointsChanged();
        partial void OnTaxClassIdChanging(int value);
        partial void OnTaxClassIdChanged();
        partial void OnDateAvailableChanging(System.DateTime value);
        partial void OnDateAvailableChanged();
        partial void OnWeightChanging(decimal value);
        partial void OnWeightChanged();
        partial void OnWeightClassIdChanging(int value);
        partial void OnWeightClassIdChanged();
        partial void OnLengthChanging(decimal value);
        partial void OnLengthChanged();
        partial void OnWidthChanging(decimal value);
        partial void OnWidthChanged();
        partial void OnHeightChanging(decimal value);
        partial void OnHeightChanged();
        partial void OnLengthClassIdChanging(int value);
        partial void OnLengthClassIdChanged();
        partial void OnSubtractChanging(bool value);
        partial void OnSubtractChanged();
        partial void OnMinimumChanging(int value);
        partial void OnMinimumChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        partial void OnDateModifiedChanging(System.DateTime value);
        partial void OnDateModifiedChanged();
        partial void OnViewedChanging(int value);
        partial void OnViewedChanged();
        #endregion

        public OcProduct()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Model in the schema.
        /// </summary>
        [Column(Name = @"model", Storage = "_Model", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Model
        {
            get
            {
                return this._Model;
            }
            set
            {
                if (this._Model != value)
                {
                    this.OnModelChanging(value);
                    this.SendPropertyChanging();
                    this._Model = value;
                    this.SendPropertyChanged("Model");
                    this.OnModelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sku in the schema.
        /// </summary>
        [Column(Name = @"sku", Storage = "_Sku", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Sku
        {
            get
            {
                return this._Sku;
            }
            set
            {
                if (this._Sku != value)
                {
                    this.OnSkuChanging(value);
                    this.SendPropertyChanging();
                    this._Sku = value;
                    this.SendPropertyChanged("Sku");
                    this.OnSkuChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Upc in the schema.
        /// </summary>
        [Column(Name = @"upc", Storage = "_Upc", CanBeNull = false, DbType = "VARCHAR(12) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Upc
        {
            get
            {
                return this._Upc;
            }
            set
            {
                if (this._Upc != value)
                {
                    this.OnUpcChanging(value);
                    this.SendPropertyChanging();
                    this._Upc = value;
                    this.SendPropertyChanged("Upc");
                    this.OnUpcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ean in the schema.
        /// </summary>
        [Column(Name = @"ean", Storage = "_Ean", CanBeNull = false, DbType = "VARCHAR(14) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ean
        {
            get
            {
                return this._Ean;
            }
            set
            {
                if (this._Ean != value)
                {
                    this.OnEanChanging(value);
                    this.SendPropertyChanging();
                    this._Ean = value;
                    this.SendPropertyChanged("Ean");
                    this.OnEanChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Jan in the schema.
        /// </summary>
        [Column(Name = @"jan", Storage = "_Jan", CanBeNull = false, DbType = "VARCHAR(13) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Jan
        {
            get
            {
                return this._Jan;
            }
            set
            {
                if (this._Jan != value)
                {
                    this.OnJanChanging(value);
                    this.SendPropertyChanging();
                    this._Jan = value;
                    this.SendPropertyChanged("Jan");
                    this.OnJanChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Isbn in the schema.
        /// </summary>
        [Column(Name = @"isbn", Storage = "_Isbn", CanBeNull = false, DbType = "VARCHAR(13) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Isbn
        {
            get
            {
                return this._Isbn;
            }
            set
            {
                if (this._Isbn != value)
                {
                    this.OnIsbnChanging(value);
                    this.SendPropertyChanging();
                    this._Isbn = value;
                    this.SendPropertyChanged("Isbn");
                    this.OnIsbnChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mpn in the schema.
        /// </summary>
        [Column(Name = @"mpn", Storage = "_Mpn", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Mpn
        {
            get
            {
                return this._Mpn;
            }
            set
            {
                if (this._Mpn != value)
                {
                    this.OnMpnChanging(value);
                    this.SendPropertyChanging();
                    this._Mpn = value;
                    this.SendPropertyChanged("Mpn");
                    this.OnMpnChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Location in the schema.
        /// </summary>
        [Column(Name = @"location", Storage = "_Location", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Location
        {
            get
            {
                return this._Location;
            }
            set
            {
                if (this._Location != value)
                {
                    this.OnLocationChanging(value);
                    this.SendPropertyChanging();
                    this._Location = value;
                    this.SendPropertyChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"quantity", Storage = "_Quantity", CanBeNull = false, DbType = "INT(4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockStatusId in the schema.
        /// </summary>
        [Column(Name = @"stock_status_id", Storage = "_StockStatusId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int StockStatusId
        {
            get
            {
                return this._StockStatusId;
            }
            set
            {
                if (this._StockStatusId != value)
                {
                    this.OnStockStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockStatusId = value;
                    this.SendPropertyChanged("StockStatusId");
                    this.OnStockStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [Column(Name = @"image", Storage = "_Image", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging();
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManufacturerId in the schema.
        /// </summary>
        [Column(Name = @"manufacturer_id", Storage = "_ManufacturerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ManufacturerId
        {
            get
            {
                return this._ManufacturerId;
            }
            set
            {
                if (this._ManufacturerId != value)
                {
                    this.OnManufacturerIdChanging(value);
                    this.SendPropertyChanging();
                    this._ManufacturerId = value;
                    this.SendPropertyChanged("ManufacturerId");
                    this.OnManufacturerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Shipping in the schema.
        /// </summary>
        [Column(Name = @"shipping", Storage = "_Shipping", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Shipping
        {
            get
            {
                return this._Shipping;
            }
            set
            {
                if (this._Shipping != value)
                {
                    this.OnShippingChanging(value);
                    this.SendPropertyChanging();
                    this._Shipping = value;
                    this.SendPropertyChanged("Shipping");
                    this.OnShippingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"price", Storage = "_Price", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Points in the schema.
        /// </summary>
        [Column(Name = @"points", Storage = "_Points", CanBeNull = false, DbType = "INT(8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Points
        {
            get
            {
                return this._Points;
            }
            set
            {
                if (this._Points != value)
                {
                    this.OnPointsChanging(value);
                    this.SendPropertyChanging();
                    this._Points = value;
                    this.SendPropertyChanged("Points");
                    this.OnPointsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClassId in the schema.
        /// </summary>
        [Column(Name = @"tax_class_id", Storage = "_TaxClassId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int TaxClassId
        {
            get
            {
                return this._TaxClassId;
            }
            set
            {
                if (this._TaxClassId != value)
                {
                    this.OnTaxClassIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxClassId = value;
                    this.SendPropertyChanged("TaxClassId");
                    this.OnTaxClassIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAvailable in the schema.
        /// </summary>
        [Column(Name = @"date_available", Storage = "_DateAvailable", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAvailable
        {
            get
            {
                return this._DateAvailable;
            }
            set
            {
                if (this._DateAvailable != value)
                {
                    this.OnDateAvailableChanging(value);
                    this.SendPropertyChanging();
                    this._DateAvailable = value;
                    this.SendPropertyChanged("DateAvailable");
                    this.OnDateAvailableChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Weight in the schema.
        /// </summary>
        [Column(Name = @"weight", Storage = "_Weight", CanBeNull = false, DbType = "DECIMAL(15,8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Weight
        {
            get
            {
                return this._Weight;
            }
            set
            {
                if (this._Weight != value)
                {
                    this.OnWeightChanging(value);
                    this.SendPropertyChanging();
                    this._Weight = value;
                    this.SendPropertyChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WeightClassId in the schema.
        /// </summary>
        [Column(Name = @"weight_class_id", Storage = "_WeightClassId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int WeightClassId
        {
            get
            {
                return this._WeightClassId;
            }
            set
            {
                if (this._WeightClassId != value)
                {
                    this.OnWeightClassIdChanging(value);
                    this.SendPropertyChanging();
                    this._WeightClassId = value;
                    this.SendPropertyChanged("WeightClassId");
                    this.OnWeightClassIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Length in the schema.
        /// </summary>
        [Column(Name = @"length", Storage = "_Length", CanBeNull = false, DbType = "DECIMAL(15,8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Length
        {
            get
            {
                return this._Length;
            }
            set
            {
                if (this._Length != value)
                {
                    this.OnLengthChanging(value);
                    this.SendPropertyChanging();
                    this._Length = value;
                    this.SendPropertyChanged("Length");
                    this.OnLengthChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Width in the schema.
        /// </summary>
        [Column(Name = @"width", Storage = "_Width", CanBeNull = false, DbType = "DECIMAL(15,8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                if (this._Width != value)
                {
                    this.OnWidthChanging(value);
                    this.SendPropertyChanging();
                    this._Width = value;
                    this.SendPropertyChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Height in the schema.
        /// </summary>
        [Column(Name = @"height", Storage = "_Height", CanBeNull = false, DbType = "DECIMAL(15,8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if (this._Height != value)
                {
                    this.OnHeightChanging(value);
                    this.SendPropertyChanging();
                    this._Height = value;
                    this.SendPropertyChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LengthClassId in the schema.
        /// </summary>
        [Column(Name = @"length_class_id", Storage = "_LengthClassId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LengthClassId
        {
            get
            {
                return this._LengthClassId;
            }
            set
            {
                if (this._LengthClassId != value)
                {
                    this.OnLengthClassIdChanging(value);
                    this.SendPropertyChanging();
                    this._LengthClassId = value;
                    this.SendPropertyChanged("LengthClassId");
                    this.OnLengthClassIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Subtract in the schema.
        /// </summary>
        [Column(Name = @"subtract", Storage = "_Subtract", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Subtract
        {
            get
            {
                return this._Subtract;
            }
            set
            {
                if (this._Subtract != value)
                {
                    this.OnSubtractChanging(value);
                    this.SendPropertyChanging();
                    this._Subtract = value;
                    this.SendPropertyChanged("Subtract");
                    this.OnSubtractChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Minimum in the schema.
        /// </summary>
        [Column(Name = @"minimum", Storage = "_Minimum", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Minimum
        {
            get
            {
                return this._Minimum;
            }
            set
            {
                if (this._Minimum != value)
                {
                    this.OnMinimumChanging(value);
                    this.SendPropertyChanging();
                    this._Minimum = value;
                    this.SendPropertyChanged("Minimum");
                    this.OnMinimumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateModified in the schema.
        /// </summary>
        [Column(Name = @"date_modified", Storage = "_DateModified", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateModified
        {
            get
            {
                return this._DateModified;
            }
            set
            {
                if (this._DateModified != value)
                {
                    this.OnDateModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._DateModified = value;
                    this.SendPropertyChanged("DateModified");
                    this.OnDateModifiedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Viewed in the schema.
        /// </summary>
        [Column(Name = @"viewed", Storage = "_Viewed", CanBeNull = false, DbType = "INT(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Viewed
        {
            get
            {
                return this._Viewed;
            }
            set
            {
                if (this._Viewed != value)
                {
                    this.OnViewedChanging(value);
                    this.SendPropertyChanging();
                    this._Viewed = value;
                    this.SendPropertyChanged("Viewed");
                    this.OnViewedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOrderVoucher in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_order_voucher")]
    public partial class OcOrderVoucher : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderVoucherId;

        private int _OrderId;

        private int _VoucherId;

        private string _Description;

        private string _Code;

        private string _FromName;

        private string _FromEmail;

        private string _ToName;

        private string _ToEmail;

        private int _VoucherThemeId;

        private string _Message;

        private decimal _Amount;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderVoucherIdChanging(int value);
        partial void OnOrderVoucherIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnVoucherIdChanging(int value);
        partial void OnVoucherIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnFromNameChanging(string value);
        partial void OnFromNameChanged();
        partial void OnFromEmailChanging(string value);
        partial void OnFromEmailChanged();
        partial void OnToNameChanging(string value);
        partial void OnToNameChanged();
        partial void OnToEmailChanging(string value);
        partial void OnToEmailChanged();
        partial void OnVoucherThemeIdChanging(int value);
        partial void OnVoucherThemeIdChanged();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        #endregion

        public OcOrderVoucher()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderVoucherId in the schema.
        /// </summary>
        [Column(Name = @"order_voucher_id", Storage = "_OrderVoucherId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderVoucherId
        {
            get
            {
                return this._OrderVoucherId;
            }
            set
            {
                if (this._OrderVoucherId != value)
                {
                    this.OnOrderVoucherIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderVoucherId = value;
                    this.SendPropertyChanged("OrderVoucherId");
                    this.OnOrderVoucherIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VoucherId in the schema.
        /// </summary>
        [Column(Name = @"voucher_id", Storage = "_VoucherId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int VoucherId
        {
            get
            {
                return this._VoucherId;
            }
            set
            {
                if (this._VoucherId != value)
                {
                    this.OnVoucherIdChanging(value);
                    this.SendPropertyChanging();
                    this._VoucherId = value;
                    this.SendPropertyChanged("VoucherId");
                    this.OnVoucherIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FromName in the schema.
        /// </summary>
        [Column(Name = @"from_name", Storage = "_FromName", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FromName
        {
            get
            {
                return this._FromName;
            }
            set
            {
                if (this._FromName != value)
                {
                    this.OnFromNameChanging(value);
                    this.SendPropertyChanging();
                    this._FromName = value;
                    this.SendPropertyChanged("FromName");
                    this.OnFromNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FromEmail in the schema.
        /// </summary>
        [Column(Name = @"from_email", Storage = "_FromEmail", CanBeNull = false, DbType = "VARCHAR(96) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FromEmail
        {
            get
            {
                return this._FromEmail;
            }
            set
            {
                if (this._FromEmail != value)
                {
                    this.OnFromEmailChanging(value);
                    this.SendPropertyChanging();
                    this._FromEmail = value;
                    this.SendPropertyChanged("FromEmail");
                    this.OnFromEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ToName in the schema.
        /// </summary>
        [Column(Name = @"to_name", Storage = "_ToName", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ToName
        {
            get
            {
                return this._ToName;
            }
            set
            {
                if (this._ToName != value)
                {
                    this.OnToNameChanging(value);
                    this.SendPropertyChanging();
                    this._ToName = value;
                    this.SendPropertyChanged("ToName");
                    this.OnToNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ToEmail in the schema.
        /// </summary>
        [Column(Name = @"to_email", Storage = "_ToEmail", CanBeNull = false, DbType = "VARCHAR(96) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ToEmail
        {
            get
            {
                return this._ToEmail;
            }
            set
            {
                if (this._ToEmail != value)
                {
                    this.OnToEmailChanging(value);
                    this.SendPropertyChanging();
                    this._ToEmail = value;
                    this.SendPropertyChanged("ToEmail");
                    this.OnToEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VoucherThemeId in the schema.
        /// </summary>
        [Column(Name = @"voucher_theme_id", Storage = "_VoucherThemeId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int VoucherThemeId
        {
            get
            {
                return this._VoucherThemeId;
            }
            set
            {
                if (this._VoucherThemeId != value)
                {
                    this.OnVoucherThemeIdChanging(value);
                    this.SendPropertyChanging();
                    this._VoucherThemeId = value;
                    this.SendPropertyChanged("VoucherThemeId");
                    this.OnVoucherThemeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Message in the schema.
        /// </summary>
        [Column(Name = @"message", Storage = "_Message", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Message
        {
            get
            {
                return this._Message;
            }
            set
            {
                if (this._Message != value)
                {
                    this.OnMessageChanging(value);
                    this.SendPropertyChanging();
                    this._Message = value;
                    this.SendPropertyChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"amount", Storage = "_Amount", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOrderTotal in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_order_total")]
    public partial class OcOrderTotal : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderTotalId;

        private int _OrderId;

        private string _Code;

        private string _Title;

        private string _Text;

        private decimal _Value = 0.0000m;

        private int _SortOrder;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderTotalIdChanging(int value);
        partial void OnOrderTotalIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        partial void OnValueChanging(decimal value);
        partial void OnValueChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcOrderTotal()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderTotalId in the schema.
        /// </summary>
        [Column(Name = @"order_total_id", Storage = "_OrderTotalId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderTotalId
        {
            get
            {
                return this._OrderTotalId;
            }
            set
            {
                if (this._OrderTotalId != value)
                {
                    this.OnOrderTotalIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderTotalId = value;
                    this.SendPropertyChanged("OrderTotalId");
                    this.OnOrderTotalIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Text in the schema.
        /// </summary>
        [Column(Name = @"`text`", Storage = "_Text", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if (this._Text != value)
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging();
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Name = @"value", Storage = "_Value", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOrderStatus in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_order_status")]
    public partial class OcOrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderStatusId;

        private int _LanguageId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderStatusIdChanging(int value);
        partial void OnOrderStatusIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcOrderStatus()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderStatusId in the schema.
        /// </summary>
        [Column(Name = @"order_status_id", Storage = "_OrderStatusId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderStatusId
        {
            get
            {
                return this._OrderStatusId;
            }
            set
            {
                if (this._OrderStatusId != value)
                {
                    this.OnOrderStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderStatusId = value;
                    this.SendPropertyChanged("OrderStatusId");
                    this.OnOrderStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOrderRecurringTransaction in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_order_recurring_transaction")]
    public partial class OcOrderRecurringTransaction : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderRecurringTransactionId;

        private int _OrderRecurringId;

        private System.DateTime _Created;

        private decimal _Amount;

        private string _Type;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderRecurringTransactionIdChanging(int value);
        partial void OnOrderRecurringTransactionIdChanged();
        partial void OnOrderRecurringIdChanging(int value);
        partial void OnOrderRecurringIdChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public OcOrderRecurringTransaction()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderRecurringTransactionId in the schema.
        /// </summary>
        [Column(Name = @"order_recurring_transaction_id", Storage = "_OrderRecurringTransactionId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderRecurringTransactionId
        {
            get
            {
                return this._OrderRecurringTransactionId;
            }
            set
            {
                if (this._OrderRecurringTransactionId != value)
                {
                    this.OnOrderRecurringTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderRecurringTransactionId = value;
                    this.SendPropertyChanged("OrderRecurringTransactionId");
                    this.OnOrderRecurringTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderRecurringId in the schema.
        /// </summary>
        [Column(Name = @"order_recurring_id", Storage = "_OrderRecurringId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderRecurringId
        {
            get
            {
                return this._OrderRecurringId;
            }
            set
            {
                if (this._OrderRecurringId != value)
                {
                    this.OnOrderRecurringIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderRecurringId = value;
                    this.SendPropertyChanged("OrderRecurringId");
                    this.OnOrderRecurringIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Name = @"created", Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
            set
            {
                if (this._Created != value)
                {
                    this.OnCreatedChanging(value);
                    this.SendPropertyChanging();
                    this._Created = value;
                    this.SendPropertyChanged("Created");
                    this.OnCreatedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"amount", Storage = "_Amount", CanBeNull = false, DbType = "DECIMAL(10,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOrderRecurring in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_order_recurring")]
    public partial class OcOrderRecurring : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderRecurringId;

        private int _OrderId;

        private System.DateTime _Created;

        private sbyte _Status;

        private int _ProductId;

        private string _ProductName;

        private int _ProductQuantity;

        private int _ProfileId;

        private string _ProfileName;

        private string _ProfileDescription;

        private string _RecurringFrequency;

        private short _RecurringCycle;

        private short _RecurringDuration;

        private decimal _RecurringPrice;

        private bool _Trial;

        private string _TrialFrequency;

        private short _TrialCycle;

        private short _TrialDuration;

        private decimal _TrialPrice;

        private string _ProfileReference;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderRecurringIdChanging(int value);
        partial void OnOrderRecurringIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnStatusChanging(sbyte value);
        partial void OnStatusChanged();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnProductQuantityChanging(int value);
        partial void OnProductQuantityChanged();
        partial void OnProfileIdChanging(int value);
        partial void OnProfileIdChanged();
        partial void OnProfileNameChanging(string value);
        partial void OnProfileNameChanged();
        partial void OnProfileDescriptionChanging(string value);
        partial void OnProfileDescriptionChanged();
        partial void OnRecurringFrequencyChanging(string value);
        partial void OnRecurringFrequencyChanged();
        partial void OnRecurringCycleChanging(short value);
        partial void OnRecurringCycleChanged();
        partial void OnRecurringDurationChanging(short value);
        partial void OnRecurringDurationChanged();
        partial void OnRecurringPriceChanging(decimal value);
        partial void OnRecurringPriceChanged();
        partial void OnTrialChanging(bool value);
        partial void OnTrialChanged();
        partial void OnTrialFrequencyChanging(string value);
        partial void OnTrialFrequencyChanged();
        partial void OnTrialCycleChanging(short value);
        partial void OnTrialCycleChanged();
        partial void OnTrialDurationChanging(short value);
        partial void OnTrialDurationChanged();
        partial void OnTrialPriceChanging(decimal value);
        partial void OnTrialPriceChanged();
        partial void OnProfileReferenceChanging(string value);
        partial void OnProfileReferenceChanged();
        #endregion

        public OcOrderRecurring()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderRecurringId in the schema.
        /// </summary>
        [Column(Name = @"order_recurring_id", Storage = "_OrderRecurringId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderRecurringId
        {
            get
            {
                return this._OrderRecurringId;
            }
            set
            {
                if (this._OrderRecurringId != value)
                {
                    this.OnOrderRecurringIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderRecurringId = value;
                    this.SendPropertyChanged("OrderRecurringId");
                    this.OnOrderRecurringIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Name = @"created", Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
            set
            {
                if (this._Created != value)
                {
                    this.OnCreatedChanging(value);
                    this.SendPropertyChanging();
                    this._Created = value;
                    this.SendPropertyChanged("Created");
                    this.OnCreatedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public sbyte Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Name = @"product_name", Storage = "_ProductName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductQuantity in the schema.
        /// </summary>
        [Column(Name = @"product_quantity", Storage = "_ProductQuantity", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductQuantity
        {
            get
            {
                return this._ProductQuantity;
            }
            set
            {
                if (this._ProductQuantity != value)
                {
                    this.OnProductQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ProductQuantity = value;
                    this.SendPropertyChanged("ProductQuantity");
                    this.OnProductQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProfileId in the schema.
        /// </summary>
        [Column(Name = @"profile_id", Storage = "_ProfileId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProfileId
        {
            get
            {
                return this._ProfileId;
            }
            set
            {
                if (this._ProfileId != value)
                {
                    this.OnProfileIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProfileId = value;
                    this.SendPropertyChanged("ProfileId");
                    this.OnProfileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProfileName in the schema.
        /// </summary>
        [Column(Name = @"profile_name", Storage = "_ProfileName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProfileName
        {
            get
            {
                return this._ProfileName;
            }
            set
            {
                if (this._ProfileName != value)
                {
                    this.OnProfileNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProfileName = value;
                    this.SendPropertyChanged("ProfileName");
                    this.OnProfileNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProfileDescription in the schema.
        /// </summary>
        [Column(Name = @"profile_description", Storage = "_ProfileDescription", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProfileDescription
        {
            get
            {
                return this._ProfileDescription;
            }
            set
            {
                if (this._ProfileDescription != value)
                {
                    this.OnProfileDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._ProfileDescription = value;
                    this.SendPropertyChanged("ProfileDescription");
                    this.OnProfileDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecurringFrequency in the schema.
        /// </summary>
        [Column(Name = @"recurring_frequency", Storage = "_RecurringFrequency", CanBeNull = false, DbType = "VARCHAR(25) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string RecurringFrequency
        {
            get
            {
                return this._RecurringFrequency;
            }
            set
            {
                if (this._RecurringFrequency != value)
                {
                    this.OnRecurringFrequencyChanging(value);
                    this.SendPropertyChanging();
                    this._RecurringFrequency = value;
                    this.SendPropertyChanged("RecurringFrequency");
                    this.OnRecurringFrequencyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecurringCycle in the schema.
        /// </summary>
        [Column(Name = @"recurring_cycle", Storage = "_RecurringCycle", CanBeNull = false, DbType = "SMALLINT(6) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short RecurringCycle
        {
            get
            {
                return this._RecurringCycle;
            }
            set
            {
                if (this._RecurringCycle != value)
                {
                    this.OnRecurringCycleChanging(value);
                    this.SendPropertyChanging();
                    this._RecurringCycle = value;
                    this.SendPropertyChanged("RecurringCycle");
                    this.OnRecurringCycleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecurringDuration in the schema.
        /// </summary>
        [Column(Name = @"recurring_duration", Storage = "_RecurringDuration", CanBeNull = false, DbType = "SMALLINT(6) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short RecurringDuration
        {
            get
            {
                return this._RecurringDuration;
            }
            set
            {
                if (this._RecurringDuration != value)
                {
                    this.OnRecurringDurationChanging(value);
                    this.SendPropertyChanging();
                    this._RecurringDuration = value;
                    this.SendPropertyChanged("RecurringDuration");
                    this.OnRecurringDurationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecurringPrice in the schema.
        /// </summary>
        [Column(Name = @"recurring_price", Storage = "_RecurringPrice", CanBeNull = false, DbType = "DECIMAL(10,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal RecurringPrice
        {
            get
            {
                return this._RecurringPrice;
            }
            set
            {
                if (this._RecurringPrice != value)
                {
                    this.OnRecurringPriceChanging(value);
                    this.SendPropertyChanging();
                    this._RecurringPrice = value;
                    this.SendPropertyChanged("RecurringPrice");
                    this.OnRecurringPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Trial in the schema.
        /// </summary>
        [Column(Name = @"trial", Storage = "_Trial", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Trial
        {
            get
            {
                return this._Trial;
            }
            set
            {
                if (this._Trial != value)
                {
                    this.OnTrialChanging(value);
                    this.SendPropertyChanging();
                    this._Trial = value;
                    this.SendPropertyChanged("Trial");
                    this.OnTrialChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TrialFrequency in the schema.
        /// </summary>
        [Column(Name = @"trial_frequency", Storage = "_TrialFrequency", CanBeNull = false, DbType = "VARCHAR(25) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TrialFrequency
        {
            get
            {
                return this._TrialFrequency;
            }
            set
            {
                if (this._TrialFrequency != value)
                {
                    this.OnTrialFrequencyChanging(value);
                    this.SendPropertyChanging();
                    this._TrialFrequency = value;
                    this.SendPropertyChanged("TrialFrequency");
                    this.OnTrialFrequencyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TrialCycle in the schema.
        /// </summary>
        [Column(Name = @"trial_cycle", Storage = "_TrialCycle", CanBeNull = false, DbType = "SMALLINT(6) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short TrialCycle
        {
            get
            {
                return this._TrialCycle;
            }
            set
            {
                if (this._TrialCycle != value)
                {
                    this.OnTrialCycleChanging(value);
                    this.SendPropertyChanging();
                    this._TrialCycle = value;
                    this.SendPropertyChanged("TrialCycle");
                    this.OnTrialCycleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TrialDuration in the schema.
        /// </summary>
        [Column(Name = @"trial_duration", Storage = "_TrialDuration", CanBeNull = false, DbType = "SMALLINT(6) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short TrialDuration
        {
            get
            {
                return this._TrialDuration;
            }
            set
            {
                if (this._TrialDuration != value)
                {
                    this.OnTrialDurationChanging(value);
                    this.SendPropertyChanging();
                    this._TrialDuration = value;
                    this.SendPropertyChanged("TrialDuration");
                    this.OnTrialDurationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TrialPrice in the schema.
        /// </summary>
        [Column(Name = @"trial_price", Storage = "_TrialPrice", CanBeNull = false, DbType = "DECIMAL(10,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal TrialPrice
        {
            get
            {
                return this._TrialPrice;
            }
            set
            {
                if (this._TrialPrice != value)
                {
                    this.OnTrialPriceChanging(value);
                    this.SendPropertyChanging();
                    this._TrialPrice = value;
                    this.SendPropertyChanged("TrialPrice");
                    this.OnTrialPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProfileReference in the schema.
        /// </summary>
        [Column(Name = @"profile_reference", Storage = "_ProfileReference", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProfileReference
        {
            get
            {
                return this._ProfileReference;
            }
            set
            {
                if (this._ProfileReference != value)
                {
                    this.OnProfileReferenceChanging(value);
                    this.SendPropertyChanging();
                    this._ProfileReference = value;
                    this.SendPropertyChanged("ProfileReference");
                    this.OnProfileReferenceChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOrderProduct in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_order_product")]
    public partial class OcOrderProduct : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderProductId;

        private int _OrderId;

        private int _ProductId;

        private string _Name;

        private string _Model;

        private int _Quantity;

        private decimal _Price = 0.0000m;

        private decimal _Total = 0.0000m;

        private decimal _Tax = 0.0000m;

        private int _Reward;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderProductIdChanging(int value);
        partial void OnOrderProductIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnQuantityChanging(int value);
        partial void OnQuantityChanged();
        partial void OnPriceChanging(decimal value);
        partial void OnPriceChanged();
        partial void OnTotalChanging(decimal value);
        partial void OnTotalChanged();
        partial void OnTaxChanging(decimal value);
        partial void OnTaxChanged();
        partial void OnRewardChanging(int value);
        partial void OnRewardChanged();
        #endregion

        public OcOrderProduct()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderProductId in the schema.
        /// </summary>
        [Column(Name = @"order_product_id", Storage = "_OrderProductId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderProductId
        {
            get
            {
                return this._OrderProductId;
            }
            set
            {
                if (this._OrderProductId != value)
                {
                    this.OnOrderProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderProductId = value;
                    this.SendPropertyChanged("OrderProductId");
                    this.OnOrderProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Model in the schema.
        /// </summary>
        [Column(Name = @"model", Storage = "_Model", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Model
        {
            get
            {
                return this._Model;
            }
            set
            {
                if (this._Model != value)
                {
                    this.OnModelChanging(value);
                    this.SendPropertyChanging();
                    this._Model = value;
                    this.SendPropertyChanged("Model");
                    this.OnModelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"quantity", Storage = "_Quantity", CanBeNull = false, DbType = "INT(4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"price", Storage = "_Price", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Total in the schema.
        /// </summary>
        [Column(Name = @"total", Storage = "_Total", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Total
        {
            get
            {
                return this._Total;
            }
            set
            {
                if (this._Total != value)
                {
                    this.OnTotalChanging(value);
                    this.SendPropertyChanging();
                    this._Total = value;
                    this.SendPropertyChanged("Total");
                    this.OnTotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tax in the schema.
        /// </summary>
        [Column(Name = @"tax", Storage = "_Tax", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Tax
        {
            get
            {
                return this._Tax;
            }
            set
            {
                if (this._Tax != value)
                {
                    this.OnTaxChanging(value);
                    this.SendPropertyChanging();
                    this._Tax = value;
                    this.SendPropertyChanged("Tax");
                    this.OnTaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Reward in the schema.
        /// </summary>
        [Column(Name = @"reward", Storage = "_Reward", CanBeNull = false, DbType = "INT(8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Reward
        {
            get
            {
                return this._Reward;
            }
            set
            {
                if (this._Reward != value)
                {
                    this.OnRewardChanging(value);
                    this.SendPropertyChanging();
                    this._Reward = value;
                    this.SendPropertyChanged("Reward");
                    this.OnRewardChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOrderOption in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_order_option")]
    public partial class OcOrderOption : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderOptionId;

        private int _OrderId;

        private int _OrderProductId;

        private int _ProductOptionId;

        private int _ProductOptionValueId = 0;

        private string _Name;

        private string _Value;

        private string _Type;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderOptionIdChanging(int value);
        partial void OnOrderOptionIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnOrderProductIdChanging(int value);
        partial void OnOrderProductIdChanged();
        partial void OnProductOptionIdChanging(int value);
        partial void OnProductOptionIdChanged();
        partial void OnProductOptionValueIdChanging(int value);
        partial void OnProductOptionValueIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public OcOrderOption()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderOptionId in the schema.
        /// </summary>
        [Column(Name = @"order_option_id", Storage = "_OrderOptionId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderOptionId
        {
            get
            {
                return this._OrderOptionId;
            }
            set
            {
                if (this._OrderOptionId != value)
                {
                    this.OnOrderOptionIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderOptionId = value;
                    this.SendPropertyChanged("OrderOptionId");
                    this.OnOrderOptionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderProductId in the schema.
        /// </summary>
        [Column(Name = @"order_product_id", Storage = "_OrderProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderProductId
        {
            get
            {
                return this._OrderProductId;
            }
            set
            {
                if (this._OrderProductId != value)
                {
                    this.OnOrderProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderProductId = value;
                    this.SendPropertyChanged("OrderProductId");
                    this.OnOrderProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductOptionId in the schema.
        /// </summary>
        [Column(Name = @"product_option_id", Storage = "_ProductOptionId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductOptionId
        {
            get
            {
                return this._ProductOptionId;
            }
            set
            {
                if (this._ProductOptionId != value)
                {
                    this.OnProductOptionIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductOptionId = value;
                    this.SendPropertyChanged("ProductOptionId");
                    this.OnProductOptionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductOptionValueId in the schema.
        /// </summary>
        [Column(Name = @"product_option_value_id", Storage = "_ProductOptionValueId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductOptionValueId
        {
            get
            {
                return this._ProductOptionValueId;
            }
            set
            {
                if (this._ProductOptionValueId != value)
                {
                    this.OnProductOptionValueIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductOptionValueId = value;
                    this.SendPropertyChanged("ProductOptionValueId");
                    this.OnProductOptionValueIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Name = @"value", Storage = "_Value", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOrderHistory in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_order_history")]
    public partial class OcOrderHistory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderHistoryId;

        private int _OrderId;

        private int _OrderStatusId;

        private bool _Notify = false;

        private string _Comment;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderHistoryIdChanging(int value);
        partial void OnOrderHistoryIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnOrderStatusIdChanging(int value);
        partial void OnOrderStatusIdChanged();
        partial void OnNotifyChanging(bool value);
        partial void OnNotifyChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcOrderHistory()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderHistoryId in the schema.
        /// </summary>
        [Column(Name = @"order_history_id", Storage = "_OrderHistoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderHistoryId
        {
            get
            {
                return this._OrderHistoryId;
            }
            set
            {
                if (this._OrderHistoryId != value)
                {
                    this.OnOrderHistoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderHistoryId = value;
                    this.SendPropertyChanged("OrderHistoryId");
                    this.OnOrderHistoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderStatusId in the schema.
        /// </summary>
        [Column(Name = @"order_status_id", Storage = "_OrderStatusId", CanBeNull = false, DbType = "INT(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderStatusId
        {
            get
            {
                return this._OrderStatusId;
            }
            set
            {
                if (this._OrderStatusId != value)
                {
                    this.OnOrderStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderStatusId = value;
                    this.SendPropertyChanged("OrderStatusId");
                    this.OnOrderStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Notify in the schema.
        /// </summary>
        [Column(Name = @"notify", Storage = "_Notify", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Notify
        {
            get
            {
                return this._Notify;
            }
            set
            {
                if (this._Notify != value)
                {
                    this.OnNotifyChanging(value);
                    this.SendPropertyChanging();
                    this._Notify = value;
                    this.SendPropertyChanged("Notify");
                    this.OnNotifyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        [Column(Name = @"`comment`", Storage = "_Comment", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging();
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOrderFraud in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_order_fraud")]
    public partial class OcOrderFraud : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderId;

        private int _CustomerId;

        private string _CountryMatch;

        private string _CountryCode;

        private string _HighRiskCountry;

        private int _Distance;

        private string _IpRegion;

        private string _IpCity;

        private decimal _IpLatitude;

        private decimal _IpLongitude;

        private string _IpIsp;

        private string _IpOrg;

        private int _IpAsnum;

        private string _IpUserType;

        private string _IpCountryConfidence;

        private string _IpRegionConfidence;

        private string _IpCityConfidence;

        private string _IpPostalConfidence;

        private string _IpPostalCode;

        private int _IpAccuracyRadius;

        private string _IpNetSpeedCell;

        private int _IpMetroCode;

        private int _IpAreaCode;

        private string _IpTimeZone;

        private string _IpRegionName;

        private string _IpDomain;

        private string _IpCountryName;

        private string _IpContinentCode;

        private string _IpCorporateProxy;

        private string _AnonymousProxy;

        private int _ProxyScore;

        private string _IsTransProxy;

        private string _FreeMail;

        private string _CarderEmail;

        private string _HighRiskUsername;

        private string _HighRiskPassword;

        private string _BinMatch;

        private string _BinCountry;

        private string _BinNameMatch;

        private string _BinName;

        private string _BinPhoneMatch;

        private string _BinPhone;

        private string _CustomerPhoneInBillingLocation;

        private string _ShipForward;

        private string _CityPostalMatch;

        private string _ShipCityPostalMatch;

        private decimal _Score;

        private string _Explanation;

        private decimal _RiskScore;

        private int _QueriesRemaining;

        private string _MaxmindId;

        private string _Error;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnCountryMatchChanging(string value);
        partial void OnCountryMatchChanged();
        partial void OnCountryCodeChanging(string value);
        partial void OnCountryCodeChanged();
        partial void OnHighRiskCountryChanging(string value);
        partial void OnHighRiskCountryChanged();
        partial void OnDistanceChanging(int value);
        partial void OnDistanceChanged();
        partial void OnIpRegionChanging(string value);
        partial void OnIpRegionChanged();
        partial void OnIpCityChanging(string value);
        partial void OnIpCityChanged();
        partial void OnIpLatitudeChanging(decimal value);
        partial void OnIpLatitudeChanged();
        partial void OnIpLongitudeChanging(decimal value);
        partial void OnIpLongitudeChanged();
        partial void OnIpIspChanging(string value);
        partial void OnIpIspChanged();
        partial void OnIpOrgChanging(string value);
        partial void OnIpOrgChanged();
        partial void OnIpAsnumChanging(int value);
        partial void OnIpAsnumChanged();
        partial void OnIpUserTypeChanging(string value);
        partial void OnIpUserTypeChanged();
        partial void OnIpCountryConfidenceChanging(string value);
        partial void OnIpCountryConfidenceChanged();
        partial void OnIpRegionConfidenceChanging(string value);
        partial void OnIpRegionConfidenceChanged();
        partial void OnIpCityConfidenceChanging(string value);
        partial void OnIpCityConfidenceChanged();
        partial void OnIpPostalConfidenceChanging(string value);
        partial void OnIpPostalConfidenceChanged();
        partial void OnIpPostalCodeChanging(string value);
        partial void OnIpPostalCodeChanged();
        partial void OnIpAccuracyRadiusChanging(int value);
        partial void OnIpAccuracyRadiusChanged();
        partial void OnIpNetSpeedCellChanging(string value);
        partial void OnIpNetSpeedCellChanged();
        partial void OnIpMetroCodeChanging(int value);
        partial void OnIpMetroCodeChanged();
        partial void OnIpAreaCodeChanging(int value);
        partial void OnIpAreaCodeChanged();
        partial void OnIpTimeZoneChanging(string value);
        partial void OnIpTimeZoneChanged();
        partial void OnIpRegionNameChanging(string value);
        partial void OnIpRegionNameChanged();
        partial void OnIpDomainChanging(string value);
        partial void OnIpDomainChanged();
        partial void OnIpCountryNameChanging(string value);
        partial void OnIpCountryNameChanged();
        partial void OnIpContinentCodeChanging(string value);
        partial void OnIpContinentCodeChanged();
        partial void OnIpCorporateProxyChanging(string value);
        partial void OnIpCorporateProxyChanged();
        partial void OnAnonymousProxyChanging(string value);
        partial void OnAnonymousProxyChanged();
        partial void OnProxyScoreChanging(int value);
        partial void OnProxyScoreChanged();
        partial void OnIsTransProxyChanging(string value);
        partial void OnIsTransProxyChanged();
        partial void OnFreeMailChanging(string value);
        partial void OnFreeMailChanged();
        partial void OnCarderEmailChanging(string value);
        partial void OnCarderEmailChanged();
        partial void OnHighRiskUsernameChanging(string value);
        partial void OnHighRiskUsernameChanged();
        partial void OnHighRiskPasswordChanging(string value);
        partial void OnHighRiskPasswordChanged();
        partial void OnBinMatchChanging(string value);
        partial void OnBinMatchChanged();
        partial void OnBinCountryChanging(string value);
        partial void OnBinCountryChanged();
        partial void OnBinNameMatchChanging(string value);
        partial void OnBinNameMatchChanged();
        partial void OnBinNameChanging(string value);
        partial void OnBinNameChanged();
        partial void OnBinPhoneMatchChanging(string value);
        partial void OnBinPhoneMatchChanged();
        partial void OnBinPhoneChanging(string value);
        partial void OnBinPhoneChanged();
        partial void OnCustomerPhoneInBillingLocationChanging(string value);
        partial void OnCustomerPhoneInBillingLocationChanged();
        partial void OnShipForwardChanging(string value);
        partial void OnShipForwardChanged();
        partial void OnCityPostalMatchChanging(string value);
        partial void OnCityPostalMatchChanged();
        partial void OnShipCityPostalMatchChanging(string value);
        partial void OnShipCityPostalMatchChanged();
        partial void OnScoreChanging(decimal value);
        partial void OnScoreChanged();
        partial void OnExplanationChanging(string value);
        partial void OnExplanationChanged();
        partial void OnRiskScoreChanging(decimal value);
        partial void OnRiskScoreChanged();
        partial void OnQueriesRemainingChanging(int value);
        partial void OnQueriesRemainingChanged();
        partial void OnMaxmindIdChanging(string value);
        partial void OnMaxmindIdChanged();
        partial void OnErrorChanging(string value);
        partial void OnErrorChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcOrderFraud()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryMatch in the schema.
        /// </summary>
        [Column(Name = @"country_match", Storage = "_CountryMatch", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CountryMatch
        {
            get
            {
                return this._CountryMatch;
            }
            set
            {
                if (this._CountryMatch != value)
                {
                    this.OnCountryMatchChanging(value);
                    this.SendPropertyChanging();
                    this._CountryMatch = value;
                    this.SendPropertyChanged("CountryMatch");
                    this.OnCountryMatchChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryCode in the schema.
        /// </summary>
        [Column(Name = @"country_code", Storage = "_CountryCode", CanBeNull = false, DbType = "VARCHAR(2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CountryCode
        {
            get
            {
                return this._CountryCode;
            }
            set
            {
                if (this._CountryCode != value)
                {
                    this.OnCountryCodeChanging(value);
                    this.SendPropertyChanging();
                    this._CountryCode = value;
                    this.SendPropertyChanged("CountryCode");
                    this.OnCountryCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HighRiskCountry in the schema.
        /// </summary>
        [Column(Name = @"high_risk_country", Storage = "_HighRiskCountry", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string HighRiskCountry
        {
            get
            {
                return this._HighRiskCountry;
            }
            set
            {
                if (this._HighRiskCountry != value)
                {
                    this.OnHighRiskCountryChanging(value);
                    this.SendPropertyChanging();
                    this._HighRiskCountry = value;
                    this.SendPropertyChanged("HighRiskCountry");
                    this.OnHighRiskCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Distance in the schema.
        /// </summary>
        [Column(Name = @"distance", Storage = "_Distance", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Distance
        {
            get
            {
                return this._Distance;
            }
            set
            {
                if (this._Distance != value)
                {
                    this.OnDistanceChanging(value);
                    this.SendPropertyChanging();
                    this._Distance = value;
                    this.SendPropertyChanged("Distance");
                    this.OnDistanceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpRegion in the schema.
        /// </summary>
        [Column(Name = @"ip_region", Storage = "_IpRegion", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpRegion
        {
            get
            {
                return this._IpRegion;
            }
            set
            {
                if (this._IpRegion != value)
                {
                    this.OnIpRegionChanging(value);
                    this.SendPropertyChanging();
                    this._IpRegion = value;
                    this.SendPropertyChanged("IpRegion");
                    this.OnIpRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpCity in the schema.
        /// </summary>
        [Column(Name = @"ip_city", Storage = "_IpCity", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpCity
        {
            get
            {
                return this._IpCity;
            }
            set
            {
                if (this._IpCity != value)
                {
                    this.OnIpCityChanging(value);
                    this.SendPropertyChanging();
                    this._IpCity = value;
                    this.SendPropertyChanged("IpCity");
                    this.OnIpCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpLatitude in the schema.
        /// </summary>
        [Column(Name = @"ip_latitude", Storage = "_IpLatitude", CanBeNull = false, DbType = "DECIMAL(10,6) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal IpLatitude
        {
            get
            {
                return this._IpLatitude;
            }
            set
            {
                if (this._IpLatitude != value)
                {
                    this.OnIpLatitudeChanging(value);
                    this.SendPropertyChanging();
                    this._IpLatitude = value;
                    this.SendPropertyChanged("IpLatitude");
                    this.OnIpLatitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpLongitude in the schema.
        /// </summary>
        [Column(Name = @"ip_longitude", Storage = "_IpLongitude", CanBeNull = false, DbType = "DECIMAL(10,6) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal IpLongitude
        {
            get
            {
                return this._IpLongitude;
            }
            set
            {
                if (this._IpLongitude != value)
                {
                    this.OnIpLongitudeChanging(value);
                    this.SendPropertyChanging();
                    this._IpLongitude = value;
                    this.SendPropertyChanged("IpLongitude");
                    this.OnIpLongitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpIsp in the schema.
        /// </summary>
        [Column(Name = @"ip_isp", Storage = "_IpIsp", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpIsp
        {
            get
            {
                return this._IpIsp;
            }
            set
            {
                if (this._IpIsp != value)
                {
                    this.OnIpIspChanging(value);
                    this.SendPropertyChanging();
                    this._IpIsp = value;
                    this.SendPropertyChanged("IpIsp");
                    this.OnIpIspChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpOrg in the schema.
        /// </summary>
        [Column(Name = @"ip_org", Storage = "_IpOrg", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpOrg
        {
            get
            {
                return this._IpOrg;
            }
            set
            {
                if (this._IpOrg != value)
                {
                    this.OnIpOrgChanging(value);
                    this.SendPropertyChanging();
                    this._IpOrg = value;
                    this.SendPropertyChanged("IpOrg");
                    this.OnIpOrgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpAsnum in the schema.
        /// </summary>
        [Column(Name = @"ip_asnum", Storage = "_IpAsnum", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IpAsnum
        {
            get
            {
                return this._IpAsnum;
            }
            set
            {
                if (this._IpAsnum != value)
                {
                    this.OnIpAsnumChanging(value);
                    this.SendPropertyChanging();
                    this._IpAsnum = value;
                    this.SendPropertyChanged("IpAsnum");
                    this.OnIpAsnumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpUserType in the schema.
        /// </summary>
        [Column(Name = @"ip_user_type", Storage = "_IpUserType", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpUserType
        {
            get
            {
                return this._IpUserType;
            }
            set
            {
                if (this._IpUserType != value)
                {
                    this.OnIpUserTypeChanging(value);
                    this.SendPropertyChanging();
                    this._IpUserType = value;
                    this.SendPropertyChanged("IpUserType");
                    this.OnIpUserTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpCountryConfidence in the schema.
        /// </summary>
        [Column(Name = @"ip_country_confidence", Storage = "_IpCountryConfidence", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpCountryConfidence
        {
            get
            {
                return this._IpCountryConfidence;
            }
            set
            {
                if (this._IpCountryConfidence != value)
                {
                    this.OnIpCountryConfidenceChanging(value);
                    this.SendPropertyChanging();
                    this._IpCountryConfidence = value;
                    this.SendPropertyChanged("IpCountryConfidence");
                    this.OnIpCountryConfidenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpRegionConfidence in the schema.
        /// </summary>
        [Column(Name = @"ip_region_confidence", Storage = "_IpRegionConfidence", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpRegionConfidence
        {
            get
            {
                return this._IpRegionConfidence;
            }
            set
            {
                if (this._IpRegionConfidence != value)
                {
                    this.OnIpRegionConfidenceChanging(value);
                    this.SendPropertyChanging();
                    this._IpRegionConfidence = value;
                    this.SendPropertyChanged("IpRegionConfidence");
                    this.OnIpRegionConfidenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpCityConfidence in the schema.
        /// </summary>
        [Column(Name = @"ip_city_confidence", Storage = "_IpCityConfidence", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpCityConfidence
        {
            get
            {
                return this._IpCityConfidence;
            }
            set
            {
                if (this._IpCityConfidence != value)
                {
                    this.OnIpCityConfidenceChanging(value);
                    this.SendPropertyChanging();
                    this._IpCityConfidence = value;
                    this.SendPropertyChanged("IpCityConfidence");
                    this.OnIpCityConfidenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpPostalConfidence in the schema.
        /// </summary>
        [Column(Name = @"ip_postal_confidence", Storage = "_IpPostalConfidence", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpPostalConfidence
        {
            get
            {
                return this._IpPostalConfidence;
            }
            set
            {
                if (this._IpPostalConfidence != value)
                {
                    this.OnIpPostalConfidenceChanging(value);
                    this.SendPropertyChanging();
                    this._IpPostalConfidence = value;
                    this.SendPropertyChanged("IpPostalConfidence");
                    this.OnIpPostalConfidenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpPostalCode in the schema.
        /// </summary>
        [Column(Name = @"ip_postal_code", Storage = "_IpPostalCode", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpPostalCode
        {
            get
            {
                return this._IpPostalCode;
            }
            set
            {
                if (this._IpPostalCode != value)
                {
                    this.OnIpPostalCodeChanging(value);
                    this.SendPropertyChanging();
                    this._IpPostalCode = value;
                    this.SendPropertyChanged("IpPostalCode");
                    this.OnIpPostalCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpAccuracyRadius in the schema.
        /// </summary>
        [Column(Name = @"ip_accuracy_radius", Storage = "_IpAccuracyRadius", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IpAccuracyRadius
        {
            get
            {
                return this._IpAccuracyRadius;
            }
            set
            {
                if (this._IpAccuracyRadius != value)
                {
                    this.OnIpAccuracyRadiusChanging(value);
                    this.SendPropertyChanging();
                    this._IpAccuracyRadius = value;
                    this.SendPropertyChanged("IpAccuracyRadius");
                    this.OnIpAccuracyRadiusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpNetSpeedCell in the schema.
        /// </summary>
        [Column(Name = @"ip_net_speed_cell", Storage = "_IpNetSpeedCell", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpNetSpeedCell
        {
            get
            {
                return this._IpNetSpeedCell;
            }
            set
            {
                if (this._IpNetSpeedCell != value)
                {
                    this.OnIpNetSpeedCellChanging(value);
                    this.SendPropertyChanging();
                    this._IpNetSpeedCell = value;
                    this.SendPropertyChanged("IpNetSpeedCell");
                    this.OnIpNetSpeedCellChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpMetroCode in the schema.
        /// </summary>
        [Column(Name = @"ip_metro_code", Storage = "_IpMetroCode", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IpMetroCode
        {
            get
            {
                return this._IpMetroCode;
            }
            set
            {
                if (this._IpMetroCode != value)
                {
                    this.OnIpMetroCodeChanging(value);
                    this.SendPropertyChanging();
                    this._IpMetroCode = value;
                    this.SendPropertyChanged("IpMetroCode");
                    this.OnIpMetroCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpAreaCode in the schema.
        /// </summary>
        [Column(Name = @"ip_area_code", Storage = "_IpAreaCode", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IpAreaCode
        {
            get
            {
                return this._IpAreaCode;
            }
            set
            {
                if (this._IpAreaCode != value)
                {
                    this.OnIpAreaCodeChanging(value);
                    this.SendPropertyChanging();
                    this._IpAreaCode = value;
                    this.SendPropertyChanged("IpAreaCode");
                    this.OnIpAreaCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpTimeZone in the schema.
        /// </summary>
        [Column(Name = @"ip_time_zone", Storage = "_IpTimeZone", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpTimeZone
        {
            get
            {
                return this._IpTimeZone;
            }
            set
            {
                if (this._IpTimeZone != value)
                {
                    this.OnIpTimeZoneChanging(value);
                    this.SendPropertyChanging();
                    this._IpTimeZone = value;
                    this.SendPropertyChanged("IpTimeZone");
                    this.OnIpTimeZoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpRegionName in the schema.
        /// </summary>
        [Column(Name = @"ip_region_name", Storage = "_IpRegionName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpRegionName
        {
            get
            {
                return this._IpRegionName;
            }
            set
            {
                if (this._IpRegionName != value)
                {
                    this.OnIpRegionNameChanging(value);
                    this.SendPropertyChanging();
                    this._IpRegionName = value;
                    this.SendPropertyChanged("IpRegionName");
                    this.OnIpRegionNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpDomain in the schema.
        /// </summary>
        [Column(Name = @"ip_domain", Storage = "_IpDomain", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpDomain
        {
            get
            {
                return this._IpDomain;
            }
            set
            {
                if (this._IpDomain != value)
                {
                    this.OnIpDomainChanging(value);
                    this.SendPropertyChanging();
                    this._IpDomain = value;
                    this.SendPropertyChanged("IpDomain");
                    this.OnIpDomainChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpCountryName in the schema.
        /// </summary>
        [Column(Name = @"ip_country_name", Storage = "_IpCountryName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpCountryName
        {
            get
            {
                return this._IpCountryName;
            }
            set
            {
                if (this._IpCountryName != value)
                {
                    this.OnIpCountryNameChanging(value);
                    this.SendPropertyChanging();
                    this._IpCountryName = value;
                    this.SendPropertyChanged("IpCountryName");
                    this.OnIpCountryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpContinentCode in the schema.
        /// </summary>
        [Column(Name = @"ip_continent_code", Storage = "_IpContinentCode", CanBeNull = false, DbType = "VARCHAR(2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpContinentCode
        {
            get
            {
                return this._IpContinentCode;
            }
            set
            {
                if (this._IpContinentCode != value)
                {
                    this.OnIpContinentCodeChanging(value);
                    this.SendPropertyChanging();
                    this._IpContinentCode = value;
                    this.SendPropertyChanged("IpContinentCode");
                    this.OnIpContinentCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IpCorporateProxy in the schema.
        /// </summary>
        [Column(Name = @"ip_corporate_proxy", Storage = "_IpCorporateProxy", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IpCorporateProxy
        {
            get
            {
                return this._IpCorporateProxy;
            }
            set
            {
                if (this._IpCorporateProxy != value)
                {
                    this.OnIpCorporateProxyChanging(value);
                    this.SendPropertyChanging();
                    this._IpCorporateProxy = value;
                    this.SendPropertyChanged("IpCorporateProxy");
                    this.OnIpCorporateProxyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AnonymousProxy in the schema.
        /// </summary>
        [Column(Name = @"anonymous_proxy", Storage = "_AnonymousProxy", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AnonymousProxy
        {
            get
            {
                return this._AnonymousProxy;
            }
            set
            {
                if (this._AnonymousProxy != value)
                {
                    this.OnAnonymousProxyChanging(value);
                    this.SendPropertyChanging();
                    this._AnonymousProxy = value;
                    this.SendPropertyChanged("AnonymousProxy");
                    this.OnAnonymousProxyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProxyScore in the schema.
        /// </summary>
        [Column(Name = @"proxy_score", Storage = "_ProxyScore", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProxyScore
        {
            get
            {
                return this._ProxyScore;
            }
            set
            {
                if (this._ProxyScore != value)
                {
                    this.OnProxyScoreChanging(value);
                    this.SendPropertyChanging();
                    this._ProxyScore = value;
                    this.SendPropertyChanged("ProxyScore");
                    this.OnProxyScoreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsTransProxy in the schema.
        /// </summary>
        [Column(Name = @"is_trans_proxy", Storage = "_IsTransProxy", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IsTransProxy
        {
            get
            {
                return this._IsTransProxy;
            }
            set
            {
                if (this._IsTransProxy != value)
                {
                    this.OnIsTransProxyChanging(value);
                    this.SendPropertyChanging();
                    this._IsTransProxy = value;
                    this.SendPropertyChanged("IsTransProxy");
                    this.OnIsTransProxyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FreeMail in the schema.
        /// </summary>
        [Column(Name = @"free_mail", Storage = "_FreeMail", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FreeMail
        {
            get
            {
                return this._FreeMail;
            }
            set
            {
                if (this._FreeMail != value)
                {
                    this.OnFreeMailChanging(value);
                    this.SendPropertyChanging();
                    this._FreeMail = value;
                    this.SendPropertyChanged("FreeMail");
                    this.OnFreeMailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CarderEmail in the schema.
        /// </summary>
        [Column(Name = @"carder_email", Storage = "_CarderEmail", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CarderEmail
        {
            get
            {
                return this._CarderEmail;
            }
            set
            {
                if (this._CarderEmail != value)
                {
                    this.OnCarderEmailChanging(value);
                    this.SendPropertyChanging();
                    this._CarderEmail = value;
                    this.SendPropertyChanged("CarderEmail");
                    this.OnCarderEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HighRiskUsername in the schema.
        /// </summary>
        [Column(Name = @"high_risk_username", Storage = "_HighRiskUsername", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string HighRiskUsername
        {
            get
            {
                return this._HighRiskUsername;
            }
            set
            {
                if (this._HighRiskUsername != value)
                {
                    this.OnHighRiskUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._HighRiskUsername = value;
                    this.SendPropertyChanged("HighRiskUsername");
                    this.OnHighRiskUsernameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HighRiskPassword in the schema.
        /// </summary>
        [Column(Name = @"high_risk_password", Storage = "_HighRiskPassword", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string HighRiskPassword
        {
            get
            {
                return this._HighRiskPassword;
            }
            set
            {
                if (this._HighRiskPassword != value)
                {
                    this.OnHighRiskPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._HighRiskPassword = value;
                    this.SendPropertyChanged("HighRiskPassword");
                    this.OnHighRiskPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BinMatch in the schema.
        /// </summary>
        [Column(Name = @"bin_match", Storage = "_BinMatch", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BinMatch
        {
            get
            {
                return this._BinMatch;
            }
            set
            {
                if (this._BinMatch != value)
                {
                    this.OnBinMatchChanging(value);
                    this.SendPropertyChanging();
                    this._BinMatch = value;
                    this.SendPropertyChanged("BinMatch");
                    this.OnBinMatchChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BinCountry in the schema.
        /// </summary>
        [Column(Name = @"bin_country", Storage = "_BinCountry", CanBeNull = false, DbType = "VARCHAR(2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BinCountry
        {
            get
            {
                return this._BinCountry;
            }
            set
            {
                if (this._BinCountry != value)
                {
                    this.OnBinCountryChanging(value);
                    this.SendPropertyChanging();
                    this._BinCountry = value;
                    this.SendPropertyChanged("BinCountry");
                    this.OnBinCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BinNameMatch in the schema.
        /// </summary>
        [Column(Name = @"bin_name_match", Storage = "_BinNameMatch", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BinNameMatch
        {
            get
            {
                return this._BinNameMatch;
            }
            set
            {
                if (this._BinNameMatch != value)
                {
                    this.OnBinNameMatchChanging(value);
                    this.SendPropertyChanging();
                    this._BinNameMatch = value;
                    this.SendPropertyChanged("BinNameMatch");
                    this.OnBinNameMatchChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BinName in the schema.
        /// </summary>
        [Column(Name = @"bin_name", Storage = "_BinName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BinName
        {
            get
            {
                return this._BinName;
            }
            set
            {
                if (this._BinName != value)
                {
                    this.OnBinNameChanging(value);
                    this.SendPropertyChanging();
                    this._BinName = value;
                    this.SendPropertyChanged("BinName");
                    this.OnBinNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BinPhoneMatch in the schema.
        /// </summary>
        [Column(Name = @"bin_phone_match", Storage = "_BinPhoneMatch", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BinPhoneMatch
        {
            get
            {
                return this._BinPhoneMatch;
            }
            set
            {
                if (this._BinPhoneMatch != value)
                {
                    this.OnBinPhoneMatchChanging(value);
                    this.SendPropertyChanging();
                    this._BinPhoneMatch = value;
                    this.SendPropertyChanged("BinPhoneMatch");
                    this.OnBinPhoneMatchChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BinPhone in the schema.
        /// </summary>
        [Column(Name = @"bin_phone", Storage = "_BinPhone", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BinPhone
        {
            get
            {
                return this._BinPhone;
            }
            set
            {
                if (this._BinPhone != value)
                {
                    this.OnBinPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._BinPhone = value;
                    this.SendPropertyChanged("BinPhone");
                    this.OnBinPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerPhoneInBillingLocation in the schema.
        /// </summary>
        [Column(Name = @"customer_phone_in_billing_location", Storage = "_CustomerPhoneInBillingLocation", CanBeNull = false, DbType = "VARCHAR(8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CustomerPhoneInBillingLocation
        {
            get
            {
                return this._CustomerPhoneInBillingLocation;
            }
            set
            {
                if (this._CustomerPhoneInBillingLocation != value)
                {
                    this.OnCustomerPhoneInBillingLocationChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerPhoneInBillingLocation = value;
                    this.SendPropertyChanged("CustomerPhoneInBillingLocation");
                    this.OnCustomerPhoneInBillingLocationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipForward in the schema.
        /// </summary>
        [Column(Name = @"ship_forward", Storage = "_ShipForward", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShipForward
        {
            get
            {
                return this._ShipForward;
            }
            set
            {
                if (this._ShipForward != value)
                {
                    this.OnShipForwardChanging(value);
                    this.SendPropertyChanging();
                    this._ShipForward = value;
                    this.SendPropertyChanged("ShipForward");
                    this.OnShipForwardChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CityPostalMatch in the schema.
        /// </summary>
        [Column(Name = @"city_postal_match", Storage = "_CityPostalMatch", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CityPostalMatch
        {
            get
            {
                return this._CityPostalMatch;
            }
            set
            {
                if (this._CityPostalMatch != value)
                {
                    this.OnCityPostalMatchChanging(value);
                    this.SendPropertyChanging();
                    this._CityPostalMatch = value;
                    this.SendPropertyChanged("CityPostalMatch");
                    this.OnCityPostalMatchChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipCityPostalMatch in the schema.
        /// </summary>
        [Column(Name = @"ship_city_postal_match", Storage = "_ShipCityPostalMatch", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShipCityPostalMatch
        {
            get
            {
                return this._ShipCityPostalMatch;
            }
            set
            {
                if (this._ShipCityPostalMatch != value)
                {
                    this.OnShipCityPostalMatchChanging(value);
                    this.SendPropertyChanging();
                    this._ShipCityPostalMatch = value;
                    this.SendPropertyChanged("ShipCityPostalMatch");
                    this.OnShipCityPostalMatchChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Score in the schema.
        /// </summary>
        [Column(Name = @"score", Storage = "_Score", CanBeNull = false, DbType = "DECIMAL(10,5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Score
        {
            get
            {
                return this._Score;
            }
            set
            {
                if (this._Score != value)
                {
                    this.OnScoreChanging(value);
                    this.SendPropertyChanging();
                    this._Score = value;
                    this.SendPropertyChanged("Score");
                    this.OnScoreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Explanation in the schema.
        /// </summary>
        [Column(Name = @"explanation", Storage = "_Explanation", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Explanation
        {
            get
            {
                return this._Explanation;
            }
            set
            {
                if (this._Explanation != value)
                {
                    this.OnExplanationChanging(value);
                    this.SendPropertyChanging();
                    this._Explanation = value;
                    this.SendPropertyChanged("Explanation");
                    this.OnExplanationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RiskScore in the schema.
        /// </summary>
        [Column(Name = @"risk_score", Storage = "_RiskScore", CanBeNull = false, DbType = "DECIMAL(10,5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal RiskScore
        {
            get
            {
                return this._RiskScore;
            }
            set
            {
                if (this._RiskScore != value)
                {
                    this.OnRiskScoreChanging(value);
                    this.SendPropertyChanging();
                    this._RiskScore = value;
                    this.SendPropertyChanged("RiskScore");
                    this.OnRiskScoreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QueriesRemaining in the schema.
        /// </summary>
        [Column(Name = @"queries_remaining", Storage = "_QueriesRemaining", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int QueriesRemaining
        {
            get
            {
                return this._QueriesRemaining;
            }
            set
            {
                if (this._QueriesRemaining != value)
                {
                    this.OnQueriesRemainingChanging(value);
                    this.SendPropertyChanging();
                    this._QueriesRemaining = value;
                    this.SendPropertyChanged("QueriesRemaining");
                    this.OnQueriesRemainingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MaxmindId in the schema.
        /// </summary>
        [Column(Name = @"maxmind_id", Storage = "_MaxmindId", CanBeNull = false, DbType = "VARCHAR(8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MaxmindId
        {
            get
            {
                return this._MaxmindId;
            }
            set
            {
                if (this._MaxmindId != value)
                {
                    this.OnMaxmindIdChanging(value);
                    this.SendPropertyChanging();
                    this._MaxmindId = value;
                    this.SendPropertyChanged("MaxmindId");
                    this.OnMaxmindIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Error in the schema.
        /// </summary>
        [Column(Name = @"error", Storage = "_Error", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Error
        {
            get
            {
                return this._Error;
            }
            set
            {
                if (this._Error != value)
                {
                    this.OnErrorChanging(value);
                    this.SendPropertyChanging();
                    this._Error = value;
                    this.SendPropertyChanged("Error");
                    this.OnErrorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOrderField in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_order_field")]
    public partial class OcOrderField : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderId;

        private int _CustomFieldId;

        private int _CustomFieldValueId;

        private int _Name;

        private string _Value;

        private int _SortOrder;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnCustomFieldIdChanging(int value);
        partial void OnCustomFieldIdChanged();
        partial void OnCustomFieldValueIdChanging(int value);
        partial void OnCustomFieldValueIdChanged();
        partial void OnNameChanging(int value);
        partial void OnNameChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcOrderField()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomFieldId in the schema.
        /// </summary>
        [Column(Name = @"custom_field_id", Storage = "_CustomFieldId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CustomFieldId
        {
            get
            {
                return this._CustomFieldId;
            }
            set
            {
                if (this._CustomFieldId != value)
                {
                    this.OnCustomFieldIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomFieldId = value;
                    this.SendPropertyChanged("CustomFieldId");
                    this.OnCustomFieldIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomFieldValueId in the schema.
        /// </summary>
        [Column(Name = @"custom_field_value_id", Storage = "_CustomFieldValueId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CustomFieldValueId
        {
            get
            {
                return this._CustomFieldValueId;
            }
            set
            {
                if (this._CustomFieldValueId != value)
                {
                    this.OnCustomFieldValueIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomFieldValueId = value;
                    this.SendPropertyChanged("CustomFieldValueId");
                    this.OnCustomFieldValueIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "INT(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Name = @"value", Storage = "_Value", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOrderDownload in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_order_download")]
    public partial class OcOrderDownload : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderDownloadId;

        private int _OrderId;

        private int _OrderProductId;

        private string _Name;

        private string _Filename;

        private string _Mask;

        private int _Remaining = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderDownloadIdChanging(int value);
        partial void OnOrderDownloadIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnOrderProductIdChanging(int value);
        partial void OnOrderProductIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnMaskChanging(string value);
        partial void OnMaskChanged();
        partial void OnRemainingChanging(int value);
        partial void OnRemainingChanged();
        #endregion

        public OcOrderDownload()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderDownloadId in the schema.
        /// </summary>
        [Column(Name = @"order_download_id", Storage = "_OrderDownloadId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderDownloadId
        {
            get
            {
                return this._OrderDownloadId;
            }
            set
            {
                if (this._OrderDownloadId != value)
                {
                    this.OnOrderDownloadIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDownloadId = value;
                    this.SendPropertyChanged("OrderDownloadId");
                    this.OnOrderDownloadIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderProductId in the schema.
        /// </summary>
        [Column(Name = @"order_product_id", Storage = "_OrderProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderProductId
        {
            get
            {
                return this._OrderProductId;
            }
            set
            {
                if (this._OrderProductId != value)
                {
                    this.OnOrderProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderProductId = value;
                    this.SendPropertyChanged("OrderProductId");
                    this.OnOrderProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Filename in the schema.
        /// </summary>
        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mask in the schema.
        /// </summary>
        [Column(Name = @"mask", Storage = "_Mask", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Mask
        {
            get
            {
                return this._Mask;
            }
            set
            {
                if (this._Mask != value)
                {
                    this.OnMaskChanging(value);
                    this.SendPropertyChanging();
                    this._Mask = value;
                    this.SendPropertyChanged("Mask");
                    this.OnMaskChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remaining in the schema.
        /// </summary>
        [Column(Name = @"remaining", Storage = "_Remaining", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Remaining
        {
            get
            {
                return this._Remaining;
            }
            set
            {
                if (this._Remaining != value)
                {
                    this.OnRemainingChanging(value);
                    this.SendPropertyChanging();
                    this._Remaining = value;
                    this.SendPropertyChanged("Remaining");
                    this.OnRemainingChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOrder in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_order")]
    public partial class OcOrder : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderId;

        private int _InvoiceNo = 0;

        private string _InvoicePrefix;

        private int _StoreId = 0;

        private string _StoreName;

        private string _StoreUrl;

        private int _CustomerId = 0;

        private int _CustomerGroupId = 0;

        private string _Firstname;

        private string _Lastname;

        private string _Email;

        private string _Telephone;

        private string _Fax;

        private string _PaymentFirstname;

        private string _PaymentLastname;

        private string _PaymentCompany;

        private string _PaymentCompanyId;

        private string _PaymentTaxId;

        private string _PaymentAddress1;

        private string _PaymentAddress2;

        private string _PaymentCity;

        private string _PaymentPostcode;

        private string _PaymentCountry;

        private int _PaymentCountryId;

        private string _PaymentZone;

        private int _PaymentZoneId;

        private string _PaymentAddressFormat;

        private string _PaymentMethod;

        private string _PaymentCode;

        private string _ShippingFirstname;

        private string _ShippingLastname;

        private string _ShippingCompany;

        private string _ShippingAddress1;

        private string _ShippingAddress2;

        private string _ShippingCity;

        private string _ShippingPostcode;

        private string _ShippingCountry;

        private int _ShippingCountryId;

        private string _ShippingZone;

        private int _ShippingZoneId;

        private string _ShippingAddressFormat;

        private string _ShippingMethod;

        private string _ShippingCode;

        private string _Comment;

        private decimal _Total = 0.0000m;

        private int _OrderStatusId = 0;

        private int _AffiliateId;

        private decimal _Commission;

        private int _LanguageId;

        private int _CurrencyId;

        private string _CurrencyCode;

        private decimal _CurrencyValue = 1.00000000m;

        private string _Ip;

        private string _ForwardedIp;

        private string _UserAgent;

        private string _AcceptLanguage;

        private System.DateTime _DateAdded;

        private System.DateTime _DateModified;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnInvoiceNoChanging(int value);
        partial void OnInvoiceNoChanged();
        partial void OnInvoicePrefixChanging(string value);
        partial void OnInvoicePrefixChanged();
        partial void OnStoreIdChanging(int value);
        partial void OnStoreIdChanged();
        partial void OnStoreNameChanging(string value);
        partial void OnStoreNameChanged();
        partial void OnStoreUrlChanging(string value);
        partial void OnStoreUrlChanged();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnCustomerGroupIdChanging(int value);
        partial void OnCustomerGroupIdChanged();
        partial void OnFirstnameChanging(string value);
        partial void OnFirstnameChanged();
        partial void OnLastnameChanging(string value);
        partial void OnLastnameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnTelephoneChanging(string value);
        partial void OnTelephoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnPaymentFirstnameChanging(string value);
        partial void OnPaymentFirstnameChanged();
        partial void OnPaymentLastnameChanging(string value);
        partial void OnPaymentLastnameChanged();
        partial void OnPaymentCompanyChanging(string value);
        partial void OnPaymentCompanyChanged();
        partial void OnPaymentCompanyIdChanging(string value);
        partial void OnPaymentCompanyIdChanged();
        partial void OnPaymentTaxIdChanging(string value);
        partial void OnPaymentTaxIdChanged();
        partial void OnPaymentAddress1Changing(string value);
        partial void OnPaymentAddress1Changed();
        partial void OnPaymentAddress2Changing(string value);
        partial void OnPaymentAddress2Changed();
        partial void OnPaymentCityChanging(string value);
        partial void OnPaymentCityChanged();
        partial void OnPaymentPostcodeChanging(string value);
        partial void OnPaymentPostcodeChanged();
        partial void OnPaymentCountryChanging(string value);
        partial void OnPaymentCountryChanged();
        partial void OnPaymentCountryIdChanging(int value);
        partial void OnPaymentCountryIdChanged();
        partial void OnPaymentZoneChanging(string value);
        partial void OnPaymentZoneChanged();
        partial void OnPaymentZoneIdChanging(int value);
        partial void OnPaymentZoneIdChanged();
        partial void OnPaymentAddressFormatChanging(string value);
        partial void OnPaymentAddressFormatChanged();
        partial void OnPaymentMethodChanging(string value);
        partial void OnPaymentMethodChanged();
        partial void OnPaymentCodeChanging(string value);
        partial void OnPaymentCodeChanged();
        partial void OnShippingFirstnameChanging(string value);
        partial void OnShippingFirstnameChanged();
        partial void OnShippingLastnameChanging(string value);
        partial void OnShippingLastnameChanged();
        partial void OnShippingCompanyChanging(string value);
        partial void OnShippingCompanyChanged();
        partial void OnShippingAddress1Changing(string value);
        partial void OnShippingAddress1Changed();
        partial void OnShippingAddress2Changing(string value);
        partial void OnShippingAddress2Changed();
        partial void OnShippingCityChanging(string value);
        partial void OnShippingCityChanged();
        partial void OnShippingPostcodeChanging(string value);
        partial void OnShippingPostcodeChanged();
        partial void OnShippingCountryChanging(string value);
        partial void OnShippingCountryChanged();
        partial void OnShippingCountryIdChanging(int value);
        partial void OnShippingCountryIdChanged();
        partial void OnShippingZoneChanging(string value);
        partial void OnShippingZoneChanged();
        partial void OnShippingZoneIdChanging(int value);
        partial void OnShippingZoneIdChanged();
        partial void OnShippingAddressFormatChanging(string value);
        partial void OnShippingAddressFormatChanged();
        partial void OnShippingMethodChanging(string value);
        partial void OnShippingMethodChanged();
        partial void OnShippingCodeChanging(string value);
        partial void OnShippingCodeChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnTotalChanging(decimal value);
        partial void OnTotalChanged();
        partial void OnOrderStatusIdChanging(int value);
        partial void OnOrderStatusIdChanged();
        partial void OnAffiliateIdChanging(int value);
        partial void OnAffiliateIdChanged();
        partial void OnCommissionChanging(decimal value);
        partial void OnCommissionChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnCurrencyIdChanging(int value);
        partial void OnCurrencyIdChanged();
        partial void OnCurrencyCodeChanging(string value);
        partial void OnCurrencyCodeChanged();
        partial void OnCurrencyValueChanging(decimal value);
        partial void OnCurrencyValueChanged();
        partial void OnIpChanging(string value);
        partial void OnIpChanged();
        partial void OnForwardedIpChanging(string value);
        partial void OnForwardedIpChanged();
        partial void OnUserAgentChanging(string value);
        partial void OnUserAgentChanged();
        partial void OnAcceptLanguageChanging(string value);
        partial void OnAcceptLanguageChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        partial void OnDateModifiedChanging(System.DateTime value);
        partial void OnDateModifiedChanged();
        #endregion

        public OcOrder()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoiceNo in the schema.
        /// </summary>
        [Column(Name = @"invoice_no", Storage = "_InvoiceNo", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InvoiceNo
        {
            get
            {
                return this._InvoiceNo;
            }
            set
            {
                if (this._InvoiceNo != value)
                {
                    this.OnInvoiceNoChanging(value);
                    this.SendPropertyChanging();
                    this._InvoiceNo = value;
                    this.SendPropertyChanged("InvoiceNo");
                    this.OnInvoiceNoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoicePrefix in the schema.
        /// </summary>
        [Column(Name = @"invoice_prefix", Storage = "_InvoicePrefix", CanBeNull = false, DbType = "VARCHAR(26) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string InvoicePrefix
        {
            get
            {
                return this._InvoicePrefix;
            }
            set
            {
                if (this._InvoicePrefix != value)
                {
                    this.OnInvoicePrefixChanging(value);
                    this.SendPropertyChanging();
                    this._InvoicePrefix = value;
                    this.SendPropertyChanged("InvoicePrefix");
                    this.OnInvoicePrefixChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreName in the schema.
        /// </summary>
        [Column(Name = @"store_name", Storage = "_StoreName", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string StoreName
        {
            get
            {
                return this._StoreName;
            }
            set
            {
                if (this._StoreName != value)
                {
                    this.OnStoreNameChanging(value);
                    this.SendPropertyChanging();
                    this._StoreName = value;
                    this.SendPropertyChanged("StoreName");
                    this.OnStoreNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreUrl in the schema.
        /// </summary>
        [Column(Name = @"store_url", Storage = "_StoreUrl", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string StoreUrl
        {
            get
            {
                return this._StoreUrl;
            }
            set
            {
                if (this._StoreUrl != value)
                {
                    this.OnStoreUrlChanging(value);
                    this.SendPropertyChanging();
                    this._StoreUrl = value;
                    this.SendPropertyChanged("StoreUrl");
                    this.OnStoreUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerGroupId in the schema.
        /// </summary>
        [Column(Name = @"customer_group_id", Storage = "_CustomerGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerGroupId
        {
            get
            {
                return this._CustomerGroupId;
            }
            set
            {
                if (this._CustomerGroupId != value)
                {
                    this.OnCustomerGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerGroupId = value;
                    this.SendPropertyChanged("CustomerGroupId");
                    this.OnCustomerGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Firstname in the schema.
        /// </summary>
        [Column(Name = @"firstname", Storage = "_Firstname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Firstname
        {
            get
            {
                return this._Firstname;
            }
            set
            {
                if (this._Firstname != value)
                {
                    this.OnFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Firstname = value;
                    this.SendPropertyChanged("Firstname");
                    this.OnFirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Lastname in the schema.
        /// </summary>
        [Column(Name = @"lastname", Storage = "_Lastname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Lastname
        {
            get
            {
                return this._Lastname;
            }
            set
            {
                if (this._Lastname != value)
                {
                    this.OnLastnameChanging(value);
                    this.SendPropertyChanging();
                    this._Lastname = value;
                    this.SendPropertyChanged("Lastname");
                    this.OnLastnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(96) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telephone in the schema.
        /// </summary>
        [Column(Name = @"telephone", Storage = "_Telephone", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Telephone
        {
            get
            {
                return this._Telephone;
            }
            set
            {
                if (this._Telephone != value)
                {
                    this.OnTelephoneChanging(value);
                    this.SendPropertyChanging();
                    this._Telephone = value;
                    this.SendPropertyChanged("Telephone");
                    this.OnTelephoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"fax", Storage = "_Fax", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentFirstname in the schema.
        /// </summary>
        [Column(Name = @"payment_firstname", Storage = "_PaymentFirstname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentFirstname
        {
            get
            {
                return this._PaymentFirstname;
            }
            set
            {
                if (this._PaymentFirstname != value)
                {
                    this.OnPaymentFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentFirstname = value;
                    this.SendPropertyChanged("PaymentFirstname");
                    this.OnPaymentFirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentLastname in the schema.
        /// </summary>
        [Column(Name = @"payment_lastname", Storage = "_PaymentLastname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentLastname
        {
            get
            {
                return this._PaymentLastname;
            }
            set
            {
                if (this._PaymentLastname != value)
                {
                    this.OnPaymentLastnameChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentLastname = value;
                    this.SendPropertyChanged("PaymentLastname");
                    this.OnPaymentLastnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentCompany in the schema.
        /// </summary>
        [Column(Name = @"payment_company", Storage = "_PaymentCompany", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentCompany
        {
            get
            {
                return this._PaymentCompany;
            }
            set
            {
                if (this._PaymentCompany != value)
                {
                    this.OnPaymentCompanyChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentCompany = value;
                    this.SendPropertyChanged("PaymentCompany");
                    this.OnPaymentCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentCompanyId in the schema.
        /// </summary>
        [Column(Name = @"payment_company_id", Storage = "_PaymentCompanyId", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentCompanyId
        {
            get
            {
                return this._PaymentCompanyId;
            }
            set
            {
                if (this._PaymentCompanyId != value)
                {
                    this.OnPaymentCompanyIdChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentCompanyId = value;
                    this.SendPropertyChanged("PaymentCompanyId");
                    this.OnPaymentCompanyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentTaxId in the schema.
        /// </summary>
        [Column(Name = @"payment_tax_id", Storage = "_PaymentTaxId", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentTaxId
        {
            get
            {
                return this._PaymentTaxId;
            }
            set
            {
                if (this._PaymentTaxId != value)
                {
                    this.OnPaymentTaxIdChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentTaxId = value;
                    this.SendPropertyChanged("PaymentTaxId");
                    this.OnPaymentTaxIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentAddress1 in the schema.
        /// </summary>
        [Column(Name = @"payment_address_1", Storage = "_PaymentAddress1", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentAddress1
        {
            get
            {
                return this._PaymentAddress1;
            }
            set
            {
                if (this._PaymentAddress1 != value)
                {
                    this.OnPaymentAddress1Changing(value);
                    this.SendPropertyChanging();
                    this._PaymentAddress1 = value;
                    this.SendPropertyChanged("PaymentAddress1");
                    this.OnPaymentAddress1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentAddress2 in the schema.
        /// </summary>
        [Column(Name = @"payment_address_2", Storage = "_PaymentAddress2", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentAddress2
        {
            get
            {
                return this._PaymentAddress2;
            }
            set
            {
                if (this._PaymentAddress2 != value)
                {
                    this.OnPaymentAddress2Changing(value);
                    this.SendPropertyChanging();
                    this._PaymentAddress2 = value;
                    this.SendPropertyChanged("PaymentAddress2");
                    this.OnPaymentAddress2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentCity in the schema.
        /// </summary>
        [Column(Name = @"payment_city", Storage = "_PaymentCity", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentCity
        {
            get
            {
                return this._PaymentCity;
            }
            set
            {
                if (this._PaymentCity != value)
                {
                    this.OnPaymentCityChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentCity = value;
                    this.SendPropertyChanged("PaymentCity");
                    this.OnPaymentCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentPostcode in the schema.
        /// </summary>
        [Column(Name = @"payment_postcode", Storage = "_PaymentPostcode", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentPostcode
        {
            get
            {
                return this._PaymentPostcode;
            }
            set
            {
                if (this._PaymentPostcode != value)
                {
                    this.OnPaymentPostcodeChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentPostcode = value;
                    this.SendPropertyChanged("PaymentPostcode");
                    this.OnPaymentPostcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentCountry in the schema.
        /// </summary>
        [Column(Name = @"payment_country", Storage = "_PaymentCountry", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentCountry
        {
            get
            {
                return this._PaymentCountry;
            }
            set
            {
                if (this._PaymentCountry != value)
                {
                    this.OnPaymentCountryChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentCountry = value;
                    this.SendPropertyChanged("PaymentCountry");
                    this.OnPaymentCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentCountryId in the schema.
        /// </summary>
        [Column(Name = @"payment_country_id", Storage = "_PaymentCountryId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PaymentCountryId
        {
            get
            {
                return this._PaymentCountryId;
            }
            set
            {
                if (this._PaymentCountryId != value)
                {
                    this.OnPaymentCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentCountryId = value;
                    this.SendPropertyChanged("PaymentCountryId");
                    this.OnPaymentCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentZone in the schema.
        /// </summary>
        [Column(Name = @"payment_zone", Storage = "_PaymentZone", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentZone
        {
            get
            {
                return this._PaymentZone;
            }
            set
            {
                if (this._PaymentZone != value)
                {
                    this.OnPaymentZoneChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentZone = value;
                    this.SendPropertyChanged("PaymentZone");
                    this.OnPaymentZoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentZoneId in the schema.
        /// </summary>
        [Column(Name = @"payment_zone_id", Storage = "_PaymentZoneId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PaymentZoneId
        {
            get
            {
                return this._PaymentZoneId;
            }
            set
            {
                if (this._PaymentZoneId != value)
                {
                    this.OnPaymentZoneIdChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentZoneId = value;
                    this.SendPropertyChanged("PaymentZoneId");
                    this.OnPaymentZoneIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentAddressFormat in the schema.
        /// </summary>
        [Column(Name = @"payment_address_format", Storage = "_PaymentAddressFormat", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentAddressFormat
        {
            get
            {
                return this._PaymentAddressFormat;
            }
            set
            {
                if (this._PaymentAddressFormat != value)
                {
                    this.OnPaymentAddressFormatChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentAddressFormat = value;
                    this.SendPropertyChanged("PaymentAddressFormat");
                    this.OnPaymentAddressFormatChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentMethod in the schema.
        /// </summary>
        [Column(Name = @"payment_method", Storage = "_PaymentMethod", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentMethod
        {
            get
            {
                return this._PaymentMethod;
            }
            set
            {
                if (this._PaymentMethod != value)
                {
                    this.OnPaymentMethodChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentMethod = value;
                    this.SendPropertyChanged("PaymentMethod");
                    this.OnPaymentMethodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentCode in the schema.
        /// </summary>
        [Column(Name = @"payment_code", Storage = "_PaymentCode", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentCode
        {
            get
            {
                return this._PaymentCode;
            }
            set
            {
                if (this._PaymentCode != value)
                {
                    this.OnPaymentCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentCode = value;
                    this.SendPropertyChanged("PaymentCode");
                    this.OnPaymentCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingFirstname in the schema.
        /// </summary>
        [Column(Name = @"shipping_firstname", Storage = "_ShippingFirstname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShippingFirstname
        {
            get
            {
                return this._ShippingFirstname;
            }
            set
            {
                if (this._ShippingFirstname != value)
                {
                    this.OnShippingFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingFirstname = value;
                    this.SendPropertyChanged("ShippingFirstname");
                    this.OnShippingFirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingLastname in the schema.
        /// </summary>
        [Column(Name = @"shipping_lastname", Storage = "_ShippingLastname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShippingLastname
        {
            get
            {
                return this._ShippingLastname;
            }
            set
            {
                if (this._ShippingLastname != value)
                {
                    this.OnShippingLastnameChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingLastname = value;
                    this.SendPropertyChanged("ShippingLastname");
                    this.OnShippingLastnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingCompany in the schema.
        /// </summary>
        [Column(Name = @"shipping_company", Storage = "_ShippingCompany", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShippingCompany
        {
            get
            {
                return this._ShippingCompany;
            }
            set
            {
                if (this._ShippingCompany != value)
                {
                    this.OnShippingCompanyChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingCompany = value;
                    this.SendPropertyChanged("ShippingCompany");
                    this.OnShippingCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingAddress1 in the schema.
        /// </summary>
        [Column(Name = @"shipping_address_1", Storage = "_ShippingAddress1", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShippingAddress1
        {
            get
            {
                return this._ShippingAddress1;
            }
            set
            {
                if (this._ShippingAddress1 != value)
                {
                    this.OnShippingAddress1Changing(value);
                    this.SendPropertyChanging();
                    this._ShippingAddress1 = value;
                    this.SendPropertyChanged("ShippingAddress1");
                    this.OnShippingAddress1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingAddress2 in the schema.
        /// </summary>
        [Column(Name = @"shipping_address_2", Storage = "_ShippingAddress2", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShippingAddress2
        {
            get
            {
                return this._ShippingAddress2;
            }
            set
            {
                if (this._ShippingAddress2 != value)
                {
                    this.OnShippingAddress2Changing(value);
                    this.SendPropertyChanging();
                    this._ShippingAddress2 = value;
                    this.SendPropertyChanged("ShippingAddress2");
                    this.OnShippingAddress2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingCity in the schema.
        /// </summary>
        [Column(Name = @"shipping_city", Storage = "_ShippingCity", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShippingCity
        {
            get
            {
                return this._ShippingCity;
            }
            set
            {
                if (this._ShippingCity != value)
                {
                    this.OnShippingCityChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingCity = value;
                    this.SendPropertyChanged("ShippingCity");
                    this.OnShippingCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingPostcode in the schema.
        /// </summary>
        [Column(Name = @"shipping_postcode", Storage = "_ShippingPostcode", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShippingPostcode
        {
            get
            {
                return this._ShippingPostcode;
            }
            set
            {
                if (this._ShippingPostcode != value)
                {
                    this.OnShippingPostcodeChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingPostcode = value;
                    this.SendPropertyChanged("ShippingPostcode");
                    this.OnShippingPostcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingCountry in the schema.
        /// </summary>
        [Column(Name = @"shipping_country", Storage = "_ShippingCountry", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShippingCountry
        {
            get
            {
                return this._ShippingCountry;
            }
            set
            {
                if (this._ShippingCountry != value)
                {
                    this.OnShippingCountryChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingCountry = value;
                    this.SendPropertyChanged("ShippingCountry");
                    this.OnShippingCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingCountryId in the schema.
        /// </summary>
        [Column(Name = @"shipping_country_id", Storage = "_ShippingCountryId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ShippingCountryId
        {
            get
            {
                return this._ShippingCountryId;
            }
            set
            {
                if (this._ShippingCountryId != value)
                {
                    this.OnShippingCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingCountryId = value;
                    this.SendPropertyChanged("ShippingCountryId");
                    this.OnShippingCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingZone in the schema.
        /// </summary>
        [Column(Name = @"shipping_zone", Storage = "_ShippingZone", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShippingZone
        {
            get
            {
                return this._ShippingZone;
            }
            set
            {
                if (this._ShippingZone != value)
                {
                    this.OnShippingZoneChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingZone = value;
                    this.SendPropertyChanged("ShippingZone");
                    this.OnShippingZoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingZoneId in the schema.
        /// </summary>
        [Column(Name = @"shipping_zone_id", Storage = "_ShippingZoneId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ShippingZoneId
        {
            get
            {
                return this._ShippingZoneId;
            }
            set
            {
                if (this._ShippingZoneId != value)
                {
                    this.OnShippingZoneIdChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingZoneId = value;
                    this.SendPropertyChanged("ShippingZoneId");
                    this.OnShippingZoneIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingAddressFormat in the schema.
        /// </summary>
        [Column(Name = @"shipping_address_format", Storage = "_ShippingAddressFormat", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShippingAddressFormat
        {
            get
            {
                return this._ShippingAddressFormat;
            }
            set
            {
                if (this._ShippingAddressFormat != value)
                {
                    this.OnShippingAddressFormatChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingAddressFormat = value;
                    this.SendPropertyChanged("ShippingAddressFormat");
                    this.OnShippingAddressFormatChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingMethod in the schema.
        /// </summary>
        [Column(Name = @"shipping_method", Storage = "_ShippingMethod", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShippingMethod
        {
            get
            {
                return this._ShippingMethod;
            }
            set
            {
                if (this._ShippingMethod != value)
                {
                    this.OnShippingMethodChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingMethod = value;
                    this.SendPropertyChanged("ShippingMethod");
                    this.OnShippingMethodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippingCode in the schema.
        /// </summary>
        [Column(Name = @"shipping_code", Storage = "_ShippingCode", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShippingCode
        {
            get
            {
                return this._ShippingCode;
            }
            set
            {
                if (this._ShippingCode != value)
                {
                    this.OnShippingCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingCode = value;
                    this.SendPropertyChanged("ShippingCode");
                    this.OnShippingCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        [Column(Name = @"`comment`", Storage = "_Comment", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging();
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Total in the schema.
        /// </summary>
        [Column(Name = @"total", Storage = "_Total", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Total
        {
            get
            {
                return this._Total;
            }
            set
            {
                if (this._Total != value)
                {
                    this.OnTotalChanging(value);
                    this.SendPropertyChanging();
                    this._Total = value;
                    this.SendPropertyChanged("Total");
                    this.OnTotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderStatusId in the schema.
        /// </summary>
        [Column(Name = @"order_status_id", Storage = "_OrderStatusId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderStatusId
        {
            get
            {
                return this._OrderStatusId;
            }
            set
            {
                if (this._OrderStatusId != value)
                {
                    this.OnOrderStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderStatusId = value;
                    this.SendPropertyChanged("OrderStatusId");
                    this.OnOrderStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AffiliateId in the schema.
        /// </summary>
        [Column(Name = @"affiliate_id", Storage = "_AffiliateId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AffiliateId
        {
            get
            {
                return this._AffiliateId;
            }
            set
            {
                if (this._AffiliateId != value)
                {
                    this.OnAffiliateIdChanging(value);
                    this.SendPropertyChanging();
                    this._AffiliateId = value;
                    this.SendPropertyChanged("AffiliateId");
                    this.OnAffiliateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Commission in the schema.
        /// </summary>
        [Column(Name = @"commission", Storage = "_Commission", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Commission
        {
            get
            {
                return this._Commission;
            }
            set
            {
                if (this._Commission != value)
                {
                    this.OnCommissionChanging(value);
                    this.SendPropertyChanging();
                    this._Commission = value;
                    this.SendPropertyChanged("Commission");
                    this.OnCommissionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CurrencyId in the schema.
        /// </summary>
        [Column(Name = @"currency_id", Storage = "_CurrencyId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CurrencyId
        {
            get
            {
                return this._CurrencyId;
            }
            set
            {
                if (this._CurrencyId != value)
                {
                    this.OnCurrencyIdChanging(value);
                    this.SendPropertyChanging();
                    this._CurrencyId = value;
                    this.SendPropertyChanged("CurrencyId");
                    this.OnCurrencyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CurrencyCode in the schema.
        /// </summary>
        [Column(Name = @"currency_code", Storage = "_CurrencyCode", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CurrencyCode
        {
            get
            {
                return this._CurrencyCode;
            }
            set
            {
                if (this._CurrencyCode != value)
                {
                    this.OnCurrencyCodeChanging(value);
                    this.SendPropertyChanging();
                    this._CurrencyCode = value;
                    this.SendPropertyChanged("CurrencyCode");
                    this.OnCurrencyCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CurrencyValue in the schema.
        /// </summary>
        [Column(Name = @"currency_value", Storage = "_CurrencyValue", CanBeNull = false, DbType = "DECIMAL(15,8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal CurrencyValue
        {
            get
            {
                return this._CurrencyValue;
            }
            set
            {
                if (this._CurrencyValue != value)
                {
                    this.OnCurrencyValueChanging(value);
                    this.SendPropertyChanging();
                    this._CurrencyValue = value;
                    this.SendPropertyChanged("CurrencyValue");
                    this.OnCurrencyValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ip in the schema.
        /// </summary>
        [Column(Name = @"ip", Storage = "_Ip", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ip
        {
            get
            {
                return this._Ip;
            }
            set
            {
                if (this._Ip != value)
                {
                    this.OnIpChanging(value);
                    this.SendPropertyChanging();
                    this._Ip = value;
                    this.SendPropertyChanged("Ip");
                    this.OnIpChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ForwardedIp in the schema.
        /// </summary>
        [Column(Name = @"forwarded_ip", Storage = "_ForwardedIp", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ForwardedIp
        {
            get
            {
                return this._ForwardedIp;
            }
            set
            {
                if (this._ForwardedIp != value)
                {
                    this.OnForwardedIpChanging(value);
                    this.SendPropertyChanging();
                    this._ForwardedIp = value;
                    this.SendPropertyChanged("ForwardedIp");
                    this.OnForwardedIpChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserAgent in the schema.
        /// </summary>
        [Column(Name = @"user_agent", Storage = "_UserAgent", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserAgent
        {
            get
            {
                return this._UserAgent;
            }
            set
            {
                if (this._UserAgent != value)
                {
                    this.OnUserAgentChanging(value);
                    this.SendPropertyChanging();
                    this._UserAgent = value;
                    this.SendPropertyChanged("UserAgent");
                    this.OnUserAgentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcceptLanguage in the schema.
        /// </summary>
        [Column(Name = @"accept_language", Storage = "_AcceptLanguage", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AcceptLanguage
        {
            get
            {
                return this._AcceptLanguage;
            }
            set
            {
                if (this._AcceptLanguage != value)
                {
                    this.OnAcceptLanguageChanging(value);
                    this.SendPropertyChanging();
                    this._AcceptLanguage = value;
                    this.SendPropertyChanged("AcceptLanguage");
                    this.OnAcceptLanguageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateModified in the schema.
        /// </summary>
        [Column(Name = @"date_modified", Storage = "_DateModified", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateModified
        {
            get
            {
                return this._DateModified;
            }
            set
            {
                if (this._DateModified != value)
                {
                    this.OnDateModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._DateModified = value;
                    this.SendPropertyChanged("DateModified");
                    this.OnDateModifiedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOptionValueDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_option_value_description")]
    public partial class OcOptionValueDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OptionValueId;

        private int _LanguageId;

        private int _OptionId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOptionValueIdChanging(int value);
        partial void OnOptionValueIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnOptionIdChanging(int value);
        partial void OnOptionIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcOptionValueDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OptionValueId in the schema.
        /// </summary>
        [Column(Name = @"option_value_id", Storage = "_OptionValueId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int OptionValueId
        {
            get
            {
                return this._OptionValueId;
            }
            set
            {
                if (this._OptionValueId != value)
                {
                    this.OnOptionValueIdChanging(value);
                    this.SendPropertyChanging();
                    this._OptionValueId = value;
                    this.SendPropertyChanged("OptionValueId");
                    this.OnOptionValueIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OptionId in the schema.
        /// </summary>
        [Column(Name = @"option_id", Storage = "_OptionId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OptionId
        {
            get
            {
                return this._OptionId;
            }
            set
            {
                if (this._OptionId != value)
                {
                    this.OnOptionIdChanging(value);
                    this.SendPropertyChanging();
                    this._OptionId = value;
                    this.SendPropertyChanged("OptionId");
                    this.OnOptionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOptionValue in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_option_value")]
    public partial class OcOptionValue : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OptionValueId;

        private int _OptionId;

        private string _Image;

        private int _SortOrder;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOptionValueIdChanging(int value);
        partial void OnOptionValueIdChanged();
        partial void OnOptionIdChanging(int value);
        partial void OnOptionIdChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcOptionValue()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OptionValueId in the schema.
        /// </summary>
        [Column(Name = @"option_value_id", Storage = "_OptionValueId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OptionValueId
        {
            get
            {
                return this._OptionValueId;
            }
            set
            {
                if (this._OptionValueId != value)
                {
                    this.OnOptionValueIdChanging(value);
                    this.SendPropertyChanging();
                    this._OptionValueId = value;
                    this.SendPropertyChanged("OptionValueId");
                    this.OnOptionValueIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OptionId in the schema.
        /// </summary>
        [Column(Name = @"option_id", Storage = "_OptionId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OptionId
        {
            get
            {
                return this._OptionId;
            }
            set
            {
                if (this._OptionId != value)
                {
                    this.OnOptionIdChanging(value);
                    this.SendPropertyChanging();
                    this._OptionId = value;
                    this.SendPropertyChanged("OptionId");
                    this.OnOptionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [Column(Name = @"image", Storage = "_Image", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging();
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOptionDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_option_description")]
    public partial class OcOptionDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OptionId;

        private int _LanguageId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOptionIdChanging(int value);
        partial void OnOptionIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcOptionDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OptionId in the schema.
        /// </summary>
        [Column(Name = @"option_id", Storage = "_OptionId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int OptionId
        {
            get
            {
                return this._OptionId;
            }
            set
            {
                if (this._OptionId != value)
                {
                    this.OnOptionIdChanging(value);
                    this.SendPropertyChanging();
                    this._OptionId = value;
                    this.SendPropertyChanged("OptionId");
                    this.OnOptionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOption in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_option")]
    public partial class OcOption : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OptionId;

        private string _Type;

        private int _SortOrder;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOptionIdChanging(int value);
        partial void OnOptionIdChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcOption()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OptionId in the schema.
        /// </summary>
        [Column(Name = @"option_id", Storage = "_OptionId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OptionId
        {
            get
            {
                return this._OptionId;
            }
            set
            {
                if (this._OptionId != value)
                {
                    this.OnOptionIdChanging(value);
                    this.SendPropertyChanging();
                    this._OptionId = value;
                    this.SendPropertyChanged("OptionId");
                    this.OnOptionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcOpenbayFaq in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_openbay_faq")]
    public partial class OcOpenbayFaq : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Route;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnRouteChanging(string value);
        partial void OnRouteChanged();
        #endregion

        public OcOpenbayFaq()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Route in the schema.
        /// </summary>
        [Column(Name = @"route", Storage = "_Route", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Route
        {
            get
            {
                return this._Route;
            }
            set
            {
                if (this._Route != value)
                {
                    this.OnRouteChanging(value);
                    this.SendPropertyChanging();
                    this._Route = value;
                    this.SendPropertyChanged("Route");
                    this.OnRouteChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcManufacturerToStore in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_manufacturer_to_store")]
    public partial class OcManufacturerToStore : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ManufacturerId;

        private int _StoreId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnManufacturerIdChanging(int value);
        partial void OnManufacturerIdChanged();
        partial void OnStoreIdChanging(int value);
        partial void OnStoreIdChanged();
        #endregion

        public OcManufacturerToStore()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ManufacturerId in the schema.
        /// </summary>
        [Column(Name = @"manufacturer_id", Storage = "_ManufacturerId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ManufacturerId
        {
            get
            {
                return this._ManufacturerId;
            }
            set
            {
                if (this._ManufacturerId != value)
                {
                    this.OnManufacturerIdChanging(value);
                    this.SendPropertyChanging();
                    this._ManufacturerId = value;
                    this.SendPropertyChanged("ManufacturerId");
                    this.OnManufacturerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcManufacturer in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_manufacturer")]
    public partial class OcManufacturer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ManufacturerId;

        private string _Name;

        private string _Image;

        private int _SortOrder;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnManufacturerIdChanging(int value);
        partial void OnManufacturerIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcManufacturer()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ManufacturerId in the schema.
        /// </summary>
        [Column(Name = @"manufacturer_id", Storage = "_ManufacturerId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ManufacturerId
        {
            get
            {
                return this._ManufacturerId;
            }
            set
            {
                if (this._ManufacturerId != value)
                {
                    this.OnManufacturerIdChanging(value);
                    this.SendPropertyChanging();
                    this._ManufacturerId = value;
                    this.SendPropertyChanged("ManufacturerId");
                    this.OnManufacturerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [Column(Name = @"image", Storage = "_Image", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging();
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcLengthClassDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_length_class_description")]
    public partial class OcLengthClassDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LengthClassId;

        private int _LanguageId;

        private string _Title;

        private string _Unit;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLengthClassIdChanging(int value);
        partial void OnLengthClassIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnUnitChanging(string value);
        partial void OnUnitChanged();
        #endregion

        public OcLengthClassDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LengthClassId in the schema.
        /// </summary>
        [Column(Name = @"length_class_id", Storage = "_LengthClassId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int LengthClassId
        {
            get
            {
                return this._LengthClassId;
            }
            set
            {
                if (this._LengthClassId != value)
                {
                    this.OnLengthClassIdChanging(value);
                    this.SendPropertyChanging();
                    this._LengthClassId = value;
                    this.SendPropertyChanged("LengthClassId");
                    this.OnLengthClassIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Unit in the schema.
        /// </summary>
        [Column(Name = @"unit", Storage = "_Unit", CanBeNull = false, DbType = "VARCHAR(4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Unit
        {
            get
            {
                return this._Unit;
            }
            set
            {
                if (this._Unit != value)
                {
                    this.OnUnitChanging(value);
                    this.SendPropertyChanging();
                    this._Unit = value;
                    this.SendPropertyChanged("Unit");
                    this.OnUnitChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcLengthClass in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_length_class")]
    public partial class OcLengthClass : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LengthClassId;

        private decimal _Value;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLengthClassIdChanging(int value);
        partial void OnLengthClassIdChanged();
        partial void OnValueChanging(decimal value);
        partial void OnValueChanged();
        #endregion

        public OcLengthClass()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LengthClassId in the schema.
        /// </summary>
        [Column(Name = @"length_class_id", Storage = "_LengthClassId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int LengthClassId
        {
            get
            {
                return this._LengthClassId;
            }
            set
            {
                if (this._LengthClassId != value)
                {
                    this.OnLengthClassIdChanging(value);
                    this.SendPropertyChanging();
                    this._LengthClassId = value;
                    this.SendPropertyChanged("LengthClassId");
                    this.OnLengthClassIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Name = @"value", Storage = "_Value", CanBeNull = false, DbType = "DECIMAL(15,8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcLayoutRoute in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_layout_route")]
    public partial class OcLayoutRoute : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LayoutRouteId;

        private int _LayoutId;

        private int _StoreId;

        private string _Route;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLayoutRouteIdChanging(int value);
        partial void OnLayoutRouteIdChanged();
        partial void OnLayoutIdChanging(int value);
        partial void OnLayoutIdChanged();
        partial void OnStoreIdChanging(int value);
        partial void OnStoreIdChanged();
        partial void OnRouteChanging(string value);
        partial void OnRouteChanged();
        #endregion

        public OcLayoutRoute()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LayoutRouteId in the schema.
        /// </summary>
        [Column(Name = @"layout_route_id", Storage = "_LayoutRouteId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int LayoutRouteId
        {
            get
            {
                return this._LayoutRouteId;
            }
            set
            {
                if (this._LayoutRouteId != value)
                {
                    this.OnLayoutRouteIdChanging(value);
                    this.SendPropertyChanging();
                    this._LayoutRouteId = value;
                    this.SendPropertyChanged("LayoutRouteId");
                    this.OnLayoutRouteIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LayoutId in the schema.
        /// </summary>
        [Column(Name = @"layout_id", Storage = "_LayoutId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LayoutId
        {
            get
            {
                return this._LayoutId;
            }
            set
            {
                if (this._LayoutId != value)
                {
                    this.OnLayoutIdChanging(value);
                    this.SendPropertyChanging();
                    this._LayoutId = value;
                    this.SendPropertyChanged("LayoutId");
                    this.OnLayoutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Route in the schema.
        /// </summary>
        [Column(Name = @"route", Storage = "_Route", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Route
        {
            get
            {
                return this._Route;
            }
            set
            {
                if (this._Route != value)
                {
                    this.OnRouteChanging(value);
                    this.SendPropertyChanging();
                    this._Route = value;
                    this.SendPropertyChanged("Route");
                    this.OnRouteChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcLayout in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_layout")]
    public partial class OcLayout : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LayoutId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLayoutIdChanging(int value);
        partial void OnLayoutIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcLayout()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LayoutId in the schema.
        /// </summary>
        [Column(Name = @"layout_id", Storage = "_LayoutId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int LayoutId
        {
            get
            {
                return this._LayoutId;
            }
            set
            {
                if (this._LayoutId != value)
                {
                    this.OnLayoutIdChanging(value);
                    this.SendPropertyChanging();
                    this._LayoutId = value;
                    this.SendPropertyChanged("LayoutId");
                    this.OnLayoutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcLanguage in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_language")]
    public partial class OcLanguage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LanguageId;

        private string _Name;

        private string _Code;

        private string _Locale;

        private string _Image;

        private string _Directory;

        private string _Filename;

        private int _SortOrder = 0;

        private bool _Status;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnLocaleChanging(string value);
        partial void OnLocaleChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        partial void OnDirectoryChanging(string value);
        partial void OnDirectoryChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        #endregion

        public OcLanguage()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Locale in the schema.
        /// </summary>
        [Column(Name = @"locale", Storage = "_Locale", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Locale
        {
            get
            {
                return this._Locale;
            }
            set
            {
                if (this._Locale != value)
                {
                    this.OnLocaleChanging(value);
                    this.SendPropertyChanging();
                    this._Locale = value;
                    this.SendPropertyChanged("Locale");
                    this.OnLocaleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [Column(Name = @"image", Storage = "_Image", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging();
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Directory in the schema.
        /// </summary>
        [Column(Name = @"`directory`", Storage = "_Directory", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Directory
        {
            get
            {
                return this._Directory;
            }
            set
            {
                if (this._Directory != value)
                {
                    this.OnDirectoryChanging(value);
                    this.SendPropertyChanging();
                    this._Directory = value;
                    this.SendPropertyChanged("Directory");
                    this.OnDirectoryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Filename in the schema.
        /// </summary>
        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcInformationToStore in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_information_to_store")]
    public partial class OcInformationToStore : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _InformationId;

        private int _StoreId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnInformationIdChanging(int value);
        partial void OnInformationIdChanged();
        partial void OnStoreIdChanging(int value);
        partial void OnStoreIdChanged();
        #endregion

        public OcInformationToStore()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for InformationId in the schema.
        /// </summary>
        [Column(Name = @"information_id", Storage = "_InformationId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int InformationId
        {
            get
            {
                return this._InformationId;
            }
            set
            {
                if (this._InformationId != value)
                {
                    this.OnInformationIdChanging(value);
                    this.SendPropertyChanging();
                    this._InformationId = value;
                    this.SendPropertyChanged("InformationId");
                    this.OnInformationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcInformationToLayout in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_information_to_layout")]
    public partial class OcInformationToLayout : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _InformationId;

        private int _StoreId;

        private int _LayoutId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnInformationIdChanging(int value);
        partial void OnInformationIdChanged();
        partial void OnStoreIdChanging(int value);
        partial void OnStoreIdChanged();
        partial void OnLayoutIdChanging(int value);
        partial void OnLayoutIdChanged();
        #endregion

        public OcInformationToLayout()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for InformationId in the schema.
        /// </summary>
        [Column(Name = @"information_id", Storage = "_InformationId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int InformationId
        {
            get
            {
                return this._InformationId;
            }
            set
            {
                if (this._InformationId != value)
                {
                    this.OnInformationIdChanging(value);
                    this.SendPropertyChanging();
                    this._InformationId = value;
                    this.SendPropertyChanged("InformationId");
                    this.OnInformationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LayoutId in the schema.
        /// </summary>
        [Column(Name = @"layout_id", Storage = "_LayoutId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LayoutId
        {
            get
            {
                return this._LayoutId;
            }
            set
            {
                if (this._LayoutId != value)
                {
                    this.OnLayoutIdChanging(value);
                    this.SendPropertyChanging();
                    this._LayoutId = value;
                    this.SendPropertyChanged("LayoutId");
                    this.OnLayoutIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcInformationDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_information_description")]
    public partial class OcInformationDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _InformationId;

        private int _LanguageId;

        private string _Title;

        private string _Description;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnInformationIdChanging(int value);
        partial void OnInformationIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public OcInformationDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for InformationId in the schema.
        /// </summary>
        [Column(Name = @"information_id", Storage = "_InformationId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int InformationId
        {
            get
            {
                return this._InformationId;
            }
            set
            {
                if (this._InformationId != value)
                {
                    this.OnInformationIdChanging(value);
                    this.SendPropertyChanging();
                    this._InformationId = value;
                    this.SendPropertyChanged("InformationId");
                    this.OnInformationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcInformation in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_information")]
    public partial class OcInformation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _InformationId;

        private int _Top = 0;

        private int _Bottom = 0;

        private int _SortOrder = 0;

        private bool _Status = true;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnInformationIdChanging(int value);
        partial void OnInformationIdChanged();
        partial void OnTopChanging(int value);
        partial void OnTopChanged();
        partial void OnBottomChanging(int value);
        partial void OnBottomChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        #endregion

        public OcInformation()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for InformationId in the schema.
        /// </summary>
        [Column(Name = @"information_id", Storage = "_InformationId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int InformationId
        {
            get
            {
                return this._InformationId;
            }
            set
            {
                if (this._InformationId != value)
                {
                    this.OnInformationIdChanging(value);
                    this.SendPropertyChanging();
                    this._InformationId = value;
                    this.SendPropertyChanged("InformationId");
                    this.OnInformationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Top in the schema.
        /// </summary>
        [Column(Name = @"top", Storage = "_Top", CanBeNull = false, DbType = "INT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Top
        {
            get
            {
                return this._Top;
            }
            set
            {
                if (this._Top != value)
                {
                    this.OnTopChanging(value);
                    this.SendPropertyChanging();
                    this._Top = value;
                    this.SendPropertyChanged("Top");
                    this.OnTopChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Bottom in the schema.
        /// </summary>
        [Column(Name = @"bottom", Storage = "_Bottom", CanBeNull = false, DbType = "INT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Bottom
        {
            get
            {
                return this._Bottom;
            }
            set
            {
                if (this._Bottom != value)
                {
                    this.OnBottomChanging(value);
                    this.SendPropertyChanging();
                    this._Bottom = value;
                    this.SendPropertyChanged("Bottom");
                    this.OnBottomChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcGeoZone in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_geo_zone")]
    public partial class OcGeoZone : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _GeoZoneId;

        private string _Name;

        private string _Description;

        private System.DateTime _DateModified;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnGeoZoneIdChanging(int value);
        partial void OnGeoZoneIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDateModifiedChanging(System.DateTime value);
        partial void OnDateModifiedChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcGeoZone()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for GeoZoneId in the schema.
        /// </summary>
        [Column(Name = @"geo_zone_id", Storage = "_GeoZoneId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int GeoZoneId
        {
            get
            {
                return this._GeoZoneId;
            }
            set
            {
                if (this._GeoZoneId != value)
                {
                    this.OnGeoZoneIdChanging(value);
                    this.SendPropertyChanging();
                    this._GeoZoneId = value;
                    this.SendPropertyChanged("GeoZoneId");
                    this.OnGeoZoneIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateModified in the schema.
        /// </summary>
        [Column(Name = @"date_modified", Storage = "_DateModified", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateModified
        {
            get
            {
                return this._DateModified;
            }
            set
            {
                if (this._DateModified != value)
                {
                    this.OnDateModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._DateModified = value;
                    this.SendPropertyChanged("DateModified");
                    this.OnDateModifiedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcFilterGroupDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_filter_group_description")]
    public partial class OcFilterGroupDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _FilterGroupId;

        private int _LanguageId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnFilterGroupIdChanging(int value);
        partial void OnFilterGroupIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcFilterGroupDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for FilterGroupId in the schema.
        /// </summary>
        [Column(Name = @"filter_group_id", Storage = "_FilterGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int FilterGroupId
        {
            get
            {
                return this._FilterGroupId;
            }
            set
            {
                if (this._FilterGroupId != value)
                {
                    this.OnFilterGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._FilterGroupId = value;
                    this.SendPropertyChanged("FilterGroupId");
                    this.OnFilterGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcFilterGroup in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_filter_group")]
    public partial class OcFilterGroup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _FilterGroupId;

        private int _SortOrder;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnFilterGroupIdChanging(int value);
        partial void OnFilterGroupIdChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcFilterGroup()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for FilterGroupId in the schema.
        /// </summary>
        [Column(Name = @"filter_group_id", Storage = "_FilterGroupId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int FilterGroupId
        {
            get
            {
                return this._FilterGroupId;
            }
            set
            {
                if (this._FilterGroupId != value)
                {
                    this.OnFilterGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._FilterGroupId = value;
                    this.SendPropertyChanged("FilterGroupId");
                    this.OnFilterGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcFilterDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_filter_description")]
    public partial class OcFilterDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _FilterId;

        private int _LanguageId;

        private int _FilterGroupId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnFilterIdChanging(int value);
        partial void OnFilterIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnFilterGroupIdChanging(int value);
        partial void OnFilterGroupIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcFilterDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for FilterId in the schema.
        /// </summary>
        [Column(Name = @"filter_id", Storage = "_FilterId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int FilterId
        {
            get
            {
                return this._FilterId;
            }
            set
            {
                if (this._FilterId != value)
                {
                    this.OnFilterIdChanging(value);
                    this.SendPropertyChanging();
                    this._FilterId = value;
                    this.SendPropertyChanged("FilterId");
                    this.OnFilterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FilterGroupId in the schema.
        /// </summary>
        [Column(Name = @"filter_group_id", Storage = "_FilterGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int FilterGroupId
        {
            get
            {
                return this._FilterGroupId;
            }
            set
            {
                if (this._FilterGroupId != value)
                {
                    this.OnFilterGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._FilterGroupId = value;
                    this.SendPropertyChanged("FilterGroupId");
                    this.OnFilterGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcFilter in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_filter")]
    public partial class OcFilter : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _FilterId;

        private int _FilterGroupId;

        private int _SortOrder;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnFilterIdChanging(int value);
        partial void OnFilterIdChanged();
        partial void OnFilterGroupIdChanging(int value);
        partial void OnFilterGroupIdChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcFilter()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for FilterId in the schema.
        /// </summary>
        [Column(Name = @"filter_id", Storage = "_FilterId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int FilterId
        {
            get
            {
                return this._FilterId;
            }
            set
            {
                if (this._FilterId != value)
                {
                    this.OnFilterIdChanging(value);
                    this.SendPropertyChanging();
                    this._FilterId = value;
                    this.SendPropertyChanged("FilterId");
                    this.OnFilterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FilterGroupId in the schema.
        /// </summary>
        [Column(Name = @"filter_group_id", Storage = "_FilterGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int FilterGroupId
        {
            get
            {
                return this._FilterGroupId;
            }
            set
            {
                if (this._FilterGroupId != value)
                {
                    this.OnFilterGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._FilterGroupId = value;
                    this.SendPropertyChanged("FilterGroupId");
                    this.OnFilterGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcExtension in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_extension")]
    public partial class OcExtension : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ExtensionId;

        private string _Type;

        private string _Code;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnExtensionIdChanging(int value);
        partial void OnExtensionIdChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        #endregion

        public OcExtension()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ExtensionId in the schema.
        /// </summary>
        [Column(Name = @"extension_id", Storage = "_ExtensionId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ExtensionId
        {
            get
            {
                return this._ExtensionId;
            }
            set
            {
                if (this._ExtensionId != value)
                {
                    this.OnExtensionIdChanging(value);
                    this.SendPropertyChanging();
                    this._ExtensionId = value;
                    this.SendPropertyChanged("ExtensionId");
                    this.OnExtensionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcDownloadDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_download_description")]
    public partial class OcDownloadDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _DownloadId;

        private int _LanguageId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDownloadIdChanging(int value);
        partial void OnDownloadIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcDownloadDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DownloadId in the schema.
        /// </summary>
        [Column(Name = @"download_id", Storage = "_DownloadId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int DownloadId
        {
            get
            {
                return this._DownloadId;
            }
            set
            {
                if (this._DownloadId != value)
                {
                    this.OnDownloadIdChanging(value);
                    this.SendPropertyChanging();
                    this._DownloadId = value;
                    this.SendPropertyChanged("DownloadId");
                    this.OnDownloadIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcDownload in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_download")]
    public partial class OcDownload : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _DownloadId;

        private string _Filename;

        private string _Mask;

        private int _Remaining = 0;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDownloadIdChanging(int value);
        partial void OnDownloadIdChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnMaskChanging(string value);
        partial void OnMaskChanged();
        partial void OnRemainingChanging(int value);
        partial void OnRemainingChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcDownload()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DownloadId in the schema.
        /// </summary>
        [Column(Name = @"download_id", Storage = "_DownloadId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int DownloadId
        {
            get
            {
                return this._DownloadId;
            }
            set
            {
                if (this._DownloadId != value)
                {
                    this.OnDownloadIdChanging(value);
                    this.SendPropertyChanging();
                    this._DownloadId = value;
                    this.SendPropertyChanged("DownloadId");
                    this.OnDownloadIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Filename in the schema.
        /// </summary>
        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mask in the schema.
        /// </summary>
        [Column(Name = @"mask", Storage = "_Mask", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Mask
        {
            get
            {
                return this._Mask;
            }
            set
            {
                if (this._Mask != value)
                {
                    this.OnMaskChanging(value);
                    this.SendPropertyChanging();
                    this._Mask = value;
                    this.SendPropertyChanged("Mask");
                    this.OnMaskChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remaining in the schema.
        /// </summary>
        [Column(Name = @"remaining", Storage = "_Remaining", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Remaining
        {
            get
            {
                return this._Remaining;
            }
            set
            {
                if (this._Remaining != value)
                {
                    this.OnRemainingChanging(value);
                    this.SendPropertyChanging();
                    this._Remaining = value;
                    this.SendPropertyChanged("Remaining");
                    this.OnRemainingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomerTransaction in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_customer_transaction")]
    public partial class OcCustomerTransaction : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomerTransactionId;

        private int _CustomerId;

        private int _OrderId;

        private string _Description;

        private decimal _Amount;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerTransactionIdChanging(int value);
        partial void OnCustomerTransactionIdChanged();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcCustomerTransaction()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerTransactionId in the schema.
        /// </summary>
        [Column(Name = @"customer_transaction_id", Storage = "_CustomerTransactionId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CustomerTransactionId
        {
            get
            {
                return this._CustomerTransactionId;
            }
            set
            {
                if (this._CustomerTransactionId != value)
                {
                    this.OnCustomerTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerTransactionId = value;
                    this.SendPropertyChanged("CustomerTransactionId");
                    this.OnCustomerTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"amount", Storage = "_Amount", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomerReward in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_customer_reward")]
    public partial class OcCustomerReward : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomerRewardId;

        private int _CustomerId = 0;

        private int _OrderId = 0;

        private string _Description;

        private int _Points = 0;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerRewardIdChanging(int value);
        partial void OnCustomerRewardIdChanged();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPointsChanging(int value);
        partial void OnPointsChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcCustomerReward()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerRewardId in the schema.
        /// </summary>
        [Column(Name = @"customer_reward_id", Storage = "_CustomerRewardId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CustomerRewardId
        {
            get
            {
                return this._CustomerRewardId;
            }
            set
            {
                if (this._CustomerRewardId != value)
                {
                    this.OnCustomerRewardIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerRewardId = value;
                    this.SendPropertyChanged("CustomerRewardId");
                    this.OnCustomerRewardIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Points in the schema.
        /// </summary>
        [Column(Name = @"points", Storage = "_Points", CanBeNull = false, DbType = "INT(8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Points
        {
            get
            {
                return this._Points;
            }
            set
            {
                if (this._Points != value)
                {
                    this.OnPointsChanging(value);
                    this.SendPropertyChanging();
                    this._Points = value;
                    this.SendPropertyChanged("Points");
                    this.OnPointsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomerOnline in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_customer_online")]
    public partial class OcCustomerOnline : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Ip;

        private int _CustomerId;

        private string _Url;

        private string _Referer;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIpChanging(string value);
        partial void OnIpChanged();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnRefererChanging(string value);
        partial void OnRefererChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcCustomerOnline()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Ip in the schema.
        /// </summary>
        [Column(Name = @"ip", Storage = "_Ip", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", IsPrimaryKey = true)]
        public string Ip
        {
            get
            {
                return this._Ip;
            }
            set
            {
                if (this._Ip != value)
                {
                    this.OnIpChanging(value);
                    this.SendPropertyChanging();
                    this._Ip = value;
                    this.SendPropertyChanged("Ip");
                    this.OnIpChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Url in the schema.
        /// </summary>
        [Column(Name = @"url", Storage = "_Url", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging();
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Referer in the schema.
        /// </summary>
        [Column(Name = @"referer", Storage = "_Referer", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Referer
        {
            get
            {
                return this._Referer;
            }
            set
            {
                if (this._Referer != value)
                {
                    this.OnRefererChanging(value);
                    this.SendPropertyChanging();
                    this._Referer = value;
                    this.SendPropertyChanged("Referer");
                    this.OnRefererChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomerIp in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_customer_ip")]
    public partial class OcCustomerIp : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomerIpId;

        private int _CustomerId;

        private string _Ip;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerIpIdChanging(int value);
        partial void OnCustomerIpIdChanged();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnIpChanging(string value);
        partial void OnIpChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcCustomerIp()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerIpId in the schema.
        /// </summary>
        [Column(Name = @"customer_ip_id", Storage = "_CustomerIpId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CustomerIpId
        {
            get
            {
                return this._CustomerIpId;
            }
            set
            {
                if (this._CustomerIpId != value)
                {
                    this.OnCustomerIpIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerIpId = value;
                    this.SendPropertyChanged("CustomerIpId");
                    this.OnCustomerIpIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ip in the schema.
        /// </summary>
        [Column(Name = @"ip", Storage = "_Ip", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ip
        {
            get
            {
                return this._Ip;
            }
            set
            {
                if (this._Ip != value)
                {
                    this.OnIpChanging(value);
                    this.SendPropertyChanging();
                    this._Ip = value;
                    this.SendPropertyChanged("Ip");
                    this.OnIpChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomerHistory in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_customer_history")]
    public partial class OcCustomerHistory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomerHistoryId;

        private int _CustomerId;

        private string _Comment;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerHistoryIdChanging(int value);
        partial void OnCustomerHistoryIdChanged();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcCustomerHistory()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerHistoryId in the schema.
        /// </summary>
        [Column(Name = @"customer_history_id", Storage = "_CustomerHistoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CustomerHistoryId
        {
            get
            {
                return this._CustomerHistoryId;
            }
            set
            {
                if (this._CustomerHistoryId != value)
                {
                    this.OnCustomerHistoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerHistoryId = value;
                    this.SendPropertyChanged("CustomerHistoryId");
                    this.OnCustomerHistoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        [Column(Name = @"`comment`", Storage = "_Comment", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging();
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomerGroupDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_customer_group_description")]
    public partial class OcCustomerGroupDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomerGroupId;

        private int _LanguageId;

        private string _Name;

        private string _Description;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerGroupIdChanging(int value);
        partial void OnCustomerGroupIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public OcCustomerGroupDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerGroupId in the schema.
        /// </summary>
        [Column(Name = @"customer_group_id", Storage = "_CustomerGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CustomerGroupId
        {
            get
            {
                return this._CustomerGroupId;
            }
            set
            {
                if (this._CustomerGroupId != value)
                {
                    this.OnCustomerGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerGroupId = value;
                    this.SendPropertyChanged("CustomerGroupId");
                    this.OnCustomerGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomerGroup in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_customer_group")]
    public partial class OcCustomerGroup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomerGroupId;

        private int _Approval;

        private int _CompanyIdDisplay;

        private int _CompanyIdRequired;

        private int _TaxIdDisplay;

        private int _TaxIdRequired;

        private int _SortOrder;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerGroupIdChanging(int value);
        partial void OnCustomerGroupIdChanged();
        partial void OnApprovalChanging(int value);
        partial void OnApprovalChanged();
        partial void OnCompanyIdDisplayChanging(int value);
        partial void OnCompanyIdDisplayChanged();
        partial void OnCompanyIdRequiredChanging(int value);
        partial void OnCompanyIdRequiredChanged();
        partial void OnTaxIdDisplayChanging(int value);
        partial void OnTaxIdDisplayChanged();
        partial void OnTaxIdRequiredChanging(int value);
        partial void OnTaxIdRequiredChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcCustomerGroup()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerGroupId in the schema.
        /// </summary>
        [Column(Name = @"customer_group_id", Storage = "_CustomerGroupId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CustomerGroupId
        {
            get
            {
                return this._CustomerGroupId;
            }
            set
            {
                if (this._CustomerGroupId != value)
                {
                    this.OnCustomerGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerGroupId = value;
                    this.SendPropertyChanged("CustomerGroupId");
                    this.OnCustomerGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approval in the schema.
        /// </summary>
        [Column(Name = @"approval", Storage = "_Approval", CanBeNull = false, DbType = "INT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Approval
        {
            get
            {
                return this._Approval;
            }
            set
            {
                if (this._Approval != value)
                {
                    this.OnApprovalChanging(value);
                    this.SendPropertyChanging();
                    this._Approval = value;
                    this.SendPropertyChanged("Approval");
                    this.OnApprovalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyIdDisplay in the schema.
        /// </summary>
        [Column(Name = @"company_id_display", Storage = "_CompanyIdDisplay", CanBeNull = false, DbType = "INT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CompanyIdDisplay
        {
            get
            {
                return this._CompanyIdDisplay;
            }
            set
            {
                if (this._CompanyIdDisplay != value)
                {
                    this.OnCompanyIdDisplayChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyIdDisplay = value;
                    this.SendPropertyChanged("CompanyIdDisplay");
                    this.OnCompanyIdDisplayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyIdRequired in the schema.
        /// </summary>
        [Column(Name = @"company_id_required", Storage = "_CompanyIdRequired", CanBeNull = false, DbType = "INT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CompanyIdRequired
        {
            get
            {
                return this._CompanyIdRequired;
            }
            set
            {
                if (this._CompanyIdRequired != value)
                {
                    this.OnCompanyIdRequiredChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyIdRequired = value;
                    this.SendPropertyChanged("CompanyIdRequired");
                    this.OnCompanyIdRequiredChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxIdDisplay in the schema.
        /// </summary>
        [Column(Name = @"tax_id_display", Storage = "_TaxIdDisplay", CanBeNull = false, DbType = "INT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int TaxIdDisplay
        {
            get
            {
                return this._TaxIdDisplay;
            }
            set
            {
                if (this._TaxIdDisplay != value)
                {
                    this.OnTaxIdDisplayChanging(value);
                    this.SendPropertyChanging();
                    this._TaxIdDisplay = value;
                    this.SendPropertyChanged("TaxIdDisplay");
                    this.OnTaxIdDisplayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxIdRequired in the schema.
        /// </summary>
        [Column(Name = @"tax_id_required", Storage = "_TaxIdRequired", CanBeNull = false, DbType = "INT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int TaxIdRequired
        {
            get
            {
                return this._TaxIdRequired;
            }
            set
            {
                if (this._TaxIdRequired != value)
                {
                    this.OnTaxIdRequiredChanging(value);
                    this.SendPropertyChanging();
                    this._TaxIdRequired = value;
                    this.SendPropertyChanged("TaxIdRequired");
                    this.OnTaxIdRequiredChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomerField in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_customer_field")]
    public partial class OcCustomerField : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomerId;

        private int _CustomFieldId;

        private int _CustomFieldValueId;

        private int _Name;

        private string _Value;

        private int _SortOrder;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnCustomFieldIdChanging(int value);
        partial void OnCustomFieldIdChanged();
        partial void OnCustomFieldValueIdChanging(int value);
        partial void OnCustomFieldValueIdChanged();
        partial void OnNameChanging(int value);
        partial void OnNameChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcCustomerField()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomFieldId in the schema.
        /// </summary>
        [Column(Name = @"custom_field_id", Storage = "_CustomFieldId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CustomFieldId
        {
            get
            {
                return this._CustomFieldId;
            }
            set
            {
                if (this._CustomFieldId != value)
                {
                    this.OnCustomFieldIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomFieldId = value;
                    this.SendPropertyChanged("CustomFieldId");
                    this.OnCustomFieldIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomFieldValueId in the schema.
        /// </summary>
        [Column(Name = @"custom_field_value_id", Storage = "_CustomFieldValueId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CustomFieldValueId
        {
            get
            {
                return this._CustomFieldValueId;
            }
            set
            {
                if (this._CustomFieldValueId != value)
                {
                    this.OnCustomFieldValueIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomFieldValueId = value;
                    this.SendPropertyChanged("CustomFieldValueId");
                    this.OnCustomFieldValueIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "INT(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Name = @"value", Storage = "_Value", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomerBanIp in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_customer_ban_ip")]
    public partial class OcCustomerBanIp : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomerBanIpId;

        private string _Ip;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerBanIpIdChanging(int value);
        partial void OnCustomerBanIpIdChanged();
        partial void OnIpChanging(string value);
        partial void OnIpChanged();
        #endregion

        public OcCustomerBanIp()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerBanIpId in the schema.
        /// </summary>
        [Column(Name = @"customer_ban_ip_id", Storage = "_CustomerBanIpId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CustomerBanIpId
        {
            get
            {
                return this._CustomerBanIpId;
            }
            set
            {
                if (this._CustomerBanIpId != value)
                {
                    this.OnCustomerBanIpIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerBanIpId = value;
                    this.SendPropertyChanged("CustomerBanIpId");
                    this.OnCustomerBanIpIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ip in the schema.
        /// </summary>
        [Column(Name = @"ip", Storage = "_Ip", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ip
        {
            get
            {
                return this._Ip;
            }
            set
            {
                if (this._Ip != value)
                {
                    this.OnIpChanging(value);
                    this.SendPropertyChanging();
                    this._Ip = value;
                    this.SendPropertyChanged("Ip");
                    this.OnIpChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomer in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_customer")]
    public partial class OcCustomer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomerId;

        private int _StoreId = 0;

        private string _Firstname;

        private string _Lastname;

        private string _Email;

        private string _Telephone;

        private string _Fax;

        private string _Password;

        private string _Salt;

        private string _Cart;

        private string _Wishlist;

        private bool _Newsletter = false;

        private int _AddressId = 0;

        private int _CustomerGroupId;

        private string _Ip = @"0";

        private bool _Status;

        private bool _Approved;

        private string _Token;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnStoreIdChanging(int value);
        partial void OnStoreIdChanged();
        partial void OnFirstnameChanging(string value);
        partial void OnFirstnameChanged();
        partial void OnLastnameChanging(string value);
        partial void OnLastnameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnTelephoneChanging(string value);
        partial void OnTelephoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnSaltChanging(string value);
        partial void OnSaltChanged();
        partial void OnCartChanging(string value);
        partial void OnCartChanged();
        partial void OnWishlistChanging(string value);
        partial void OnWishlistChanged();
        partial void OnNewsletterChanging(bool value);
        partial void OnNewsletterChanged();
        partial void OnAddressIdChanging(int value);
        partial void OnAddressIdChanged();
        partial void OnCustomerGroupIdChanging(int value);
        partial void OnCustomerGroupIdChanged();
        partial void OnIpChanging(string value);
        partial void OnIpChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        partial void OnApprovedChanging(bool value);
        partial void OnApprovedChanged();
        partial void OnTokenChanging(string value);
        partial void OnTokenChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcCustomer()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Firstname in the schema.
        /// </summary>
        [Column(Name = @"firstname", Storage = "_Firstname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Firstname
        {
            get
            {
                return this._Firstname;
            }
            set
            {
                if (this._Firstname != value)
                {
                    this.OnFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Firstname = value;
                    this.SendPropertyChanged("Firstname");
                    this.OnFirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Lastname in the schema.
        /// </summary>
        [Column(Name = @"lastname", Storage = "_Lastname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Lastname
        {
            get
            {
                return this._Lastname;
            }
            set
            {
                if (this._Lastname != value)
                {
                    this.OnLastnameChanging(value);
                    this.SendPropertyChanging();
                    this._Lastname = value;
                    this.SendPropertyChanged("Lastname");
                    this.OnLastnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(96) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telephone in the schema.
        /// </summary>
        [Column(Name = @"telephone", Storage = "_Telephone", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Telephone
        {
            get
            {
                return this._Telephone;
            }
            set
            {
                if (this._Telephone != value)
                {
                    this.OnTelephoneChanging(value);
                    this.SendPropertyChanging();
                    this._Telephone = value;
                    this.SendPropertyChanged("Telephone");
                    this.OnTelephoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"fax", Storage = "_Fax", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"`password`", Storage = "_Password", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Salt in the schema.
        /// </summary>
        [Column(Name = @"salt", Storage = "_Salt", CanBeNull = false, DbType = "VARCHAR(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Salt
        {
            get
            {
                return this._Salt;
            }
            set
            {
                if (this._Salt != value)
                {
                    this.OnSaltChanging(value);
                    this.SendPropertyChanging();
                    this._Salt = value;
                    this.SendPropertyChanged("Salt");
                    this.OnSaltChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cart in the schema.
        /// </summary>
        [Column(Name = @"cart", Storage = "_Cart", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cart
        {
            get
            {
                return this._Cart;
            }
            set
            {
                if (this._Cart != value)
                {
                    this.OnCartChanging(value);
                    this.SendPropertyChanging();
                    this._Cart = value;
                    this.SendPropertyChanged("Cart");
                    this.OnCartChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Wishlist in the schema.
        /// </summary>
        [Column(Name = @"wishlist", Storage = "_Wishlist", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Wishlist
        {
            get
            {
                return this._Wishlist;
            }
            set
            {
                if (this._Wishlist != value)
                {
                    this.OnWishlistChanging(value);
                    this.SendPropertyChanging();
                    this._Wishlist = value;
                    this.SendPropertyChanged("Wishlist");
                    this.OnWishlistChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Newsletter in the schema.
        /// </summary>
        [Column(Name = @"newsletter", Storage = "_Newsletter", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Newsletter
        {
            get
            {
                return this._Newsletter;
            }
            set
            {
                if (this._Newsletter != value)
                {
                    this.OnNewsletterChanging(value);
                    this.SendPropertyChanging();
                    this._Newsletter = value;
                    this.SendPropertyChanged("Newsletter");
                    this.OnNewsletterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressId in the schema.
        /// </summary>
        [Column(Name = @"address_id", Storage = "_AddressId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AddressId
        {
            get
            {
                return this._AddressId;
            }
            set
            {
                if (this._AddressId != value)
                {
                    this.OnAddressIdChanging(value);
                    this.SendPropertyChanging();
                    this._AddressId = value;
                    this.SendPropertyChanged("AddressId");
                    this.OnAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerGroupId in the schema.
        /// </summary>
        [Column(Name = @"customer_group_id", Storage = "_CustomerGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerGroupId
        {
            get
            {
                return this._CustomerGroupId;
            }
            set
            {
                if (this._CustomerGroupId != value)
                {
                    this.OnCustomerGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerGroupId = value;
                    this.SendPropertyChanged("CustomerGroupId");
                    this.OnCustomerGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ip in the schema.
        /// </summary>
        [Column(Name = @"ip", Storage = "_Ip", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ip
        {
            get
            {
                return this._Ip;
            }
            set
            {
                if (this._Ip != value)
                {
                    this.OnIpChanging(value);
                    this.SendPropertyChanging();
                    this._Ip = value;
                    this.SendPropertyChanged("Ip");
                    this.OnIpChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approved in the schema.
        /// </summary>
        [Column(Name = @"approved", Storage = "_Approved", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Approved
        {
            get
            {
                return this._Approved;
            }
            set
            {
                if (this._Approved != value)
                {
                    this.OnApprovedChanging(value);
                    this.SendPropertyChanging();
                    this._Approved = value;
                    this.SendPropertyChanged("Approved");
                    this.OnApprovedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Token in the schema.
        /// </summary>
        [Column(Name = @"token", Storage = "_Token", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Token
        {
            get
            {
                return this._Token;
            }
            set
            {
                if (this._Token != value)
                {
                    this.OnTokenChanging(value);
                    this.SendPropertyChanging();
                    this._Token = value;
                    this.SendPropertyChanged("Token");
                    this.OnTokenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomFieldValueDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_custom_field_value_description")]
    public partial class OcCustomFieldValueDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomFieldValueId;

        private int _LanguageId;

        private int _CustomFieldId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomFieldValueIdChanging(int value);
        partial void OnCustomFieldValueIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnCustomFieldIdChanging(int value);
        partial void OnCustomFieldIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcCustomFieldValueDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomFieldValueId in the schema.
        /// </summary>
        [Column(Name = @"custom_field_value_id", Storage = "_CustomFieldValueId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CustomFieldValueId
        {
            get
            {
                return this._CustomFieldValueId;
            }
            set
            {
                if (this._CustomFieldValueId != value)
                {
                    this.OnCustomFieldValueIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomFieldValueId = value;
                    this.SendPropertyChanged("CustomFieldValueId");
                    this.OnCustomFieldValueIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomFieldId in the schema.
        /// </summary>
        [Column(Name = @"custom_field_id", Storage = "_CustomFieldId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomFieldId
        {
            get
            {
                return this._CustomFieldId;
            }
            set
            {
                if (this._CustomFieldId != value)
                {
                    this.OnCustomFieldIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomFieldId = value;
                    this.SendPropertyChanged("CustomFieldId");
                    this.OnCustomFieldIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomFieldValue in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_custom_field_value")]
    public partial class OcCustomFieldValue : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomFieldValueId;

        private int _CustomFieldId;

        private int _SortOrder;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomFieldValueIdChanging(int value);
        partial void OnCustomFieldValueIdChanged();
        partial void OnCustomFieldIdChanging(int value);
        partial void OnCustomFieldIdChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcCustomFieldValue()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomFieldValueId in the schema.
        /// </summary>
        [Column(Name = @"custom_field_value_id", Storage = "_CustomFieldValueId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CustomFieldValueId
        {
            get
            {
                return this._CustomFieldValueId;
            }
            set
            {
                if (this._CustomFieldValueId != value)
                {
                    this.OnCustomFieldValueIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomFieldValueId = value;
                    this.SendPropertyChanged("CustomFieldValueId");
                    this.OnCustomFieldValueIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomFieldId in the schema.
        /// </summary>
        [Column(Name = @"custom_field_id", Storage = "_CustomFieldId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomFieldId
        {
            get
            {
                return this._CustomFieldId;
            }
            set
            {
                if (this._CustomFieldId != value)
                {
                    this.OnCustomFieldIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomFieldId = value;
                    this.SendPropertyChanged("CustomFieldId");
                    this.OnCustomFieldIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomFieldToCustomerGroup in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_custom_field_to_customer_group")]
    public partial class OcCustomFieldToCustomerGroup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomFieldId;

        private int _CustomerGroupId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomFieldIdChanging(int value);
        partial void OnCustomFieldIdChanged();
        partial void OnCustomerGroupIdChanging(int value);
        partial void OnCustomerGroupIdChanged();
        #endregion

        public OcCustomFieldToCustomerGroup()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomFieldId in the schema.
        /// </summary>
        [Column(Name = @"custom_field_id", Storage = "_CustomFieldId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CustomFieldId
        {
            get
            {
                return this._CustomFieldId;
            }
            set
            {
                if (this._CustomFieldId != value)
                {
                    this.OnCustomFieldIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomFieldId = value;
                    this.SendPropertyChanged("CustomFieldId");
                    this.OnCustomFieldIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerGroupId in the schema.
        /// </summary>
        [Column(Name = @"customer_group_id", Storage = "_CustomerGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CustomerGroupId
        {
            get
            {
                return this._CustomerGroupId;
            }
            set
            {
                if (this._CustomerGroupId != value)
                {
                    this.OnCustomerGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerGroupId = value;
                    this.SendPropertyChanged("CustomerGroupId");
                    this.OnCustomerGroupIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomFieldDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_custom_field_description")]
    public partial class OcCustomFieldDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomFieldId;

        private int _LanguageId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomFieldIdChanging(int value);
        partial void OnCustomFieldIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcCustomFieldDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomFieldId in the schema.
        /// </summary>
        [Column(Name = @"custom_field_id", Storage = "_CustomFieldId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CustomFieldId
        {
            get
            {
                return this._CustomFieldId;
            }
            set
            {
                if (this._CustomFieldId != value)
                {
                    this.OnCustomFieldIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomFieldId = value;
                    this.SendPropertyChanged("CustomFieldId");
                    this.OnCustomFieldIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCustomField in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_custom_field")]
    public partial class OcCustomField : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomFieldId;

        private string _Type;

        private string _Value;

        private bool _Required;

        private string _Location;

        private int _Position;

        private int _SortOrder;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomFieldIdChanging(int value);
        partial void OnCustomFieldIdChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        partial void OnRequiredChanging(bool value);
        partial void OnRequiredChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnPositionChanging(int value);
        partial void OnPositionChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcCustomField()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomFieldId in the schema.
        /// </summary>
        [Column(Name = @"custom_field_id", Storage = "_CustomFieldId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CustomFieldId
        {
            get
            {
                return this._CustomFieldId;
            }
            set
            {
                if (this._CustomFieldId != value)
                {
                    this.OnCustomFieldIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomFieldId = value;
                    this.SendPropertyChanged("CustomFieldId");
                    this.OnCustomFieldIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Name = @"value", Storage = "_Value", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Required in the schema.
        /// </summary>
        [Column(Name = @"required", Storage = "_Required", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Required
        {
            get
            {
                return this._Required;
            }
            set
            {
                if (this._Required != value)
                {
                    this.OnRequiredChanging(value);
                    this.SendPropertyChanging();
                    this._Required = value;
                    this.SendPropertyChanged("Required");
                    this.OnRequiredChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Location in the schema.
        /// </summary>
        [Column(Name = @"location", Storage = "_Location", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Location
        {
            get
            {
                return this._Location;
            }
            set
            {
                if (this._Location != value)
                {
                    this.OnLocationChanging(value);
                    this.SendPropertyChanging();
                    this._Location = value;
                    this.SendPropertyChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        [Column(Name = @"position", Storage = "_Position", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Position
        {
            get
            {
                return this._Position;
            }
            set
            {
                if (this._Position != value)
                {
                    this.OnPositionChanging(value);
                    this.SendPropertyChanging();
                    this._Position = value;
                    this.SendPropertyChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCurrency in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_currency")]
    public partial class OcCurrency : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CurrencyId;

        private string _Title;

        private string _Code;

        private string _SymbolLeft;

        private string _SymbolRight;

        private string _DecimalPlace;

        private float _Value;

        private bool _Status;

        private System.DateTime _DateModified;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCurrencyIdChanging(int value);
        partial void OnCurrencyIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnSymbolLeftChanging(string value);
        partial void OnSymbolLeftChanged();
        partial void OnSymbolRightChanging(string value);
        partial void OnSymbolRightChanged();
        partial void OnDecimalPlaceChanging(string value);
        partial void OnDecimalPlaceChanged();
        partial void OnValueChanging(float value);
        partial void OnValueChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        partial void OnDateModifiedChanging(System.DateTime value);
        partial void OnDateModifiedChanged();
        #endregion

        public OcCurrency()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CurrencyId in the schema.
        /// </summary>
        [Column(Name = @"currency_id", Storage = "_CurrencyId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CurrencyId
        {
            get
            {
                return this._CurrencyId;
            }
            set
            {
                if (this._CurrencyId != value)
                {
                    this.OnCurrencyIdChanging(value);
                    this.SendPropertyChanging();
                    this._CurrencyId = value;
                    this.SendPropertyChanged("CurrencyId");
                    this.OnCurrencyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SymbolLeft in the schema.
        /// </summary>
        [Column(Name = @"symbol_left", Storage = "_SymbolLeft", CanBeNull = false, DbType = "VARCHAR(12) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SymbolLeft
        {
            get
            {
                return this._SymbolLeft;
            }
            set
            {
                if (this._SymbolLeft != value)
                {
                    this.OnSymbolLeftChanging(value);
                    this.SendPropertyChanging();
                    this._SymbolLeft = value;
                    this.SendPropertyChanged("SymbolLeft");
                    this.OnSymbolLeftChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SymbolRight in the schema.
        /// </summary>
        [Column(Name = @"symbol_right", Storage = "_SymbolRight", CanBeNull = false, DbType = "VARCHAR(12) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SymbolRight
        {
            get
            {
                return this._SymbolRight;
            }
            set
            {
                if (this._SymbolRight != value)
                {
                    this.OnSymbolRightChanging(value);
                    this.SendPropertyChanging();
                    this._SymbolRight = value;
                    this.SendPropertyChanged("SymbolRight");
                    this.OnSymbolRightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DecimalPlace in the schema.
        /// </summary>
        [Column(Name = @"decimal_place", Storage = "_DecimalPlace", CanBeNull = false, DbType = "CHAR(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DecimalPlace
        {
            get
            {
                return this._DecimalPlace;
            }
            set
            {
                if (this._DecimalPlace != value)
                {
                    this.OnDecimalPlaceChanging(value);
                    this.SendPropertyChanging();
                    this._DecimalPlace = value;
                    this.SendPropertyChanged("DecimalPlace");
                    this.OnDecimalPlaceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Name = @"value", Storage = "_Value", CanBeNull = false, DbType = "FLOAT(15,8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public float Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateModified in the schema.
        /// </summary>
        [Column(Name = @"date_modified", Storage = "_DateModified", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateModified
        {
            get
            {
                return this._DateModified;
            }
            set
            {
                if (this._DateModified != value)
                {
                    this.OnDateModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._DateModified = value;
                    this.SendPropertyChanged("DateModified");
                    this.OnDateModifiedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCouponProduct in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_coupon_product")]
    public partial class OcCouponProduct : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CouponProductId;

        private int _CouponId;

        private int _ProductId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCouponProductIdChanging(int value);
        partial void OnCouponProductIdChanged();
        partial void OnCouponIdChanging(int value);
        partial void OnCouponIdChanged();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        #endregion

        public OcCouponProduct()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CouponProductId in the schema.
        /// </summary>
        [Column(Name = @"coupon_product_id", Storage = "_CouponProductId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CouponProductId
        {
            get
            {
                return this._CouponProductId;
            }
            set
            {
                if (this._CouponProductId != value)
                {
                    this.OnCouponProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._CouponProductId = value;
                    this.SendPropertyChanged("CouponProductId");
                    this.OnCouponProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CouponId in the schema.
        /// </summary>
        [Column(Name = @"coupon_id", Storage = "_CouponId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CouponId
        {
            get
            {
                return this._CouponId;
            }
            set
            {
                if (this._CouponId != value)
                {
                    this.OnCouponIdChanging(value);
                    this.SendPropertyChanging();
                    this._CouponId = value;
                    this.SendPropertyChanged("CouponId");
                    this.OnCouponIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCouponHistory in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_coupon_history")]
    public partial class OcCouponHistory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CouponHistoryId;

        private int _CouponId;

        private int _OrderId;

        private int _CustomerId;

        private decimal _Amount;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCouponHistoryIdChanging(int value);
        partial void OnCouponHistoryIdChanged();
        partial void OnCouponIdChanging(int value);
        partial void OnCouponIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcCouponHistory()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CouponHistoryId in the schema.
        /// </summary>
        [Column(Name = @"coupon_history_id", Storage = "_CouponHistoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CouponHistoryId
        {
            get
            {
                return this._CouponHistoryId;
            }
            set
            {
                if (this._CouponHistoryId != value)
                {
                    this.OnCouponHistoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CouponHistoryId = value;
                    this.SendPropertyChanged("CouponHistoryId");
                    this.OnCouponHistoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CouponId in the schema.
        /// </summary>
        [Column(Name = @"coupon_id", Storage = "_CouponId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CouponId
        {
            get
            {
                return this._CouponId;
            }
            set
            {
                if (this._CouponId != value)
                {
                    this.OnCouponIdChanging(value);
                    this.SendPropertyChanging();
                    this._CouponId = value;
                    this.SendPropertyChanged("CouponId");
                    this.OnCouponIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"amount", Storage = "_Amount", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCouponCategory in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_coupon_category")]
    public partial class OcCouponCategory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CouponId;

        private int _CategoryId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCouponIdChanging(int value);
        partial void OnCouponIdChanged();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        #endregion

        public OcCouponCategory()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CouponId in the schema.
        /// </summary>
        [Column(Name = @"coupon_id", Storage = "_CouponId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CouponId
        {
            get
            {
                return this._CouponId;
            }
            set
            {
                if (this._CouponId != value)
                {
                    this.OnCouponIdChanging(value);
                    this.SendPropertyChanging();
                    this._CouponId = value;
                    this.SendPropertyChanged("CouponId");
                    this.OnCouponIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCoupon in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_coupon")]
    public partial class OcCoupon : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CouponId;

        private string _Name;

        private string _Code;

        private string _Type;

        private decimal _Discount;

        private bool _Logged;

        private bool _Shipping;

        private decimal _Total;

        private System.DateTime _DateStart;

        private System.DateTime _DateEnd;

        private int _UsesTotal;

        private string _UsesCustomer;

        private bool _Status;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCouponIdChanging(int value);
        partial void OnCouponIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnDiscountChanging(decimal value);
        partial void OnDiscountChanged();
        partial void OnLoggedChanging(bool value);
        partial void OnLoggedChanged();
        partial void OnShippingChanging(bool value);
        partial void OnShippingChanged();
        partial void OnTotalChanging(decimal value);
        partial void OnTotalChanged();
        partial void OnDateStartChanging(System.DateTime value);
        partial void OnDateStartChanged();
        partial void OnDateEndChanging(System.DateTime value);
        partial void OnDateEndChanged();
        partial void OnUsesTotalChanging(int value);
        partial void OnUsesTotalChanged();
        partial void OnUsesCustomerChanging(string value);
        partial void OnUsesCustomerChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcCoupon()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CouponId in the schema.
        /// </summary>
        [Column(Name = @"coupon_id", Storage = "_CouponId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CouponId
        {
            get
            {
                return this._CouponId;
            }
            set
            {
                if (this._CouponId != value)
                {
                    this.OnCouponIdChanging(value);
                    this.SendPropertyChanging();
                    this._CouponId = value;
                    this.SendPropertyChanged("CouponId");
                    this.OnCouponIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "CHAR(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Discount in the schema.
        /// </summary>
        [Column(Name = @"discount", Storage = "_Discount", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Discount
        {
            get
            {
                return this._Discount;
            }
            set
            {
                if (this._Discount != value)
                {
                    this.OnDiscountChanging(value);
                    this.SendPropertyChanging();
                    this._Discount = value;
                    this.SendPropertyChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Logged in the schema.
        /// </summary>
        [Column(Name = @"logged", Storage = "_Logged", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Logged
        {
            get
            {
                return this._Logged;
            }
            set
            {
                if (this._Logged != value)
                {
                    this.OnLoggedChanging(value);
                    this.SendPropertyChanging();
                    this._Logged = value;
                    this.SendPropertyChanged("Logged");
                    this.OnLoggedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Shipping in the schema.
        /// </summary>
        [Column(Name = @"shipping", Storage = "_Shipping", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Shipping
        {
            get
            {
                return this._Shipping;
            }
            set
            {
                if (this._Shipping != value)
                {
                    this.OnShippingChanging(value);
                    this.SendPropertyChanging();
                    this._Shipping = value;
                    this.SendPropertyChanged("Shipping");
                    this.OnShippingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Total in the schema.
        /// </summary>
        [Column(Name = @"total", Storage = "_Total", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Total
        {
            get
            {
                return this._Total;
            }
            set
            {
                if (this._Total != value)
                {
                    this.OnTotalChanging(value);
                    this.SendPropertyChanging();
                    this._Total = value;
                    this.SendPropertyChanged("Total");
                    this.OnTotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateStart in the schema.
        /// </summary>
        [Column(Name = @"date_start", Storage = "_DateStart", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateStart
        {
            get
            {
                return this._DateStart;
            }
            set
            {
                if (this._DateStart != value)
                {
                    this.OnDateStartChanging(value);
                    this.SendPropertyChanging();
                    this._DateStart = value;
                    this.SendPropertyChanged("DateStart");
                    this.OnDateStartChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateEnd in the schema.
        /// </summary>
        [Column(Name = @"date_end", Storage = "_DateEnd", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateEnd
        {
            get
            {
                return this._DateEnd;
            }
            set
            {
                if (this._DateEnd != value)
                {
                    this.OnDateEndChanging(value);
                    this.SendPropertyChanging();
                    this._DateEnd = value;
                    this.SendPropertyChanged("DateEnd");
                    this.OnDateEndChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UsesTotal in the schema.
        /// </summary>
        [Column(Name = @"uses_total", Storage = "_UsesTotal", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UsesTotal
        {
            get
            {
                return this._UsesTotal;
            }
            set
            {
                if (this._UsesTotal != value)
                {
                    this.OnUsesTotalChanging(value);
                    this.SendPropertyChanging();
                    this._UsesTotal = value;
                    this.SendPropertyChanged("UsesTotal");
                    this.OnUsesTotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UsesCustomer in the schema.
        /// </summary>
        [Column(Name = @"uses_customer", Storage = "_UsesCustomer", CanBeNull = false, DbType = "VARCHAR(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UsesCustomer
        {
            get
            {
                return this._UsesCustomer;
            }
            set
            {
                if (this._UsesCustomer != value)
                {
                    this.OnUsesCustomerChanging(value);
                    this.SendPropertyChanging();
                    this._UsesCustomer = value;
                    this.SendPropertyChanged("UsesCustomer");
                    this.OnUsesCustomerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCountry in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_country")]
    public partial class OcCountry : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CountryId;

        private string _Name;

        private string _IsoCode2;

        private string _IsoCode3;

        private string _AddressFormat;

        private bool _PostcodeRequired;

        private bool _Status = true;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCountryIdChanging(int value);
        partial void OnCountryIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnIsoCode2Changing(string value);
        partial void OnIsoCode2Changed();
        partial void OnIsoCode3Changing(string value);
        partial void OnIsoCode3Changed();
        partial void OnAddressFormatChanging(string value);
        partial void OnAddressFormatChanged();
        partial void OnPostcodeRequiredChanging(bool value);
        partial void OnPostcodeRequiredChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        #endregion

        public OcCountry()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"country_id", Storage = "_CountryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsoCode2 in the schema.
        /// </summary>
        [Column(Name = @"iso_code_2", Storage = "_IsoCode2", CanBeNull = false, DbType = "VARCHAR(2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IsoCode2
        {
            get
            {
                return this._IsoCode2;
            }
            set
            {
                if (this._IsoCode2 != value)
                {
                    this.OnIsoCode2Changing(value);
                    this.SendPropertyChanging();
                    this._IsoCode2 = value;
                    this.SendPropertyChanged("IsoCode2");
                    this.OnIsoCode2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsoCode3 in the schema.
        /// </summary>
        [Column(Name = @"iso_code_3", Storage = "_IsoCode3", CanBeNull = false, DbType = "VARCHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IsoCode3
        {
            get
            {
                return this._IsoCode3;
            }
            set
            {
                if (this._IsoCode3 != value)
                {
                    this.OnIsoCode3Changing(value);
                    this.SendPropertyChanging();
                    this._IsoCode3 = value;
                    this.SendPropertyChanged("IsoCode3");
                    this.OnIsoCode3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressFormat in the schema.
        /// </summary>
        [Column(Name = @"address_format", Storage = "_AddressFormat", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AddressFormat
        {
            get
            {
                return this._AddressFormat;
            }
            set
            {
                if (this._AddressFormat != value)
                {
                    this.OnAddressFormatChanging(value);
                    this.SendPropertyChanging();
                    this._AddressFormat = value;
                    this.SendPropertyChanged("AddressFormat");
                    this.OnAddressFormatChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PostcodeRequired in the schema.
        /// </summary>
        [Column(Name = @"postcode_required", Storage = "_PostcodeRequired", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool PostcodeRequired
        {
            get
            {
                return this._PostcodeRequired;
            }
            set
            {
                if (this._PostcodeRequired != value)
                {
                    this.OnPostcodeRequiredChanging(value);
                    this.SendPropertyChanging();
                    this._PostcodeRequired = value;
                    this.SendPropertyChanged("PostcodeRequired");
                    this.OnPostcodeRequiredChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCategoryToStore in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_category_to_store")]
    public partial class OcCategoryToStore : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryId;

        private int _StoreId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnStoreIdChanging(int value);
        partial void OnStoreIdChanged();
        #endregion

        public OcCategoryToStore()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCategoryToLayout in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_category_to_layout")]
    public partial class OcCategoryToLayout : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryId;

        private int _StoreId;

        private int _LayoutId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnStoreIdChanging(int value);
        partial void OnStoreIdChanged();
        partial void OnLayoutIdChanging(int value);
        partial void OnLayoutIdChanged();
        #endregion

        public OcCategoryToLayout()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LayoutId in the schema.
        /// </summary>
        [Column(Name = @"layout_id", Storage = "_LayoutId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LayoutId
        {
            get
            {
                return this._LayoutId;
            }
            set
            {
                if (this._LayoutId != value)
                {
                    this.OnLayoutIdChanging(value);
                    this.SendPropertyChanging();
                    this._LayoutId = value;
                    this.SendPropertyChanged("LayoutId");
                    this.OnLayoutIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCategoryPath in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_category_path")]
    public partial class OcCategoryPath : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryId;

        private int _PathId;

        private int _Level;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnPathIdChanging(int value);
        partial void OnPathIdChanged();
        partial void OnLevelChanging(int value);
        partial void OnLevelChanged();
        #endregion

        public OcCategoryPath()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PathId in the schema.
        /// </summary>
        [Column(Name = @"path_id", Storage = "_PathId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int PathId
        {
            get
            {
                return this._PathId;
            }
            set
            {
                if (this._PathId != value)
                {
                    this.OnPathIdChanging(value);
                    this.SendPropertyChanging();
                    this._PathId = value;
                    this.SendPropertyChanged("PathId");
                    this.OnPathIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Level in the schema.
        /// </summary>
        [Column(Name = @"level", Storage = "_Level", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Level
        {
            get
            {
                return this._Level;
            }
            set
            {
                if (this._Level != value)
                {
                    this.OnLevelChanging(value);
                    this.SendPropertyChanging();
                    this._Level = value;
                    this.SendPropertyChanged("Level");
                    this.OnLevelChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCategoryFilter in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_category_filter")]
    public partial class OcCategoryFilter : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryId;

        private int _FilterId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnFilterIdChanging(int value);
        partial void OnFilterIdChanged();
        #endregion

        public OcCategoryFilter()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FilterId in the schema.
        /// </summary>
        [Column(Name = @"filter_id", Storage = "_FilterId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int FilterId
        {
            get
            {
                return this._FilterId;
            }
            set
            {
                if (this._FilterId != value)
                {
                    this.OnFilterIdChanging(value);
                    this.SendPropertyChanging();
                    this._FilterId = value;
                    this.SendPropertyChanged("FilterId");
                    this.OnFilterIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCategoryDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_category_description")]
    public partial class OcCategoryDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryId;

        private int _LanguageId;

        private string _Name;

        private string _Description;

        private string _MetaDescription;

        private string _MetaKeyword;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnMetaDescriptionChanging(string value);
        partial void OnMetaDescriptionChanged();
        partial void OnMetaKeywordChanging(string value);
        partial void OnMetaKeywordChanged();
        #endregion

        public OcCategoryDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MetaDescription in the schema.
        /// </summary>
        [Column(Name = @"meta_description", Storage = "_MetaDescription", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MetaDescription
        {
            get
            {
                return this._MetaDescription;
            }
            set
            {
                if (this._MetaDescription != value)
                {
                    this.OnMetaDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._MetaDescription = value;
                    this.SendPropertyChanged("MetaDescription");
                    this.OnMetaDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MetaKeyword in the schema.
        /// </summary>
        [Column(Name = @"meta_keyword", Storage = "_MetaKeyword", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MetaKeyword
        {
            get
            {
                return this._MetaKeyword;
            }
            set
            {
                if (this._MetaKeyword != value)
                {
                    this.OnMetaKeywordChanging(value);
                    this.SendPropertyChanging();
                    this._MetaKeyword = value;
                    this.SendPropertyChanged("MetaKeyword");
                    this.OnMetaKeywordChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcCategory in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_category")]
    public partial class OcCategory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryId;

        private string _Image;

        private int _ParentId = 0;

        private bool _Top;

        private int _Column;

        private int _SortOrder = 0;

        private bool _Status;

        private System.DateTime _DateAdded;

        private System.DateTime _DateModified;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        partial void OnParentIdChanging(int value);
        partial void OnParentIdChanged();
        partial void OnTopChanging(bool value);
        partial void OnTopChanged();
        partial void OnColumnChanging(int value);
        partial void OnColumnChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        partial void OnDateModifiedChanging(System.DateTime value);
        partial void OnDateModifiedChanged();
        #endregion

        public OcCategory()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [Column(Name = @"image", Storage = "_Image", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging();
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentId in the schema.
        /// </summary>
        [Column(Name = @"parent_id", Storage = "_ParentId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ParentId
        {
            get
            {
                return this._ParentId;
            }
            set
            {
                if (this._ParentId != value)
                {
                    this.OnParentIdChanging(value);
                    this.SendPropertyChanging();
                    this._ParentId = value;
                    this.SendPropertyChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Top in the schema.
        /// </summary>
        [Column(Name = @"top", Storage = "_Top", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Top
        {
            get
            {
                return this._Top;
            }
            set
            {
                if (this._Top != value)
                {
                    this.OnTopChanging(value);
                    this.SendPropertyChanging();
                    this._Top = value;
                    this.SendPropertyChanged("Top");
                    this.OnTopChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Column in the schema.
        /// </summary>
        [Column(Name = @"`column`", Storage = "_Column", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Column
        {
            get
            {
                return this._Column;
            }
            set
            {
                if (this._Column != value)
                {
                    this.OnColumnChanging(value);
                    this.SendPropertyChanging();
                    this._Column = value;
                    this.SendPropertyChanged("Column");
                    this.OnColumnChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateModified in the schema.
        /// </summary>
        [Column(Name = @"date_modified", Storage = "_DateModified", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateModified
        {
            get
            {
                return this._DateModified;
            }
            set
            {
                if (this._DateModified != value)
                {
                    this.OnDateModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._DateModified = value;
                    this.SendPropertyChanged("DateModified");
                    this.OnDateModifiedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcBannerImageDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_banner_image_description")]
    public partial class OcBannerImageDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BannerImageId;

        private int _LanguageId;

        private int _BannerId;

        private string _Title;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBannerImageIdChanging(int value);
        partial void OnBannerImageIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnBannerIdChanging(int value);
        partial void OnBannerIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        #endregion

        public OcBannerImageDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BannerImageId in the schema.
        /// </summary>
        [Column(Name = @"banner_image_id", Storage = "_BannerImageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int BannerImageId
        {
            get
            {
                return this._BannerImageId;
            }
            set
            {
                if (this._BannerImageId != value)
                {
                    this.OnBannerImageIdChanging(value);
                    this.SendPropertyChanging();
                    this._BannerImageId = value;
                    this.SendPropertyChanged("BannerImageId");
                    this.OnBannerImageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BannerId in the schema.
        /// </summary>
        [Column(Name = @"banner_id", Storage = "_BannerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int BannerId
        {
            get
            {
                return this._BannerId;
            }
            set
            {
                if (this._BannerId != value)
                {
                    this.OnBannerIdChanging(value);
                    this.SendPropertyChanging();
                    this._BannerId = value;
                    this.SendPropertyChanged("BannerId");
                    this.OnBannerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcBannerImage in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_banner_image")]
    public partial class OcBannerImage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BannerImageId;

        private int _BannerId;

        private string _Link;

        private string _Image;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBannerImageIdChanging(int value);
        partial void OnBannerImageIdChanged();
        partial void OnBannerIdChanging(int value);
        partial void OnBannerIdChanged();
        partial void OnLinkChanging(string value);
        partial void OnLinkChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        #endregion

        public OcBannerImage()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BannerImageId in the schema.
        /// </summary>
        [Column(Name = @"banner_image_id", Storage = "_BannerImageId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int BannerImageId
        {
            get
            {
                return this._BannerImageId;
            }
            set
            {
                if (this._BannerImageId != value)
                {
                    this.OnBannerImageIdChanging(value);
                    this.SendPropertyChanging();
                    this._BannerImageId = value;
                    this.SendPropertyChanged("BannerImageId");
                    this.OnBannerImageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BannerId in the schema.
        /// </summary>
        [Column(Name = @"banner_id", Storage = "_BannerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int BannerId
        {
            get
            {
                return this._BannerId;
            }
            set
            {
                if (this._BannerId != value)
                {
                    this.OnBannerIdChanging(value);
                    this.SendPropertyChanging();
                    this._BannerId = value;
                    this.SendPropertyChanged("BannerId");
                    this.OnBannerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Link in the schema.
        /// </summary>
        [Column(Name = @"link", Storage = "_Link", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Link
        {
            get
            {
                return this._Link;
            }
            set
            {
                if (this._Link != value)
                {
                    this.OnLinkChanging(value);
                    this.SendPropertyChanging();
                    this._Link = value;
                    this.SendPropertyChanged("Link");
                    this.OnLinkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [Column(Name = @"image", Storage = "_Image", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging();
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcBanner in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_banner")]
    public partial class OcBanner : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BannerId;

        private string _Name;

        private bool _Status;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBannerIdChanging(int value);
        partial void OnBannerIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        #endregion

        public OcBanner()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BannerId in the schema.
        /// </summary>
        [Column(Name = @"banner_id", Storage = "_BannerId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int BannerId
        {
            get
            {
                return this._BannerId;
            }
            set
            {
                if (this._BannerId != value)
                {
                    this.OnBannerIdChanging(value);
                    this.SendPropertyChanging();
                    this._BannerId = value;
                    this.SendPropertyChanged("BannerId");
                    this.OnBannerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcAttributeGroupDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_attribute_group_description")]
    public partial class OcAttributeGroupDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AttributeGroupId;

        private int _LanguageId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAttributeGroupIdChanging(int value);
        partial void OnAttributeGroupIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcAttributeGroupDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AttributeGroupId in the schema.
        /// </summary>
        [Column(Name = @"attribute_group_id", Storage = "_AttributeGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int AttributeGroupId
        {
            get
            {
                return this._AttributeGroupId;
            }
            set
            {
                if (this._AttributeGroupId != value)
                {
                    this.OnAttributeGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._AttributeGroupId = value;
                    this.SendPropertyChanged("AttributeGroupId");
                    this.OnAttributeGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcAttributeGroup in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_attribute_group")]
    public partial class OcAttributeGroup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AttributeGroupId;

        private int _SortOrder;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAttributeGroupIdChanging(int value);
        partial void OnAttributeGroupIdChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcAttributeGroup()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AttributeGroupId in the schema.
        /// </summary>
        [Column(Name = @"attribute_group_id", Storage = "_AttributeGroupId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AttributeGroupId
        {
            get
            {
                return this._AttributeGroupId;
            }
            set
            {
                if (this._AttributeGroupId != value)
                {
                    this.OnAttributeGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._AttributeGroupId = value;
                    this.SendPropertyChanged("AttributeGroupId");
                    this.OnAttributeGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcAttributeDescription in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_attribute_description")]
    public partial class OcAttributeDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AttributeId;

        private int _LanguageId;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAttributeIdChanging(int value);
        partial void OnAttributeIdChanged();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public OcAttributeDescription()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AttributeId in the schema.
        /// </summary>
        [Column(Name = @"attribute_id", Storage = "_AttributeId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int AttributeId
        {
            get
            {
                return this._AttributeId;
            }
            set
            {
                if (this._AttributeId != value)
                {
                    this.OnAttributeIdChanging(value);
                    this.SendPropertyChanging();
                    this._AttributeId = value;
                    this.SendPropertyChanged("AttributeId");
                    this.OnAttributeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcAttribute in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_attribute")]
    public partial class OcAttribute : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AttributeId;

        private int _AttributeGroupId;

        private int _SortOrder;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAttributeIdChanging(int value);
        partial void OnAttributeIdChanged();
        partial void OnAttributeGroupIdChanging(int value);
        partial void OnAttributeGroupIdChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        #endregion

        public OcAttribute()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AttributeId in the schema.
        /// </summary>
        [Column(Name = @"attribute_id", Storage = "_AttributeId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AttributeId
        {
            get
            {
                return this._AttributeId;
            }
            set
            {
                if (this._AttributeId != value)
                {
                    this.OnAttributeIdChanging(value);
                    this.SendPropertyChanging();
                    this._AttributeId = value;
                    this.SendPropertyChanged("AttributeId");
                    this.OnAttributeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AttributeGroupId in the schema.
        /// </summary>
        [Column(Name = @"attribute_group_id", Storage = "_AttributeGroupId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AttributeGroupId
        {
            get
            {
                return this._AttributeGroupId;
            }
            set
            {
                if (this._AttributeGroupId != value)
                {
                    this.OnAttributeGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._AttributeGroupId = value;
                    this.SendPropertyChanged("AttributeGroupId");
                    this.OnAttributeGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortOrder in the schema.
        /// </summary>
        [Column(Name = @"sort_order", Storage = "_SortOrder", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if (this._SortOrder != value)
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcAffiliateTransaction in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_affiliate_transaction")]
    public partial class OcAffiliateTransaction : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AffiliateTransactionId;

        private int _AffiliateId;

        private int _OrderId;

        private string _Description;

        private decimal _Amount;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAffiliateTransactionIdChanging(int value);
        partial void OnAffiliateTransactionIdChanged();
        partial void OnAffiliateIdChanging(int value);
        partial void OnAffiliateIdChanged();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcAffiliateTransaction()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AffiliateTransactionId in the schema.
        /// </summary>
        [Column(Name = @"affiliate_transaction_id", Storage = "_AffiliateTransactionId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AffiliateTransactionId
        {
            get
            {
                return this._AffiliateTransactionId;
            }
            set
            {
                if (this._AffiliateTransactionId != value)
                {
                    this.OnAffiliateTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._AffiliateTransactionId = value;
                    this.SendPropertyChanged("AffiliateTransactionId");
                    this.OnAffiliateTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AffiliateId in the schema.
        /// </summary>
        [Column(Name = @"affiliate_id", Storage = "_AffiliateId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AffiliateId
        {
            get
            {
                return this._AffiliateId;
            }
            set
            {
                if (this._AffiliateId != value)
                {
                    this.OnAffiliateIdChanging(value);
                    this.SendPropertyChanging();
                    this._AffiliateId = value;
                    this.SendPropertyChanged("AffiliateId");
                    this.OnAffiliateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"amount", Storage = "_Amount", CanBeNull = false, DbType = "DECIMAL(15,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcAffiliate in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_affiliate")]
    public partial class OcAffiliate : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AffiliateId;

        private string _Firstname;

        private string _Lastname;

        private string _Email;

        private string _Telephone;

        private string _Fax;

        private string _Password;

        private string _Salt;

        private string _Company;

        private string _Website;

        private string _Address1;

        private string _Address2;

        private string _City;

        private string _Postcode;

        private int _CountryId;

        private int _ZoneId;

        private string _Code;

        private decimal _Commission = 0.00m;

        private string _Tax;

        private string _Payment;

        private string _Cheque;

        private string _Paypal;

        private string _BankName;

        private string _BankBranchNumber;

        private string _BankSwiftCode;

        private string _BankAccountName;

        private string _BankAccountNumber;

        private string _Ip;

        private bool _Status;

        private bool _Approved;

        private System.DateTime _DateAdded;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAffiliateIdChanging(int value);
        partial void OnAffiliateIdChanged();
        partial void OnFirstnameChanging(string value);
        partial void OnFirstnameChanged();
        partial void OnLastnameChanging(string value);
        partial void OnLastnameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnTelephoneChanging(string value);
        partial void OnTelephoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnSaltChanging(string value);
        partial void OnSaltChanged();
        partial void OnCompanyChanging(string value);
        partial void OnCompanyChanged();
        partial void OnWebsiteChanging(string value);
        partial void OnWebsiteChanged();
        partial void OnAddress1Changing(string value);
        partial void OnAddress1Changed();
        partial void OnAddress2Changing(string value);
        partial void OnAddress2Changed();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnPostcodeChanging(string value);
        partial void OnPostcodeChanged();
        partial void OnCountryIdChanging(int value);
        partial void OnCountryIdChanged();
        partial void OnZoneIdChanging(int value);
        partial void OnZoneIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnCommissionChanging(decimal value);
        partial void OnCommissionChanged();
        partial void OnTaxChanging(string value);
        partial void OnTaxChanged();
        partial void OnPaymentChanging(string value);
        partial void OnPaymentChanged();
        partial void OnChequeChanging(string value);
        partial void OnChequeChanged();
        partial void OnPaypalChanging(string value);
        partial void OnPaypalChanged();
        partial void OnBankNameChanging(string value);
        partial void OnBankNameChanged();
        partial void OnBankBranchNumberChanging(string value);
        partial void OnBankBranchNumberChanged();
        partial void OnBankSwiftCodeChanging(string value);
        partial void OnBankSwiftCodeChanged();
        partial void OnBankAccountNameChanging(string value);
        partial void OnBankAccountNameChanged();
        partial void OnBankAccountNumberChanging(string value);
        partial void OnBankAccountNumberChanged();
        partial void OnIpChanging(string value);
        partial void OnIpChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        partial void OnApprovedChanging(bool value);
        partial void OnApprovedChanged();
        partial void OnDateAddedChanging(System.DateTime value);
        partial void OnDateAddedChanged();
        #endregion

        public OcAffiliate()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AffiliateId in the schema.
        /// </summary>
        [Column(Name = @"affiliate_id", Storage = "_AffiliateId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AffiliateId
        {
            get
            {
                return this._AffiliateId;
            }
            set
            {
                if (this._AffiliateId != value)
                {
                    this.OnAffiliateIdChanging(value);
                    this.SendPropertyChanging();
                    this._AffiliateId = value;
                    this.SendPropertyChanged("AffiliateId");
                    this.OnAffiliateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Firstname in the schema.
        /// </summary>
        [Column(Name = @"firstname", Storage = "_Firstname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Firstname
        {
            get
            {
                return this._Firstname;
            }
            set
            {
                if (this._Firstname != value)
                {
                    this.OnFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Firstname = value;
                    this.SendPropertyChanged("Firstname");
                    this.OnFirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Lastname in the schema.
        /// </summary>
        [Column(Name = @"lastname", Storage = "_Lastname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Lastname
        {
            get
            {
                return this._Lastname;
            }
            set
            {
                if (this._Lastname != value)
                {
                    this.OnLastnameChanging(value);
                    this.SendPropertyChanging();
                    this._Lastname = value;
                    this.SendPropertyChanged("Lastname");
                    this.OnLastnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(96) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telephone in the schema.
        /// </summary>
        [Column(Name = @"telephone", Storage = "_Telephone", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Telephone
        {
            get
            {
                return this._Telephone;
            }
            set
            {
                if (this._Telephone != value)
                {
                    this.OnTelephoneChanging(value);
                    this.SendPropertyChanging();
                    this._Telephone = value;
                    this.SendPropertyChanged("Telephone");
                    this.OnTelephoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"fax", Storage = "_Fax", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"`password`", Storage = "_Password", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Salt in the schema.
        /// </summary>
        [Column(Name = @"salt", Storage = "_Salt", CanBeNull = false, DbType = "VARCHAR(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Salt
        {
            get
            {
                return this._Salt;
            }
            set
            {
                if (this._Salt != value)
                {
                    this.OnSaltChanging(value);
                    this.SendPropertyChanging();
                    this._Salt = value;
                    this.SendPropertyChanged("Salt");
                    this.OnSaltChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Column(Name = @"company", Storage = "_Company", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                if (this._Company != value)
                {
                    this.OnCompanyChanging(value);
                    this.SendPropertyChanging();
                    this._Company = value;
                    this.SendPropertyChanged("Company");
                    this.OnCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Website in the schema.
        /// </summary>
        [Column(Name = @"website", Storage = "_Website", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Website
        {
            get
            {
                return this._Website;
            }
            set
            {
                if (this._Website != value)
                {
                    this.OnWebsiteChanging(value);
                    this.SendPropertyChanging();
                    this._Website = value;
                    this.SendPropertyChanged("Website");
                    this.OnWebsiteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address1 in the schema.
        /// </summary>
        [Column(Name = @"address_1", Storage = "_Address1", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address1
        {
            get
            {
                return this._Address1;
            }
            set
            {
                if (this._Address1 != value)
                {
                    this.OnAddress1Changing(value);
                    this.SendPropertyChanging();
                    this._Address1 = value;
                    this.SendPropertyChanged("Address1");
                    this.OnAddress1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address2 in the schema.
        /// </summary>
        [Column(Name = @"address_2", Storage = "_Address2", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address2
        {
            get
            {
                return this._Address2;
            }
            set
            {
                if (this._Address2 != value)
                {
                    this.OnAddress2Changing(value);
                    this.SendPropertyChanging();
                    this._Address2 = value;
                    this.SendPropertyChanged("Address2");
                    this.OnAddress2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Name = @"city", Storage = "_City", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging();
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Postcode in the schema.
        /// </summary>
        [Column(Name = @"postcode", Storage = "_Postcode", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Postcode
        {
            get
            {
                return this._Postcode;
            }
            set
            {
                if (this._Postcode != value)
                {
                    this.OnPostcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Postcode = value;
                    this.SendPropertyChanged("Postcode");
                    this.OnPostcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"country_id", Storage = "_CountryId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ZoneId in the schema.
        /// </summary>
        [Column(Name = @"zone_id", Storage = "_ZoneId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ZoneId
        {
            get
            {
                return this._ZoneId;
            }
            set
            {
                if (this._ZoneId != value)
                {
                    this.OnZoneIdChanging(value);
                    this.SendPropertyChanging();
                    this._ZoneId = value;
                    this.SendPropertyChanged("ZoneId");
                    this.OnZoneIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Commission in the schema.
        /// </summary>
        [Column(Name = @"commission", Storage = "_Commission", CanBeNull = false, DbType = "DECIMAL(4,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Commission
        {
            get
            {
                return this._Commission;
            }
            set
            {
                if (this._Commission != value)
                {
                    this.OnCommissionChanging(value);
                    this.SendPropertyChanging();
                    this._Commission = value;
                    this.SendPropertyChanged("Commission");
                    this.OnCommissionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tax in the schema.
        /// </summary>
        [Column(Name = @"tax", Storage = "_Tax", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Tax
        {
            get
            {
                return this._Tax;
            }
            set
            {
                if (this._Tax != value)
                {
                    this.OnTaxChanging(value);
                    this.SendPropertyChanging();
                    this._Tax = value;
                    this.SendPropertyChanged("Tax");
                    this.OnTaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Payment in the schema.
        /// </summary>
        [Column(Name = @"payment", Storage = "_Payment", CanBeNull = false, DbType = "VARCHAR(6) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Payment
        {
            get
            {
                return this._Payment;
            }
            set
            {
                if (this._Payment != value)
                {
                    this.OnPaymentChanging(value);
                    this.SendPropertyChanging();
                    this._Payment = value;
                    this.SendPropertyChanged("Payment");
                    this.OnPaymentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cheque in the schema.
        /// </summary>
        [Column(Name = @"cheque", Storage = "_Cheque", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cheque
        {
            get
            {
                return this._Cheque;
            }
            set
            {
                if (this._Cheque != value)
                {
                    this.OnChequeChanging(value);
                    this.SendPropertyChanging();
                    this._Cheque = value;
                    this.SendPropertyChanged("Cheque");
                    this.OnChequeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Paypal in the schema.
        /// </summary>
        [Column(Name = @"paypal", Storage = "_Paypal", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Paypal
        {
            get
            {
                return this._Paypal;
            }
            set
            {
                if (this._Paypal != value)
                {
                    this.OnPaypalChanging(value);
                    this.SendPropertyChanging();
                    this._Paypal = value;
                    this.SendPropertyChanged("Paypal");
                    this.OnPaypalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BankName in the schema.
        /// </summary>
        [Column(Name = @"bank_name", Storage = "_BankName", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BankName
        {
            get
            {
                return this._BankName;
            }
            set
            {
                if (this._BankName != value)
                {
                    this.OnBankNameChanging(value);
                    this.SendPropertyChanging();
                    this._BankName = value;
                    this.SendPropertyChanged("BankName");
                    this.OnBankNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BankBranchNumber in the schema.
        /// </summary>
        [Column(Name = @"bank_branch_number", Storage = "_BankBranchNumber", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BankBranchNumber
        {
            get
            {
                return this._BankBranchNumber;
            }
            set
            {
                if (this._BankBranchNumber != value)
                {
                    this.OnBankBranchNumberChanging(value);
                    this.SendPropertyChanging();
                    this._BankBranchNumber = value;
                    this.SendPropertyChanged("BankBranchNumber");
                    this.OnBankBranchNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BankSwiftCode in the schema.
        /// </summary>
        [Column(Name = @"bank_swift_code", Storage = "_BankSwiftCode", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BankSwiftCode
        {
            get
            {
                return this._BankSwiftCode;
            }
            set
            {
                if (this._BankSwiftCode != value)
                {
                    this.OnBankSwiftCodeChanging(value);
                    this.SendPropertyChanging();
                    this._BankSwiftCode = value;
                    this.SendPropertyChanged("BankSwiftCode");
                    this.OnBankSwiftCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BankAccountName in the schema.
        /// </summary>
        [Column(Name = @"bank_account_name", Storage = "_BankAccountName", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BankAccountName
        {
            get
            {
                return this._BankAccountName;
            }
            set
            {
                if (this._BankAccountName != value)
                {
                    this.OnBankAccountNameChanging(value);
                    this.SendPropertyChanging();
                    this._BankAccountName = value;
                    this.SendPropertyChanged("BankAccountName");
                    this.OnBankAccountNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BankAccountNumber in the schema.
        /// </summary>
        [Column(Name = @"bank_account_number", Storage = "_BankAccountNumber", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BankAccountNumber
        {
            get
            {
                return this._BankAccountNumber;
            }
            set
            {
                if (this._BankAccountNumber != value)
                {
                    this.OnBankAccountNumberChanging(value);
                    this.SendPropertyChanging();
                    this._BankAccountNumber = value;
                    this.SendPropertyChanged("BankAccountNumber");
                    this.OnBankAccountNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ip in the schema.
        /// </summary>
        [Column(Name = @"ip", Storage = "_Ip", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ip
        {
            get
            {
                return this._Ip;
            }
            set
            {
                if (this._Ip != value)
                {
                    this.OnIpChanging(value);
                    this.SendPropertyChanging();
                    this._Ip = value;
                    this.SendPropertyChanged("Ip");
                    this.OnIpChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approved in the schema.
        /// </summary>
        [Column(Name = @"approved", Storage = "_Approved", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Approved
        {
            get
            {
                return this._Approved;
            }
            set
            {
                if (this._Approved != value)
                {
                    this.OnApprovedChanging(value);
                    this.SendPropertyChanging();
                    this._Approved = value;
                    this.SendPropertyChanged("Approved");
                    this.OnApprovedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAdded in the schema.
        /// </summary>
        [Column(Name = @"date_added", Storage = "_DateAdded", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateAdded
        {
            get
            {
                return this._DateAdded;
            }
            set
            {
                if (this._DateAdded != value)
                {
                    this.OnDateAddedChanging(value);
                    this.SendPropertyChanging();
                    this._DateAdded = value;
                    this.SendPropertyChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.OcAddress in the schema.
    /// </summary>
    [Table(Name = @"amfito_ocart.oc_address")]
    public partial class OcAddress : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AddressId;

        private int _CustomerId;

        private string _Firstname;

        private string _Lastname;

        private string _Company;

        private string _CompanyId;

        private string _TaxId;

        private string _Address1;

        private string _Address2;

        private string _City;

        private string _Postcode;

        private int _CountryId = 0;

        private int _ZoneId = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAddressIdChanging(int value);
        partial void OnAddressIdChanged();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnFirstnameChanging(string value);
        partial void OnFirstnameChanged();
        partial void OnLastnameChanging(string value);
        partial void OnLastnameChanged();
        partial void OnCompanyChanging(string value);
        partial void OnCompanyChanged();
        partial void OnCompanyIdChanging(string value);
        partial void OnCompanyIdChanged();
        partial void OnTaxIdChanging(string value);
        partial void OnTaxIdChanged();
        partial void OnAddress1Changing(string value);
        partial void OnAddress1Changed();
        partial void OnAddress2Changing(string value);
        partial void OnAddress2Changed();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnPostcodeChanging(string value);
        partial void OnPostcodeChanged();
        partial void OnCountryIdChanging(int value);
        partial void OnCountryIdChanged();
        partial void OnZoneIdChanging(int value);
        partial void OnZoneIdChanged();
        #endregion

        public OcAddress()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AddressId in the schema.
        /// </summary>
        [Column(Name = @"address_id", Storage = "_AddressId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AddressId
        {
            get
            {
                return this._AddressId;
            }
            set
            {
                if (this._AddressId != value)
                {
                    this.OnAddressIdChanging(value);
                    this.SendPropertyChanging();
                    this._AddressId = value;
                    this.SendPropertyChanged("AddressId");
                    this.OnAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Firstname in the schema.
        /// </summary>
        [Column(Name = @"firstname", Storage = "_Firstname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Firstname
        {
            get
            {
                return this._Firstname;
            }
            set
            {
                if (this._Firstname != value)
                {
                    this.OnFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Firstname = value;
                    this.SendPropertyChanged("Firstname");
                    this.OnFirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Lastname in the schema.
        /// </summary>
        [Column(Name = @"lastname", Storage = "_Lastname", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Lastname
        {
            get
            {
                return this._Lastname;
            }
            set
            {
                if (this._Lastname != value)
                {
                    this.OnLastnameChanging(value);
                    this.SendPropertyChanging();
                    this._Lastname = value;
                    this.SendPropertyChanged("Lastname");
                    this.OnLastnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Column(Name = @"company", Storage = "_Company", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                if (this._Company != value)
                {
                    this.OnCompanyChanging(value);
                    this.SendPropertyChanging();
                    this._Company = value;
                    this.SendPropertyChanged("Company");
                    this.OnCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyId in the schema.
        /// </summary>
        [Column(Name = @"company_id", Storage = "_CompanyId", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompanyId
        {
            get
            {
                return this._CompanyId;
            }
            set
            {
                if (this._CompanyId != value)
                {
                    this.OnCompanyIdChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyId = value;
                    this.SendPropertyChanged("CompanyId");
                    this.OnCompanyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxId in the schema.
        /// </summary>
        [Column(Name = @"tax_id", Storage = "_TaxId", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TaxId
        {
            get
            {
                return this._TaxId;
            }
            set
            {
                if (this._TaxId != value)
                {
                    this.OnTaxIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxId = value;
                    this.SendPropertyChanged("TaxId");
                    this.OnTaxIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address1 in the schema.
        /// </summary>
        [Column(Name = @"address_1", Storage = "_Address1", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address1
        {
            get
            {
                return this._Address1;
            }
            set
            {
                if (this._Address1 != value)
                {
                    this.OnAddress1Changing(value);
                    this.SendPropertyChanging();
                    this._Address1 = value;
                    this.SendPropertyChanged("Address1");
                    this.OnAddress1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address2 in the schema.
        /// </summary>
        [Column(Name = @"address_2", Storage = "_Address2", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address2
        {
            get
            {
                return this._Address2;
            }
            set
            {
                if (this._Address2 != value)
                {
                    this.OnAddress2Changing(value);
                    this.SendPropertyChanging();
                    this._Address2 = value;
                    this.SendPropertyChanged("Address2");
                    this.OnAddress2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Name = @"city", Storage = "_City", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging();
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Postcode in the schema.
        /// </summary>
        [Column(Name = @"postcode", Storage = "_Postcode", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Postcode
        {
            get
            {
                return this._Postcode;
            }
            set
            {
                if (this._Postcode != value)
                {
                    this.OnPostcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Postcode = value;
                    this.SendPropertyChanged("Postcode");
                    this.OnPostcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"country_id", Storage = "_CountryId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ZoneId in the schema.
        /// </summary>
        [Column(Name = @"zone_id", Storage = "_ZoneId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ZoneId
        {
            get
            {
                return this._ZoneId;
            }
            set
            {
                if (this._ZoneId != value)
                {
                    this.OnZoneIdChanging(value);
                    this.SendPropertyChanging();
                    this._ZoneId = value;
                    this.SendPropertyChanged("ZoneId");
                    this.OnZoneIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
